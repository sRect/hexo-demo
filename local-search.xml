<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/24/hello-world/"/>
    <url>/2022/03/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3分钟使用Hexo搭建自己的博客</title>
    <link href="/2022/03/24/hexo-blog/"/>
    <url>/2022/03/24/hexo-blog/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://github.com/sRect/sRect.github.io">本文 github 仓库</a></li><li><a href="https://gitee.com/srect/hexo-blog">本文 gitee 仓库</a></li><li><a href="https://srect.github.io/">博客预览</a></li></ul><h2 id="1-Hexo-是什么？"><a href="#1-Hexo-是什么？" class="headerlink" title="1. Hexo 是什么？"></a>1. Hexo 是什么？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。可以使用 Markdown 写文章，方便高效，无需后台服务，静态资源即可展示。搭配 github pages 或者个人云服务器都可以部署。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></div></td></tr></table></figure><h2 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3. 初始化"></a>3. 初始化</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo init &lt;project-name&gt;<br><span class="hljs-built_in">cd</span> &lt;project-name&gt;<br>npm install<br></code></pre></div></td></tr></table></figure><h2 id="4-主要-api"><a href="#4-主要-api" class="headerlink" title="4. 主要 api"></a>4. 主要 api</h2><ol><li>创建新文章</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo new &lt;title&gt;<br></code></pre></div></td></tr></table></figure><ul><li>在<code>source/_posts/</code>下新建</li></ul><p>例如创建 foo 页，在<code>source/_posts/</code>目录下就会多出一个<code>foo.md</code>文件，就在那里面写文章</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo new foo<br></code></pre></div></td></tr></table></figure><ul><li>在<code>source</code>下新建其它的目录</li></ul><p>例如在<code>source/about/</code>下创建<code>bar.md</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo new page --path about/bar <span class="hljs-string">&quot;bar&quot;</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>生成静态文件</li></ol><p>项目根目录会多出一个<code>public</code>文件夹，就是编译过后的<code>html</code>静态文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo generate<br></code></pre></div></td></tr></table></figure><ol start="3"><li>清除缓存</li></ol><p>把上面生成的<code>public</code>文件夹删掉</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo clean<br></code></pre></div></td></tr></table></figure><ol start="4"><li>启动服务</li></ol><p>默认情况下，<code>http://localhost:4000</code>访问</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo server<br></code></pre></div></td></tr></table></figure><h2 id="5-安装心仪的主题"><a href="#5-安装心仪的主题" class="headerlink" title="5. 安装心仪的主题"></a>5. 安装心仪的主题</h2><ol><li><a href="https://hexo.io/themes/">hexo themes</a></li></ol><p>这么多主题，总有一款适合你</p><ol start="2"><li>本文选择的主题<a href="https://github.com/fluid-dev/hexo-theme-fluid"><code>hexo-theme-fluid</code></a></li></ol><ul><li>主题安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></div></td></tr></table></figure><p>然后在博客目录下创建 _config.fluid.yml，将主题的 _config.yml 内容复制进去</p><ul><li>配置主题</li></ul><p>修改 Hexo 博客目录中的 _config.yml:</p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN  <span class="hljs-meta"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></div></td></tr></table></figure><h2 id="6-部署"><a href="#6-部署" class="headerlink" title="6. 部署"></a>6. 部署</h2><h3 id="6-1-github-pages-部署"><a href="#6-1-github-pages-部署" class="headerlink" title="6.1 github pages 部署"></a>6.1 github pages 部署</h3><ol><li><p>在你的 github 上创建一个名为<code>&lt;你的github用户名&gt;.github.io</code>的仓库</p></li><li><p>本地生成 ssh 密钥对</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;用户名@example.com &quot;</span><br></code></pre></div></td></tr></table></figure><ol start="3"><li><p>在仓库<code>Settings &gt; Deploy Keys</code>中添加公钥内容，并勾选访问权限，最后确定</p></li><li><p>在仓库<code>Settings &gt; Secrets</code>中添加私钥，key 为<code>DEPLOY_KEY</code>，内容为私钥内容</p></li><li><p>项目<code>_config.yml</code>配置文件和主题配置文件配置<code>deploy</code>字段</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;你的github仓库</span> <span class="hljs-string">SSH下载链接&gt;</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br></code></pre></div></td></tr></table></figure><ol start="6"><li><code>.github/workflows/deploy.yml</code></li></ol><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Github</span> <span class="hljs-string">Pages</span> <span class="hljs-string">Deploy</span><br><br><span class="hljs-comment"># https://github.com/marketplace/actions/hexo-action?version=v1.0.4</span><br><br><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>]<br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">A</span> <span class="hljs-string">job</span> <span class="hljs-string">to</span> <span class="hljs-string">deploy</span> <span class="hljs-string">blog.</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">submodules:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Checkout private submodules(themes or something else).</span><br><br>      <span class="hljs-comment"># Caching dependencies to speed up workflows. (GitHub will remove any cache entries that have not been accessed in over 7 days.)</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Cache</span> <span class="hljs-string">node</span> <span class="hljs-string">modules</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v1</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">cache</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">node_modules</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.os</span> <span class="hljs-string">&#125;&#125;-node-$&#123;&#123;</span> <span class="hljs-string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br><span class="hljs-string">            $&#123;&#123; runner.os &#125;&#125;-node-</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Dependencies</span><br>        <span class="hljs-attr">if:</span> <span class="hljs-string">steps.cache.outputs.cache-hit</span> <span class="hljs-type">!=</span> <span class="hljs-string">&#x27;true&#x27;</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">ci</span><br><br>      <span class="hljs-comment"># Deploy hexo blog website.</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">deploy</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">sma11black/hexo-action@v1.0.3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">deploy_key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DEPLOY_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">user_name:</span> <span class="hljs-string">&lt;你的github用户名&gt;</span> <span class="hljs-comment"># (or delete this input setting to use bot account)</span><br>          <span class="hljs-attr">user_email:</span> <span class="hljs-string">&lt;你的github邮箱&gt;</span> <span class="hljs-comment"># (or delete this input setting to use bot account)</span><br>          <span class="hljs-attr">commit_msg:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.event.head_commit.message</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-comment"># (or delete this input setting to use hexo default settings)</span><br>      <span class="hljs-comment"># Use the output from the `deploy` step(use for test action)</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Get</span> <span class="hljs-string">the</span> <span class="hljs-string">output</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">echo</span> <span class="hljs-string">&quot;$<span class="hljs-template-variable">&#123;&#123; steps.deploy.outputs.notify &#125;&#125;</span>&quot;</span><br></code></pre></div></td></tr></table></figure><ol start="7"><li>使用<code>git</code>提交代码，在仓库<code>Actions</code>里可以看到 yml 配置文件的自动执行日志，执行结束后，不出意外的话，浏览器里访问<code>https://&lt;你的github用户名&gt;.github.io</code>，可以看到你的博客了！</li></ol><h3 id="6-2-docker-容器部署在个人云服务器"><a href="#6-2-docker-容器部署在个人云服务器" class="headerlink" title="6.2 docker 容器部署在个人云服务器"></a>6.2 docker 容器部署在个人云服务器</h3><ol><li><p>在 github 仓库<code>Settings &gt; Secrets</code>中添加你的阿里云镜像容器服务账号，key 为<code>ALIYUN_DOCKER_USERNAME</code>，dockerhub 等也可以，这里以阿里云镜像容器服务为例</p></li><li><p>在 github 仓库<code>Settings &gt; Secrets</code>中添加你的阿里云镜像容器服务密码，key 为<code>ALIYUN_DOCKER_PASSWORD</code></p></li><li><p>Dockerfile</p></li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Dockerfile"><span class="hljs-comment"># 1. 基础镜像安装</span><br><span class="hljs-keyword">FROM</span> alpine:<span class="hljs-number">3.15</span> AS base<br><br><span class="hljs-keyword">ENV</span> NODE_ENV=production \<br>  APP_PATH=/usr/share/nginx/hexo<br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-variable">$APP_PATH</span></span><br><br><span class="hljs-comment"># 使用国内镜像，加速下面 apk add安装</span><br><span class="hljs-comment"># 如果是在github上打包镜像，无需使用内内镜像，注释掉即可</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27;</span> /etc/apk/repositories</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apk add --no-cache --update nodejs=16.14.0-r0 yarn=1.22.17-r0</span><br><br><span class="hljs-comment"># 2. 基于基础镜像安装项目依赖和打包</span><br><span class="hljs-keyword">FROM</span> base AS install<br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . ./</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yarn install</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yarn run build</span><br><br><span class="hljs-keyword">FROM</span> base AS result<br><br><span class="hljs-comment"># 将public目录下的文件全部复制到/usr/share/nginx/hexo下面</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=install <span class="hljs-variable">$APP_PATH</span>/public .</span><br><br><span class="hljs-comment"># 3. 最终基于nginx进行构建</span><br><span class="hljs-keyword">FROM</span> nginx:alpine<br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /usr/share/nginx/hexo</span><br><br><span class="hljs-comment"># 添加自己的配置 default.conf 在下面</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> nginx.conf /etc/nginx/conf.d/default.conf</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=result /usr/share/nginx/hexo .</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br></code></pre></div></td></tr></table></figure><ol start="4"><li><code>.github/workflows/deploy.yml</code></li></ol><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">deploy</span> <span class="hljs-string">ci</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span> <span class="hljs-comment"># push 时触发ci</span><br>    <span class="hljs-attr">branches:</span> [<span class="hljs-string">main</span>] <span class="hljs-comment"># 作用于main分支</span><br>  <span class="hljs-comment"># pull_request:</span><br>  <span class="hljs-comment">#   branches: [main]</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><br>    <span class="hljs-comment"># strategy:</span><br>    <span class="hljs-comment">#   matrix:</span><br>    <span class="hljs-comment">#     node-version: [14.x]</span><br>    <span class="hljs-comment">#     # See supported Node.js release schedule at https://nodejs.org/en/about/releases/</span><br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-comment"># 拉取main分支代码</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br><br>      <span class="hljs-comment"># # 指定nodejs版本</span><br>      <span class="hljs-comment"># - name: Use Node.js $&#123;&#123; matrix.node-version &#125;&#125;</span><br>      <span class="hljs-comment">#   uses: actions/setup-node@v2</span><br>      <span class="hljs-comment">#   with:</span><br>      <span class="hljs-comment">#     node-version: $&#123;&#123; matrix.node-version &#125;&#125;</span><br>      <span class="hljs-comment">#     cache: &quot;yarn&quot;</span><br><br>      <span class="hljs-comment"># # 安装依赖</span><br>      <span class="hljs-comment"># - name: install</span><br>      <span class="hljs-comment">#   run: sudo yarn install</span><br><br>      <span class="hljs-comment"># # 打包</span><br>      <span class="hljs-comment"># - name: build</span><br>      <span class="hljs-comment">#   run: sudo yarn run build</span><br><br>      <span class="hljs-comment"># 制作docker镜像并推送到阿里云容器镜像服务</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">build</span> <span class="hljs-string">and</span> <span class="hljs-string">push</span> <span class="hljs-string">docker</span> <span class="hljs-string">image</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          echo $&#123;&#123; secrets.ALIYUN_DOCKER_PASSWORD &#125;&#125; | docker login registry.cn-hangzhou.aliyuncs.com --username $&#123;&#123; secrets.ALIYUN_DOCKER_USERNAME &#125;&#125; --password-stdin</span><br><span class="hljs-string">          docker image build -t hexo-blog .</span><br><span class="hljs-string">          docker tag hexo-blog registry.cn-hangzhou.aliyuncs.com/&lt;命名空间&gt;/&lt;镜像仓库名&gt;:latest</span><br><span class="hljs-string">          docker push registry.cn-hangzhou.aliyuncs.com/&lt;命名空间&gt;/&lt;镜像仓库名&gt;:latest</span><br><span class="hljs-string">          docker logout</span><br></code></pre></div></td></tr></table></figure><ol start="5"><li>使用 docker 容器可视化管理，比如<code>portainer</code>等，拉取刚才制作的镜像，然后运行容器。或者登录云服务器，手动拉取镜像再运行容器</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 拉取镜像</span><br>docker pull registry.cn-hangzhou.aliyuncs.com/&lt;命名空间&gt;/&lt;镜像仓库名&gt;:latest<br><br><span class="hljs-comment"># 运行容器</span><br>docker container run -d -p &lt;你的服务器宿主机向外暴露的端口&gt;:80 --name hexo-blog registry.cn-hangzhou.aliyuncs.com/&lt;命名空间&gt;/&lt;镜像仓库名&gt;:latest<br></code></pre></div></td></tr></table></figure><ol start="6"><li>不出意外，浏览器里访问<code>http:&lt;你的ip或者配好的域名&gt;:&lt;端口&gt;</code>，可以看到你的博客了！</li></ol><h2 id="7-参考资料"><a href="#7-参考资料" class="headerlink" title="7. 参考资料"></a>7. 参考资料</h2><ol><li><a href="https://hexo.io/zh-cn/docs">Hexo 官方文档</a></li><li><a href="https://hexo.fluid-dev.com/docs/guide">Hexo Fluid 主题用户手册</a></li><li><a href="https://github.com/marketplace/actions/hexo-action?version=v1.0.4">Hexo Github Action</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>github actions</tag>
      
      <tag>CI</tag>
      
      <tag>CD</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mermaid使用</title>
    <link href="/2022/03/11/mermaid/"/>
    <url>/2022/03/11/mermaid/</url>
    
    <content type="html"><![CDATA[<p>这里是文章摘要…</p><span id="more"></span><p>mermaid 流程图 + 饼图使用<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="mermaid">[1]</span></a></sup></p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><pre><code class=" mermaid">flowchart TBA[Hard] --&gt;|Text| B(Round)B --&gt; C&#123;Decision&#125;C --&gt;|One| D[Result 1]C --&gt;|Two| E(Result 2)</code></pre><h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><blockquote><p><a href="https://mermaid-js.github.io/mermaid/#/pie">https://mermaid-js.github.io/mermaid/#/pie</a></p></blockquote><pre><code class=" mermaid">pietitle Pets adopted by volunteers&quot;Dogs&quot; : 386&quot;Cats&quot; : 85&quot;Rats&quot; : 15</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md">mermaid</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>mermaid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序持续定位</title>
    <link href="/2022/03/10/wechat-location/"/>
    <url>/2022/03/10/wechat-location/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://github.com/sRect/taro_wx">github 源码仓库</a></li></ul><h3 id="1-客户端详情"><a href="#1-客户端详情" class="headerlink" title="1. 客户端详情"></a>1. 客户端详情</h3><blockquote><p>文章内使用 Tarojs 开发微信小程序</p></blockquote><ul><li>手机型号：小米 10</li><li>操作系统及版本：Android 10</li><li>客户端平台：android</li><li>SDKVersion：2.20.2</li></ul><h3 id="2-注意点"><a href="#2-注意点" class="headerlink" title="2. 注意点"></a>2. 注意点</h3><ol><li>taro 项目配置文件<code>src/app.config.js</code>中要添加以下配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">requiredBackgroundModes</span>: [<span class="hljs-string">&quot;location&quot;</span>],<br>  <span class="hljs-attr">permission</span>: &#123;<br>    <span class="hljs-string">&quot;scope.userLocation&quot;</span>: &#123;<br>      <span class="hljs-attr">desc</span>: <span class="hljs-string">&quot;如实填写实际用途&quot;</span>, <span class="hljs-comment">// 高速公路行驶持续后台定位</span><br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="2"><li>检查手机是否打开位置信息开关</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">getSystemInfoAsync</span>(&#123;<br>  <span class="hljs-title function_">success</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-property">locationEnabled</span>);<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><ol start="3"><li>检查是否给微信开了定位权限</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">getSystemInfoAsync</span>(&#123;<br>  <span class="hljs-title function_">success</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-property">locationAuthorized</span>);<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><ol start="4"><li>检查当前小程序是否开了后台定位权限</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">getSetting</span>(&#123;<br>  <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-keyword">const</span> authSetting = res.<span class="hljs-property">authSetting</span>;<br>    <span class="hljs-keyword">if</span> (<br>      !authSetting[<span class="hljs-string">&quot;scope.userLocation&quot;</span>] ||<br>      !authSetting[<span class="hljs-string">&quot;scope.userLocationBackground&quot;</span>]<br>    ) &#123;<br>      <span class="hljs-comment">// 让用户在弹出的选项中务必勾选“使用小程序期间和离开小程序之后”选项</span><br>      <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">openSetting</span>();<br>    &#125;<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><h3 id="3-完整代码"><a href="#3-完整代码" class="headerlink" title="3. 完整代码"></a>3. 完整代码</h3><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Taro</span>, &#123; useReady, useDidShow, useDidHide &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@tarojs/taro&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">View</span>, <span class="hljs-title class_">Map</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@tarojs/components&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">hasOwnProperty</span> = (<span class="hljs-params">obj, key</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hasOwnProperty</span>.<span class="hljs-title function_">call</span>(obj, key);<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">HandleLocation</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [systemSetting, setSystemSetting] = <span class="hljs-title function_">useState</span>(&#123;&#125;);<br>  <span class="hljs-keyword">const</span> [location, setLocation] = <span class="hljs-title function_">useState</span>(&#123; <span class="hljs-attr">longitude</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-attr">latitude</span>: <span class="hljs-string">&quot;&quot;</span> &#125;);<br>  <span class="hljs-keyword">const</span> [locationList, setLocationList] = <span class="hljs-title function_">useState</span>([]);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleGetLocation</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">canIUse</span>(<span class="hljs-string">&quot;startLocationUpdateBackground&quot;</span>)) &#123;<br>      <span class="hljs-comment">// https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html</span><br>      <span class="hljs-comment">// 小程序全局配置</span><br>      <span class="hljs-comment">// https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#permission</span><br>      <span class="hljs-comment">// wx.authorize(&#123;scope: &quot;scope.userInfo&quot;&#125;)，不会弹出授权窗口，请使用 &lt;button open-type=&quot;getUserInfo&quot;/&gt;</span><br>      <span class="hljs-comment">// 需要授权 scope.userLocation、scope.userLocationBackground 时必须配置地理位置用途说明</span><br><br>      <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">startLocationUpdateBackground</span>(&#123;<br>        <span class="hljs-title function_">success</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">onLocationChange</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>            <span class="hljs-title function_">setLocationList</span>(<span class="hljs-function">(<span class="hljs-params">pre</span>) =&gt;</span> [...pre, data]);<br><br>            <span class="hljs-title function_">setLocation</span>(&#123; <span class="hljs-attr">longitude</span>: data.<span class="hljs-property">longitude</span>, <span class="hljs-attr">latitude</span>: data.<span class="hljs-property">latitude</span> &#125;);<br><br>            <span class="hljs-comment">// ajax发送数据到后台</span><br>            <span class="hljs-comment">// ...</span><br>          &#125;);<br>        &#125;,<br>        <span class="hljs-title function_">fail</span>(<span class="hljs-params">err</span>) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>          <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">showToast</span>(&#123;<br>            <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;定位失败&quot;</span>,<br>          &#125;);<br><br>          <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">openSetting</span>();<br>        &#125;,<br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">showToast</span>(&#123;<br>        <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;您的设备暂不支持定位&quot;</span>,<br>      &#125;);<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-comment">// 检查手机是否打开位置信息开关</span><br>  <span class="hljs-comment">// 检查是否给微信开了定位权限</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">checkMobileLocationAuth</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">getSystemInfoAsync</span>(&#123;<br>        <span class="hljs-title function_">success</span>(<span class="hljs-params">data</span>) &#123;<br>          <span class="hljs-title function_">setSystemSetting</span>(data);<br><br>          <span class="hljs-keyword">if</span> (<br>            data &amp;&amp;<br>            <span class="hljs-title function_">hasOwnProperty</span>(data, <span class="hljs-string">&quot;locationEnabled&quot;</span>) &amp;&amp;<br>            !data.<span class="hljs-property">locationEnabled</span><br>          ) &#123;<br>            <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">showModal</span>(&#123;<br>              <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;提示&quot;</span>,<br>              <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;请打开手机设置-位置信息(GPS)开关&quot;</span>,<br>              <span class="hljs-attr">confirmText</span>: <span class="hljs-string">&quot;确定&quot;</span>,<br>              <span class="hljs-attr">showCancel</span>: <span class="hljs-literal">false</span>,<br>            &#125;);<br><br>            <span class="hljs-title function_">reject</span>();<br>          &#125;<br><br>          <span class="hljs-keyword">if</span> (<br>            data &amp;&amp;<br>            <span class="hljs-title function_">hasOwnProperty</span>(data, <span class="hljs-string">&quot;locationAuthorized&quot;</span>) &amp;&amp;<br>            !data.<span class="hljs-property">locationAuthorized</span><br>          ) &#123;<br>            <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">showModal</span>(&#123;<br>              <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;提示&quot;</span>,<br>              <span class="hljs-attr">content</span>:<br>                <span class="hljs-string">&quot;请打开手机设置-应用设置-应用管理-微信-权限管理-定位权限开关&quot;</span>,<br>              <span class="hljs-attr">confirmText</span>: <span class="hljs-string">&quot;确定&quot;</span>,<br>              <span class="hljs-attr">showCancel</span>: <span class="hljs-literal">false</span>,<br>              <span class="hljs-title function_">success</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-comment">// Taro.openSetting();</span><br>              &#125;,<br>            &#125;);<br><br>            <span class="hljs-title function_">reject</span>();<br>          &#125;<br><br>          <span class="hljs-title function_">resolve</span>();<br>        &#125;,<br>        <span class="hljs-title function_">fail</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-title function_">reject</span>();<br>        &#125;,<br>      &#125;);<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-comment">// 检查当前小程序是否开了定位权限</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">checkMiniAppLocationAuth</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">canIUse</span>(<span class="hljs-string">&quot;getSetting&quot;</span>)) <span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>();<br><br>      <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">getSetting</span>(&#123;<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>          <span class="hljs-keyword">const</span> authSetting = res.<span class="hljs-property">authSetting</span>;<br><br>          <span class="hljs-keyword">if</span> (<br>            authSetting &amp;&amp;<br>            <span class="hljs-title function_">hasOwnProperty</span>(authSetting, <span class="hljs-string">&quot;scope.userLocation&quot;</span>) &amp;&amp;<br>            <span class="hljs-title function_">hasOwnProperty</span>(authSetting, <span class="hljs-string">&quot;scope.userLocationBackground&quot;</span>) &amp;&amp;<br>            authSetting[<span class="hljs-string">&quot;scope.userLocation&quot;</span>] &amp;&amp;<br>            authSetting[<span class="hljs-string">&quot;scope.userLocationBackground&quot;</span>]<br>          ) &#123;<br>            <span class="hljs-title function_">resolve</span>();<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">canIUse</span>(<span class="hljs-string">&quot;openSetting&quot;</span>)) &#123;<br>              <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">showModal</span>(&#123;<br>                <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;提示&quot;</span>,<br>                <span class="hljs-attr">content</span>:<br>                  <span class="hljs-string">&quot;请在点击确定后，在弹出的选项中务必勾选“使用小程序期间和离开小程序之后”选项&quot;</span>,<br>                <span class="hljs-attr">confirmText</span>: <span class="hljs-string">&quot;确定&quot;</span>,<br>                <span class="hljs-attr">showCancel</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-title function_">success</span>(<span class="hljs-params"></span>) &#123;<br>                  <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">openSetting</span>();<br>                &#125;,<br>              &#125;);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">showModal</span>(&#123;<br>                <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;提示&quot;</span>,<br>                <span class="hljs-attr">content</span>:<br>                  <span class="hljs-string">&quot;请点击右上角“...”更多-设置-位置信息，在弹出的选项中务必勾选“使用小程序期间和离开小程序之后”选项&quot;</span>,<br>                <span class="hljs-attr">confirmText</span>: <span class="hljs-string">&quot;确定&quot;</span>,<br>                <span class="hljs-attr">showCancel</span>: <span class="hljs-literal">false</span>,<br>              &#125;);<br>            &#125;<br><br>            <span class="hljs-title function_">reject</span>();<br>          &#125;<br>        &#125;,<br>      &#125;);<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-title function_">useReady</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;useReady==&gt;&quot;</span>);<br>  &#125;);<br><br>  <span class="hljs-title function_">useDidShow</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;useDidShow==&gt;&quot;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">canIUse</span>(<span class="hljs-string">&quot;stopLocationUpdate&quot;</span>)) &#123;<br>      <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">stopLocationUpdate</span>(&#123;<br>        <span class="hljs-title function_">complete</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-title function_">checkMobileLocationAuth</span>()<br>            .<span class="hljs-title function_">then</span>(checkMiniAppLocationAuth)<br>            .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>              <span class="hljs-comment">// 全部ok，可以进行持续定位</span><br>              <span class="hljs-title function_">handleGetLocation</span>();<br>            &#125;)<br>            .<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;err==&gt;&quot;</span>);<br>            &#125;);<br>        &#125;,<br>      &#125;);<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-title function_">useDidHide</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;useDidHide==&gt;&quot;</span>);<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Map</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%; height: 200px;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">scale</span>=<span class="hljs-string">&#123;16&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">longitude</span>=<span class="hljs-string">&#123;location.longitude&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">latitude</span>=<span class="hljs-string">&#123;location.latitude&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><ul><li>经过本地开发实际测试，把小程序切到后台后，切换到其他 app</li><li>或者手机直接锁屏</li></ul><p>以上两种情况，1 分钟后，<code>startLocationUpdateBackground</code>api 即失效，只有重新解锁手机，重新回到微信，api 的实时位置监控才被唤醒，尚未找到解决方法 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="微信小程序授权">[1]</span></a></sup></p><h3 id="5-其他"><a href="#5-其他" class="headerlink" title="5. 其他"></a>5. 其他</h3><p>钉钉小程序<code>dd.getLocation</code>只有当前钉钉小程序当前在激活状态下可以获取到，切换到后台和手机锁屏后，即失效 <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="微信小程序全局配置">[2]</span></a></sup></p><h3 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6. 参考资料"></a>6. 参考资料</h3><!-- 1. [微信小程序授权](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html)2. [微信小程序全局配置](https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#permission) --><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html">微信小程序授权</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#permission">微信小程序全局配置</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>wechat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>微信小程序</tag>
      
      <tag>wechat</tag>
      
      <tag>tarojs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多图超详细 jenkins 容器安装并部署前端项目</title>
    <link href="/2022/03/08/jenkins/"/>
    <url>/2022/03/08/jenkins/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://github.com/sRect/myJenkins">本文 my-jenkins github 仓库</a></li><li><a href="https://github.com/sRect/myblog">本文前端 react 项目 github 仓库</a></li></ul><h3 id="1-提前准备"><a href="#1-提前准备" class="headerlink" title="1.提前准备"></a>1.提前准备</h3><ol><li>1 台 linux 云服务器或者本地虚拟机代替</li><li>在服务器宿主机上装好 docker</li><li>准备好 2 个 github 仓库(或者 gitee 仓库),1 个用于 jenkins，1 个用于前端项目(文章以 github 仓库为例)</li><li>1 个 dockerhub 仓库，用于存储 jenkins 镜像</li></ol><h3 id="2-jenkins-容器安装"><a href="#2-jenkins-容器安装" class="headerlink" title="2.jenkins 容器安装"></a>2.jenkins 容器安装</h3><h4 id="1-安装前的疑问"><a href="#1-安装前的疑问" class="headerlink" title="1. 安装前的疑问"></a>1. 安装前的疑问</h4><ol><li>为什么不直接在宿主机上安装 jenkins？</li></ol><p>答：可以直接在宿主机上安装 jenkins，并不一定非得使用容器这种形式安装，只不过本文使用了容器安装这种方式。</p><ol start="2"><li>为什么不直接拉取 dockerhub 上的 jenkins 镜像？</li></ol><p>答：可以直接拉取，但一定要拉取<code>jenkins/jenkins</code>这个镜像，<code>jenkins</code>这个镜像已经很久没维护了。<br>还有官方的 jenkins 镜像默认是没有 sudo 用户权限的，即执行<code>sudo wget http://xxxx</code>，是不识别 sudo 命令的，还有常见的<code>wget</code>、<code>vim</code>、<code>ping</code>等常用命令都是没有的，需要自己安装，所以这里选择自己构建 jenkins 镜像。</p><ol start="3"><li>如何在 jenkins 容器里执行 docker 命令？</li></ol><p>答：<a href="http://www.up4dev.com/2018/11/27/run-docker-by-jenkins-in-docker/">一番搜索，有两种方案</a>，本文使用了 <code>Docker-outside-of-Docker</code> 方案，另一种未实验成功。</p><ul><li><p><code>Docker-outside-of-Docker</code></p><p>使用外部的 docker，即容器宿主机上的 docker。将宿主机的 docker 程序映射到 jenkins 容器里。这样没安装 docker 的 jenkins 容器可以执行 docker 命令。但需要注意的是，容器里本身是没有 docker 的，是把指令发送给宿主机来执行的。</p></li><li><p><code>Docker-in-Docker</code></p><p>顾名思义，在 docker 容器里安装 docker，然后使用 docker。容器里有 docker，和宿主机上的 docker 是隔离的。</p></li></ul><h4 id="2-Dockerfile-编写"><a href="#2-Dockerfile-编写" class="headerlink" title="2. Dockerfile 编写"></a>2. Dockerfile 编写</h4><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> jenkins/jenkins:latest<br><br><span class="hljs-keyword">USER</span> root<br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update \</span><br><span class="language-bash">  <span class="hljs-comment"># 安装sudo</span></span><br>  &amp;&amp; apt-get install -y sudo \<br>  &amp;&amp; rm -rf /var/lib/apt/lists/*<br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;jenkins ALL=NOPASSWD: ALL&quot;</span> &gt;&gt; /etc/sudoers</span><br><br><span class="hljs-keyword">USER</span> jenkins<br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br></code></pre></div></td></tr></table></figure><h4 id="3-github-的-workflow-配置文件"><a href="#3-github-的-workflow-配置文件" class="headerlink" title="3. github 的 workflow 配置文件"></a>3. github 的 workflow 配置文件</h4><ul><li><p>前提需要在 github 的 jenkins 仓库里设置好 secrets</p></li><li><p>在仓库的<code>Settings -&gt; Secrets -&gt; Actions</code>，点击<code>New repository secret</code>按钮创建你的 dockerhub 账号和密码，即添加<code>DOCKERHUB_USERNAME</code>和<code>DOCKERHUB_TOKEN</code>。如下图所示操作：</p></li></ul><p><img src="/assets/img/jenkins-docker/add-secrets.jpg" alt="add secrets"></p><ul><li>&#x2F;.github&#x2F;workflows&#x2F;deploy.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">jenkins</span> <span class="hljs-string">image</span> <span class="hljs-string">build</span> <span class="hljs-string">and</span> <span class="hljs-string">push</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [<span class="hljs-string">main</span>]<br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br><br>      <span class="hljs-comment">#制作docker镜像推送到dockerhub</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">build</span> <span class="hljs-string">and</span> <span class="hljs-string">push</span> <span class="hljs-string">to</span> <span class="hljs-string">dockerhub</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          docker login -u $&#123;&#123; secrets.DOCKERHUB_USERNAME &#125;&#125; -p $&#123;&#123; secrets.DOCKERHUB_TOKEN &#125;&#125;</span><br><span class="hljs-string">          docker image build -t my-jenkins:latest .</span><br><span class="hljs-string">          docker tag my-jenkins:latest $&#123;&#123; secrets.DOCKERHUB_USERNAME &#125;&#125;/my-jenkins:latest</span><br><span class="hljs-string">          docker push $&#123;&#123; secrets.DOCKERHUB_USERNAME &#125;&#125;/my-jenkins:latest</span><br><span class="hljs-string">          docker logout</span><br></code></pre></div></td></tr></table></figure><ul><li>git 提交代码，自动打包推送镜像到 dockerhub</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;feat: init&quot;</span><br>git push -u origin main<br></code></pre></div></td></tr></table></figure><p>不出意外，<code>Actions</code>里可以看到，自动部署成功</p><p><img src="/assets/img/jenkins-docker/workflows.jpg" alt="workflows"></p><p>镜像也成功推送到 dockerhub 了</p><p><img src="/assets/img/jenkins-docker/myjebkins.jpg" alt="myjebkins"></p><h4 id="4-在服务器宿主机上拉取刚才的镜像并安装"><a href="#4-在服务器宿主机上拉取刚才的镜像并安装" class="headerlink" title="4. 在服务器宿主机上拉取刚才的镜像并安装"></a>4. 在服务器宿主机上拉取刚才的镜像并安装</h4><ol><li>拉取镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker pull [你的dockerhub名字]/my-jenkins:latest<br></code></pre></div></td></tr></table></figure><ol start="2"><li>启动容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo docker container run -d \<br>-v /var/run/docker.sock:/var/run/docker.sock \<br>-v $(which docker):/usr/bin/docker \<br>-p 8000:8080 \<br>--name my-jenkins [你的dockerhub名字]/my-jenkins:latest<br></code></pre></div></td></tr></table></figure><p>解释下参数的含义：</p><ul><li><p><code>-d</code>: 后台运行容器</p></li><li><p><code>-v</code>: 指定挂载目录卷。</p><ul><li>第 1 行表示将宿主机上的<code>/var/run/docker.sock</code>目录映射到容器中，这样我们在容器中运行的 docker 命令，就会被发送到宿主机上去执行</li><li>第 2 行表示将宿主机上的 docker 程序映射到容器中，这样容器就可以运行 docker 命令，容器本身没有安装 docker 服务。</li></ul></li><li><p><code>-p</code>: 前面是宿主机上的端口(服务器安全组中要配置好，不然浏览器里无法访问)，后面是容器端口，jenkins 默认是 8080 端口</p></li><li><p><code>-name</code>: 给容器命名，是基于<code>[你的dockerhub名字]/my-jenkins:latest</code>这个镜像创建的容器，并命名为<code>my-jenkins</code></p></li></ul><p>不出意外，容器启动成功，我们可以用浏览器进行访问了。</p><h3 id="3-jenkins-容器配置"><a href="#3-jenkins-容器配置" class="headerlink" title="3.jenkins 容器配置"></a>3.jenkins 容器配置</h3><blockquote><p><strong>注意</strong>：如果在 jenkins 里不部署 docker 项目，这一章节可以略过，这里都是为了能在 jenkins 里部署 docker 项目准备的。</p></blockquote><p>在浏览器访问前，我们还需要进入容器内部，安装常用命令工具，检验是否可以执行 docker 命令。</p><ol><li>先进入容器内部</li></ol><blockquote><p>如果你的宿主机上安装了如<code>portainer</code>、<code>rancher</code>等 docker 容器管理面板，可以直接通过可视化的方式来进入容器，就不用敲命令了。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker container <span class="hljs-built_in">exec</span> -it my-jenkins /bin/bash<br></code></pre></div></td></tr></table></figure><ol start="2"><li>查看系统信息</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/issue<br></code></pre></div></td></tr></table></figure><p>不出意外，打印出</p><figure class="highlight livescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livescript">Debian GNU/Linux <span class="hljs-number">11</span> <span class="hljs-string">\n</span> <span class="hljs-string">\l</span><br></code></pre></div></td></tr></table></figure><p>说明容器内部是<code>Debian</code>发行版，不是<code>Ubuntu</code>，也不是<code>CentOS</code>。</p><ol start="3"><li>安装常用工具</li></ol><blockquote><p>因为容器内是<code>Debian</code>，那就使用 <code>apt-get</code>。安装这些工具的目的在于后面有可能需要进入容器操作，所以这里提前安装好。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 先更新升级apt-get源</span><br>sudo apt-get update<br>sudo apt-get upgrade<br><span class="hljs-comment"># 安装systemctl</span><br>sudo apt-get install -y systemctl<br><span class="hljs-comment"># 安装vim</span><br>sudo apt-get install -y vim<br><span class="hljs-comment"># 安装wget</span><br>sudo apt-get install -y wget<br></code></pre></div></td></tr></table></figure><ol start="4"><li>检验容器内部是否可以执行 docker 命令</li></ol><ul><li><p>测试 <code>docker -v</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker -v<br></code></pre></div></td></tr></table></figure><p>不出意外，正常打印信息，比如：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Docker</span> version <span class="hljs-number">17</span>.<span class="hljs-number">12</span>.<span class="hljs-number">1</span>-ce, build <span class="hljs-number">7390</span>fc6<br></code></pre></div></td></tr></table></figure><p>如果出现报错：</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">docker: <span class="hljs-keyword">error</span> <span class="hljs-keyword">while</span> loading shared libraries: libltdl.<span class="hljs-keyword">so</span>.7: cannot <span class="hljs-keyword">open</span> shared object <span class="hljs-keyword">file</span>: <span class="hljs-keyword">No</span> such <span class="hljs-keyword">file</span> or directory<br></code></pre></div></td></tr></table></figure><p>那就再安装<code>libltdl7</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install -y libltdl7<br></code></pre></div></td></tr></table></figure></li><li><p>测试运行 <code>hello-world</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo docker run --<span class="hljs-built_in">rm</span> hello-world<br></code></pre></div></td></tr></table></figure><p>如果正常打印下面信息，说明在容器里执行 docker 命令是没问题的。</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">Hello <span class="hljs-keyword">from</span> Docker!<br>This message shows <span class="hljs-keyword">that</span> your installation appears <span class="hljs-keyword">to</span> be working correctly.<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="4-jenkins-初始化"><a href="#4-jenkins-初始化" class="headerlink" title="4.jenkins 初始化"></a>4.jenkins 初始化</h3><ol><li>浏览器里访问<code>http://[你的服务器ip]:[上面启动容器暴露的端口，我这里是8000]</code>，开始初始化，如下图：</li></ol><p><img src="/assets/img/jenkins-docker/jenkens-init.jpg"></p><ol start="2"><li>初始化结束后，需要解锁 Jenkins</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-unlock.jpg"></p><p>进入容器内部，执行下面命令，复制出那一串密码，粘贴到这里，然后点击确定</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /var/jenkins_home/secrets/initialAdminPassword<br></code></pre></div></td></tr></table></figure><ol start="3"><li>安装推荐的插件</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-plugin.jpg"></p><p>点击左侧<em>安装推荐的插件</em>，过一会，等插件安装好</p><p><img src="/assets/img/jenkins-docker/jenkins-plugins-install.jpg"></p><ol start="4"><li>注册管理员账号</li></ol><p>按着提示一步步来操作</p><p><img src="/assets/img/jenkins-docker/jenkins-admin.jpg"></p><ol start="5"><li>最终进入 jenkins 首页，表示安装成功了</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-welcome.jpg"></p><h3 id="5-jenkins-部署前端项目"><a href="#5-jenkins-部署前端项目" class="headerlink" title="5.jenkins 部署前端项目"></a>5.jenkins 部署前端项目</h3><blockquote><p>这里以 react(create-react-app 创建) 项目为例，vue 的一样的，和框架无关</p></blockquote><h4 id="5-1-Jenkins-安装-Nodejs-插件"><a href="#5-1-Jenkins-安装-Nodejs-插件" class="headerlink" title="5.1 Jenkins 安装 Nodejs 插件"></a>5.1 Jenkins 安装 Nodejs 插件</h4><blockquote><p>因为是前端项目，离不开 nodejs，所以要安装</p></blockquote><ol><li>点击左侧<code>Manage Jenkins(系统管理)</code>,在<code>System Configuration(系统配置)</code>下点击<code>Manage Plugins(插件管理)</code>，找到并安装 Nodejs 插件，点击<code>Download now and install after restart</code>,安装完成后，勾选重启，jenkins 会自动重启</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-plugin-nodejs.png"></p><ol start="2"><li>重启完成后，点击左侧<code>Manage Jenkins(系统管理)</code>,在<code>System Configuration(系统配置)</code>下点击<code>全局工具配置</code>，找到 Nodejs 选项，点击<code>新增Nodejs</code>按钮，输入别名，最后点击保存，就配置好 Nodejs 了</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-global-plugin.jpg"></p><h4 id="5-2-部署前的配置"><a href="#5-2-部署前的配置" class="headerlink" title="5.2 部署前的配置"></a>5.2 部署前的配置</h4><ol><li><p>提前准备好前端项目，提交到 github 仓库</p></li><li><p>github 生成 Personal access tokens</p><p>github 头像下拉框-&gt; <code>Settings</code> -&gt; 左侧菜单<code>Developer settings</code> -&gt; <code>Personal access tokens</code> -&gt; 点击<code>Generate new token</code>，<strong>注意：请把生成的 token 复制下来，页面刷新后就没了</strong></p></li></ol><p><img src="/assets/img/jenkins-docker/github-token.jpg"></p><ol start="3"><li>jenkins 中添加 Github 服务器</li></ol><ul><li>系统管理 -&gt; 系统配置 -&gt; 添加 Github 服务器 -&gt; 添加 Secret text 凭证 -&gt; 连接测试</li></ul><p><img src="/assets/img/jenkins-docker/jenkins-addpj.jpg"></p><ul><li>第 2 步点击后，弹出下面弹框，类型里下拉选择<code>Secret text</code>,<code>Secret</code>里填入上面生成的 token，点击确定</li></ul><p><img src="/assets/img/jenkins-docker/jenkins-pj.jpg"></p><ul><li>第 5 步点击后，勾选<code>为Github指定另一个Hook URL</code>,会自动生成一个 url，保存下这个 url</li></ul><p><img src="/assets/img/jenkins-docker/jenkins-auto-webhooks.jpg"></p><p><strong>最后，别忘记保存</strong></p><ol start="4"><li>配置 github 仓库的<code>Webhooks</code></li></ol><ul><li><p>点击<code>Settings</code>-&gt;<code>Webhooks</code>-&gt;<code>Add Webhook</code>-&gt;输入<code>Payload URL</code></p></li><li><p>这里的 Payload URL，就是上面生成的 Hook URL</p></li></ul><p><img src="/assets/img/jenkins-docker/github-webhook.jpg"></p><h4 id="5-3-正式部署前端项目"><a href="#5-3-正式部署前端项目" class="headerlink" title="5.3 正式部署前端项目"></a>5.3 正式部署前端项目</h4><ol><li>jenkins 左侧菜单点击<code>新建任务</code>，输入任务名称，选择<code>构建一个自由风格的软件项目</code>，点击确定</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-firsttask.jpg"></p><ol start="2"><li>创建</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-task-1.jpg"></p><ol start="3"><li>源码管理</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-task-2.jpg"></p><ol start="4"><li>构建触发器</li></ol><blockquote><p>这样每次在提交代码后，jenkins 就可以自动为我们构建项目</p></blockquote><p>勾选<code>GitHub hook trigger for GITScm polling</code></p><p><img src="/assets/img/jenkins-docker/jenkins-task-3.jpg"></p><ol start="5"><li>构建环境</li></ol><p>这里是选择项目需要的 nodejs 版本，nodejs 的版本就按着前面所说的添加</p><p><img src="/assets/img/jenkins-docker/jenkins-task-4.jpg"></p><ol start="6"><li>构建-执行 shell</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-task-5.jpg"></p><p>完整 shell 如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">node -v<br>npm -v<br>docker -v<br>sudo su<br><br>echo &quot;1.开始打包构建==&gt;&quot;<br>npm install -g yarn<br>yarn install<br>npm run build<br><br>&#123; # try<br>echo &quot;2.暂停旧的容器==&gt;&quot;<br>  sudo docker container stop react-app<br>&#125; || &#123; # catch<br>  echo &quot;2.旧的容器不存在==&gt;&quot;<br>    # save log for exception<br>&#125;<br><br>&#123; # try<br>echo &quot;3.删除旧的容器==&gt;&quot;<br>  sudo docker container rm react-app<br>&#125; || &#123; # catch<br>  echo &quot;3.旧的容器不存在==&gt;&quot;<br>&#125;<br><br>&#123; # try<br>echo &quot;4.删除旧的镜像==&gt;&quot;<br>  sudo docker image rm react-app:latest<br>&#125; || &#123; # catch<br>  echo &quot;4.旧的镜像不存在==&gt;&quot;<br>&#125;<br><br>echo &quot;5.开始构建==&gt;&quot;<br>sudo docker image build -t react-app:latest .<br>sudo docker tag react-app:latest srect/react-app:latest<br><br>echo &quot;6.开始启动docer容器==&gt;&quot;<br><br>sudo docker container run -d -p 8002:80 --name react-app react-app:latest<br></code></pre></div></td></tr></table></figure><ol start="7"><li>点击保存，然后<code>立即构建</code>，可以进入任务，点击控制台输出，查看具体的构建日志</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-console.jpg"></p><ol start="8"><li>我们可以随便修改下前端代码，然后提交代码，测试是否会自动构建</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-github-hook-log.jpg"></p><h3 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6. 参考资料"></a>6. 参考资料</h3><ol><li><a href="http://www.up4dev.com/2018/11/27/run-docker-by-jenkins-in-docker/">用安装在 Docker 中的 jenkins 运行 Docker 任务</a></li><li><a href="https://blog.csdn.net/qq_35566908/article/details/103149181">Jenkins+Github 实现自动触发构建</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jenkins</tag>
      
      <tag>docker</tag>
      
      <tag>ci</tag>
      
      <tag>cd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打造一个保存掘金文章的 cli</title>
    <link href="/2022/02/18/mycli/"/>
    <url>/2022/02/18/mycli/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://www.npmjs.com/package/juejin-save">npm package</a></li><li><a href="https://github.com/sRect/juejin-save">github 源码仓库</a></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm i juejin-save -g<br></code></pre></div></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">juejin-<span class="hljs-keyword">save</span> <span class="hljs-keyword">save</span> https:<span class="hljs-comment">//xxx</span><br></code></pre></div></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/assets/img/mycli/GIF.gif" alt="gif"></p><hr><h3 id="1-主要-package-version"><a href="#1-主要-package-version" class="headerlink" title="1. 主要 package version"></a>1. 主要 package version</h3><blockquote><p>注意：文章重点在于打造 cli，不是 puppeteer</p></blockquote><table><thead><tr><th align="left">package</th><th align="left">version</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left"><a href="https://github.com/tj/commander.js/blob/HEAD/Readme_zh-CN.md#%E5%91%BD%E4%BB%A4">commander</a></td><td align="left">^9.0.0</td><td align="left">创建处理命令</td></tr><tr><td align="left"><a href="https://github.com/SBoudrias/Inquirer.js/#objects">inquirer</a></td><td align="left">^8.2.0</td><td align="left">处理交互</td></tr><tr><td align="left"><a href="https://www.npmjs.com/package/ora">ora</a></td><td align="left">^5.4.1</td><td align="left">处理 loading</td></tr><tr><td align="left"><a href="https://github.com/puppeteer/puppeteer">puppeteer</a></td><td align="left">^13.3.2</td><td align="left">通过 api 来控制 Chromium 或 Chrome</td></tr></tbody></table><h3 id="2-项目目录结构"><a href="#2-项目目录结构" class="headerlink" title="2. 项目目录结构"></a>2. 项目目录结构</h3><figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript">├── bin<br>|  └── cli.js          <span class="hljs-comment">// 入口文件</span><br>├── LICENSE<br>├── <span class="hljs-keyword">package</span>-lock.json<br>├── <span class="hljs-keyword">package</span>.json<br>├── puppeteer.js       <span class="hljs-comment">// puppeteer保存文章文件</span><br>└── README.md<br></code></pre></div></td></tr></table></figure><h3 id="2-package-json-中添加bin字段"><a href="#2-package-json-中添加bin字段" class="headerlink" title="2. package.json 中添加bin字段"></a>2. package.json 中添加<code>bin</code>字段</h3><blockquote><p>添加<code>juejin-save</code>命令，指定运行文件为 bin 目录 cli.js</p></blockquote><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-addition">+ &#123;</span><br><span class="hljs-addition">+   &quot;bin&quot;: &#123;</span><br><span class="hljs-addition">+     &quot;juejin-save&quot;: &quot;bin/cli.js&quot;</span><br><span class="hljs-addition">+   &#125;</span><br><span class="hljs-addition">+ &#125;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-主要-package-api-介绍"><a href="#3-主要-package-api-介绍" class="headerlink" title="3. 主要 package api 介绍"></a>3. 主要 package api 介绍</h3><h4 id="3-1-commander"><a href="#3-1-commander" class="headerlink" title="3.1 commander"></a>3.1 commander</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Command</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;commander&quot;</span>);<br><span class="hljs-keyword">const</span> program = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Command</span>();<br><br>program<br>  .<span class="hljs-title function_">command</span>(<span class="hljs-string">&quot;clone &lt;source&gt; [destination]&quot;</span>)<br>  .<span class="hljs-title function_">description</span>(<span class="hljs-string">&quot;clone a repository into a newly created directory&quot;</span>)<br>  .<span class="hljs-title function_">action</span>(<span class="hljs-function">(<span class="hljs-params">source, destination</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;clone command called&quot;</span>);<br>  &#125;);<br><br>program.<span class="hljs-title function_">parse</span>();<br></code></pre></div></td></tr></table></figure><h4 id="3-2-inquirer"><a href="#3-2-inquirer" class="headerlink" title="3.2 inquirer"></a>3.2 inquirer</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> inquirer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;inquirer&quot;</span>);<br>inquirer<br>  .<span class="hljs-title function_">prompt</span>([<br>    <span class="hljs-comment">/* Pass your questions in here */</span><br>  ])<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">answers</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// Use user feedback for... whatever!!</span><br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (error.<span class="hljs-property">isTtyError</span>) &#123;<br>      <span class="hljs-comment">// Prompt couldn&#x27;t be rendered in the current environment</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// Something else went wrong</span><br>    &#125;<br>  &#125;);<br></code></pre></div></td></tr></table></figure><h4 id="3-3-ora"><a href="#3-3-ora" class="headerlink" title="3.3 ora"></a>3.3 ora</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> ora <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;ora&quot;</span>;<br><br><span class="hljs-keyword">const</span> spinner = <span class="hljs-title function_">ora</span>(<span class="hljs-string">&quot;Loading unicorns&quot;</span>).<span class="hljs-title function_">start</span>();<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  spinner.<span class="hljs-property">color</span> = <span class="hljs-string">&quot;yellow&quot;</span>;<br>  spinner.<span class="hljs-property">text</span> = <span class="hljs-string">&quot;Loading rainbows&quot;</span>;<br>&#125;, <span class="hljs-number">1000</span>);<br></code></pre></div></td></tr></table></figure><h4 id="3-4-puppeteer"><a href="#3-4-puppeteer" class="headerlink" title="3.4 puppeteer"></a>3.4 puppeteer</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> puppeteer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;puppeteer&quot;</span>);<br><br>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> browser = <span class="hljs-keyword">await</span> puppeteer.<span class="hljs-title function_">launch</span>();<br>  <span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">newPage</span>();<br>  <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">goto</span>(<span class="hljs-string">&quot;https://example.com&quot;</span>);<br>  <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">screenshot</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;example.png&quot;</span> &#125;);<br><br>  <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">close</span>();<br>&#125;)();<br></code></pre></div></td></tr></table></figure><h3 id="4-主要逻辑代码"><a href="#4-主要逻辑代码" class="headerlink" title="4. 主要逻辑代码"></a>4. 主要逻辑代码</h3><ol><li>bin&#x2F;cli.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-meta">#!/usr/bin/env node</span><br><br><span class="hljs-keyword">const</span> inquirer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;inquirer&quot;</span>);<br><span class="hljs-keyword">const</span> ora = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;ora&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Command</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;commander&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; puppeteerInit, saveToHtml, saveToMd, saveToPdf &#125; = <span class="hljs-built_in">require</span>(path.<span class="hljs-title function_">resolve</span>(<br>  __dirname,<br>  <span class="hljs-string">&quot;../puppeteer&quot;</span><br>));<br><br><span class="hljs-keyword">const</span> program = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Command</span>();<br><span class="hljs-keyword">const</span> spinner = <span class="hljs-title function_">ora</span>();<br><br><span class="hljs-comment">// 交互式询问</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handlePrompt</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> inquirer.<span class="hljs-title function_">prompt</span>([<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;autoCreateFolder&quot;</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">`Automatically create folders?`</span>,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;confirm&quot;</span>,<br>    &#125;,<br>    <span class="hljs-comment">//...</span><br>  ]);<br>&#125;<br><br><span class="hljs-comment">// 询问过后的处理,开始puppeteer初始化</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">AfterePrompt</span>(<span class="hljs-params">articleUrl, answers</span>) &#123;<br>  spinner.<span class="hljs-property">color</span> = <span class="hljs-string">&quot;yellow&quot;</span>;<br>  spinner.<span class="hljs-title function_">start</span>(<span class="hljs-string">&quot;puppeteer intial...&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> obj = <span class="hljs-keyword">await</span> <span class="hljs-title function_">puppeteerInit</span>(articleUrl, answers);<br><br>  spinner.<span class="hljs-title function_">stopAndPersist</span>(&#123;<br>    <span class="hljs-attr">symbol</span>: chalk.<span class="hljs-title function_">green</span>(<span class="hljs-string">&quot;✓&quot;</span>),<br>    <span class="hljs-attr">text</span>: chalk.<span class="hljs-title function_">green</span>(<span class="hljs-string">&quot;puppeteer init ok&quot;</span>),<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> obj;<br>&#125;<br><br><span class="hljs-comment">// 导出文件</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">exportFile</span>(<span class="hljs-params">arg</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; page, outMdFilePath, outPdfFilePath, outHtmlfFilePath &#125; = arg;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">saveToMd</span>(page, outMdFilePath);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">saveToPdf</span>(page, outPdfFilePath);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">saveToHtml</span>(page, outHtmlfFilePath);<br>&#125;<br><br><span class="hljs-comment">// 第一步：创建命令</span><br>program<br>  .<span class="hljs-title function_">version</span>(<span class="hljs-built_in">require</span>(path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../package.json&quot;</span>)).<span class="hljs-property">version</span>)<br>  .<span class="hljs-title function_">command</span>(<span class="hljs-string">&quot;save  &lt;article-url&gt;&quot;</span>)<br>  .<span class="hljs-title function_">description</span>(<span class="hljs-string">&quot;save https://xxx&quot;</span>)<br>  .<span class="hljs-title function_">action</span>(<span class="hljs-keyword">async</span> (articleUrl) =&gt; &#123;<br>    <span class="hljs-comment">// 第二步：交互式询问</span><br>    <span class="hljs-keyword">const</span> answers = <span class="hljs-keyword">await</span> <span class="hljs-title function_">handlePrompt</span>(articleUrl);<br>    <span class="hljs-comment">// 第三步：拿到交互结果</span><br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> <span class="hljs-title class_">AfterePrompt</span>(articleUrl, answers);<br>    <span class="hljs-comment">// 第四步：导出文件</span><br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">exportFile</span>(data);<br><br>    process.<span class="hljs-title function_">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;);<br><br>program.<span class="hljs-title function_">parse</span>();<br></code></pre></div></td></tr></table></figure><ol start="2"><li>puppeteer.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> puppeteer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;puppeteer&quot;</span>);<br><br><span class="hljs-comment">// 保存html</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">saveToHtml</span>(<span class="hljs-params">page, outHtmlfFilePath</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// 保存markdown</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">saveToMd</span>(<span class="hljs-params">page, outMdFilePath</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// 保存pdf</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">saveToPdf</span>(<span class="hljs-params">page, outPdfFilePath</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// puppeteer初始化</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">puppeteerInit</span>(<span class="hljs-params">href</span>) &#123;<br>  <span class="hljs-keyword">const</span> browser = <span class="hljs-keyword">await</span> puppeteer.<span class="hljs-title function_">launch</span>();<br>  <span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">newPage</span>();<br>  page.<span class="hljs-title function_">setViewport</span>(&#123;<br>    <span class="hljs-attr">width</span>: <span class="hljs-number">1920</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-number">1080</span>,<br>  &#125;);<br><br>  <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">goto</span>(href, &#123;<br>    <span class="hljs-attr">waitUntil</span>: <span class="hljs-string">&quot;domcontentloaded&quot;</span>,<br>    <span class="hljs-attr">referer</span>: href,<br>  &#125;);<br>  <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">waitForTimeout</span>(<span class="hljs-number">3000</span>); <span class="hljs-comment">// 确保页面加载完毕</span><br><br>  <span class="hljs-keyword">return</span> &#123;<br>    browser,<br>    page,<br>  &#125;;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  puppeteerInit,<br>  saveToHtml,<br>  saveToMd,<br>  saveToPdf,<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="5-本地测试"><a href="#5-本地测试" class="headerlink" title="5. 本地测试"></a>5. 本地测试</h3><ol><li>在项目根目录执行</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm <span class="hljs-built_in">link</span><br></code></pre></div></td></tr></table></figure><p>执行完之后，成功提示：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">added</span> <span class="hljs-number">1</span> package, and audited <span class="hljs-number">3</span> packages in <span class="hljs-number">1</span>s<br><br><span class="hljs-attribute">found</span> <span class="hljs-number">0</span> vulnerabilities<br></code></pre></div></td></tr></table></figure><p>也可以在本机的 npm 全局安装里找到一个软链接，如图：</p><p><img src="/assets/img/mycli/cli.jpg"></p><ol start="2"><li>在任意目录打开命令行，执行</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">juejin-save save  https://juejin.cn/post/xxxx<br></code></pre></div></td></tr></table></figure><p>不出意外，可以看到，多出了一个文件夹，文章被保存在文件夹里面了。</p><h3 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6. 参考资料"></a>6. 参考资料</h3><ol><li><p><a href="https://mp.weixin.qq.com/s/AH9fQdZnwMUcuczIVLOLVQ">手写一个合格的前端脚手架</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/1jzwybwyH80uDzfvvmDe_Q">实现 CLI 常用工具包 - 终端交互相关</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>cli</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cli</tag>
      
      <tag>puppeteer</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超详细手摸手带你docker-compose + portainer部署你的todolist小应用</title>
    <link href="/2022/01/29/docker-compose-portainer/"/>
    <url>/2022/01/29/docker-compose-portainer/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="http://121.199.8.71:8001/">项目线上预览</a></li><li><a href="https://github.com/sRect/docker-compose">github 源码仓库</a></li></ul><p>文章里很多都是配置，可以直接先直接复制过去使用，或者直接下载源代码运行，先跑通项目。</p><h3 id="1-主要-package-version-和提前准备"><a href="#1-主要-package-version-和提前准备" class="headerlink" title="1. 主要 package version 和提前准备"></a>1. 主要 package version 和提前准备</h3><ol><li>package version</li></ol><table><thead><tr><th align="center">package</th><th align="center">version</th></tr></thead><tbody><tr><td align="center">koa</td><td align="center">^2.13.4</td></tr><tr><td align="center">sequelize</td><td align="center">^6.14.1</td></tr><tr><td align="center">vite</td><td align="center">^2.7.13</td></tr><tr><td align="center">vue</td><td align="center">^3.2.25</td></tr><tr><td align="center">pinia</td><td align="center">^2.0.6</td></tr></tbody></table><ol start="2"><li>提前准备</li></ol><ul><li>1 台线上服务器，百度云、阿里云等等，并安装好 docker(教程自行搜索，很简单)。没有的用本地虚拟机代替，自行研究</li><li>注册一个 dockerhub 账户，有阿里云服务器的会自带容器镜像服务可以用，可以不用注册 dockerhub</li><li>注册一个 github 账户，并创建一个仓库。文章以 github 为例，gitee 的自行研究</li></ul><h3 id="2-项目目录解构"><a href="#2-项目目录解构" class="headerlink" title="2. 项目目录解构"></a>2. 项目目录解构</h3><blockquote><p>项目目录结构简单，前端应用放在<code>web</code>目录内，数据库放在<code>mysql</code>目录内，其它的是后台<code>koa</code>应用</p></blockquote><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">├── docker-compose.yml  <span class="hljs-meta"># docker-compose配置文件</span><br>├── Dockerfile <span class="hljs-meta"># 后台koa的容器镜像配置文件</span><br>├── <span class="hljs-built_in">log</span> <span class="hljs-meta"># 日志存储</span><br><span class="hljs-string">|  ├── access.log-2022-01-28.log</span><br><span class="hljs-string">|  ├── application.log-2022-01-28.log</span><br><span class="hljs-string">|  └── mysql.log-2022-01-28.log</span><br>├── middleware <span class="hljs-meta"># koa中间件</span><br><span class="hljs-string">|  ├── handleGlobalError.js</span><br><span class="hljs-string">|  ├── index.js</span><br><span class="hljs-string">|  └── logClientDevices.js</span><br>├── mysql <span class="hljs-meta"># mysql配置文件</span><br><span class="hljs-string">|  ├── create_db.sql # 创建数据库sql</span><br><span class="hljs-string">|  ├── Dockerfile # mysql的容器镜像配置文件</span><br><span class="hljs-string">|  ├── initial_data.sql # 初始化数据表sql</span><br><span class="hljs-string">|  ├── privileges.sql # 修改mysql账号权限密码</span><br><span class="hljs-string">|  └── setup.sh # 容器启动执行的shell</span><br>├── package-lock.json<br>├── package.json<br>├── public <span class="hljs-meta"># koa-static静态文件配置目录</span><br><span class="hljs-string">|  ├── favicon.ico</span><br><span class="hljs-string">|  └── index2.html</span><br>├── README.md<br>├── routes <span class="hljs-meta"># @koa/router的接口路由</span><br><span class="hljs-string">|  ├── todoList.js</span><br><span class="hljs-string">|  └── uuid.js</span><br>├── server.js <span class="hljs-meta"># koa的启动文件</span><br>├── util<br><span class="hljs-string">|  ├── db.js # mysql连接配置</span><br><span class="hljs-string">|  └── logger.js # koa-log4的日志配置</span><br>└── web <span class="hljs-meta"># vue前端应用</span><br>    ├── Dockerfile<br>    ├── index.html<br>    ├── nginx.conf<br>    ├── package.json<br>    ├── public<br>    ├── README.md<br>    ├── src<br>    <span class="hljs-string">|  ├── App.vue</span><br>    <span class="hljs-string">|  ├── assets</span><br>    <span class="hljs-string">|  ├── components</span><br>    <span class="hljs-string">|  ├── main.js</span><br>    <span class="hljs-string">|  ├── services # 接口</span><br>    <span class="hljs-string">|  └── store # Pinia状态管理</span><br>    ├── vite.config.js<br>    └── yarn.lock<br></code></pre></div></td></tr></table></figure><h3 id="3-前端部分"><a href="#3-前端部分" class="headerlink" title="3. 前端部分"></a>3. 前端部分</h3><blockquote><p>当然要用最近炒的火热的 Pinia 状态管理 + vue3 来写 todolist 应用了</p></blockquote><p><img src="/assets/img/portainer/todolist.jpg" alt="todolist.jpg"></p><h4 id="3-1-Pinia-状态管理快速上手，对着文档开撸"><a href="#3-1-Pinia-状态管理快速上手，对着文档开撸" class="headerlink" title="3.1 Pinia 状态管理快速上手，对着文档开撸"></a>3.1 <a href="https://pinia.esm.dev/introduction.html#a-more-realistic-example">Pinia 状态管理快速上手</a>，对着文档开撸</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// src/store/index.js</span><br><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> types <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./types&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useTodosStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&quot;todos&quot;</span>, &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">&#123; msg: string, id: string, is_finished: boolean, create_time: date </span>&#125;[]&#125; */</span><br>    <span class="hljs-attr">todos</span>: [],<br>    <span class="hljs-attr">filter</span>: types.<span class="hljs-property">ALL</span>,<br>    <span class="hljs-attr">nextId</span>: <span class="hljs-number">0</span>,<br>  &#125;),<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-title function_">finishedTodos</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">todo</span>) =&gt;</span> todo.<span class="hljs-property">is_finished</span>);<br>    &#125;,<br>    <span class="hljs-title function_">unfinishedTodos</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">todo</span>) =&gt;</span> !todo.<span class="hljs-property">is_finished</span>);<br>    &#125;,<br>    <span class="hljs-title function_">filterTodos</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">filter</span> === types.<span class="hljs-property">FINISHED</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">finishedTodos</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">filter</span> === types.<span class="hljs-property">UNFINISHED</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">unfinishedTodos</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-title function_">addTodos</span>(<span class="hljs-params">&#123; id, msg, create_time &#125;</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">unshift</span>(&#123; id, msg, create_time, <span class="hljs-attr">is_finished</span>: <span class="hljs-literal">false</span> &#125;);<br>    &#125;,<br>    <span class="hljs-title function_">finishedOneTodo</span>(<span class="hljs-params">obj</span>) &#123;<br>      <span class="hljs-keyword">const</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">id</span> === obj.<span class="hljs-property">id</span>);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>, &#123;<br>        ...obj,<br>        <span class="hljs-attr">is_finished</span>: <span class="hljs-literal">true</span>,<br>      &#125;);<br>    &#125;,<br>    <span class="hljs-title function_">deleteOne</span>(<span class="hljs-params">id</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">id</span> !== id);<br>    &#125;,<br>    <span class="hljs-title function_">setInitialData</span>(<span class="hljs-params">arr</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span> = [...arr];<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><h4 id="3-2-关于-vite-element-plus-启动报错-error-while-updating-dependencies"><a href="#3-2-关于-vite-element-plus-启动报错-error-while-updating-dependencies" class="headerlink" title="3.2 关于 vite+element-plus 启动报错 error while updating dependencies"></a>3.2 关于 vite+element-plus 启动报错 error while updating dependencies</h4><p>报错部分：</p><figure class="highlight moonscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs moonscript">上午<span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">22</span> [vite] new dependencies <span class="hljs-name">found</span>: element-plus/es, element-plus/es/components/option/style/css, updating...<br>上午<span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">22</span> [vite] Failed to <span class="hljs-built_in">load</span> source map <span class="hljs-keyword">for</span> /node_modules/.vite/chunk-TPOPRDHF.js?v=e12284c2.<br> &gt; <span class="hljs-name">error</span>: Failed to write to output <span class="hljs-name">file</span>: open <span class="hljs-name">D</span>:\my\resource\Vue.js\vue3+Pinia\node_modules\.vite\element-plus.<span class="hljs-name">js</span>: Access is denied.<br><br>上午<span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">37</span> [vite] <span class="hljs-built_in">error</span> <span class="hljs-keyword">while</span> updating <span class="hljs-name">dependencies</span>:<br><span class="hljs-name">Error</span>: Build failed with <span class="hljs-number">1</span> <span class="hljs-name">error</span>:<br><span class="hljs-name">error</span>: Failed to write to output <span class="hljs-name">file</span>: open <span class="hljs-name">D</span>:\my\resource\Vue.js\vue3+Pinia\node_modules\.vite\element-plus.<span class="hljs-name">js</span>: Access is denied.<br>    at failureErrorWithLog (<span class="hljs-name">D</span>:\my\resource\Vue.js\vue3+Pinia\node_modules\esbuild\lib\main.<span class="hljs-name">js</span>:<span class="hljs-number">1493</span>:<span class="hljs-number">15</span>)<br>    at <span class="hljs-name">D</span>:\my\resource\Vue.js\vue3+Pinia\node_modules\esbuild\lib\main.<span class="hljs-name">js</span>:<span class="hljs-number">1151</span>:<span class="hljs-number">28</span><br>    at runOnEndCallbacks (<span class="hljs-name">D</span>:\my\resource\Vue.js\vue3+Pinia\node_modules\esbuild\lib\main.<span class="hljs-name">js</span>:<span class="hljs-number">941</span>:<span class="hljs-number">63</span>)<br>    at buildResponseToResult (<span class="hljs-name">D</span>:\my\resource\Vue.js\vue3+Pinia\node_modules\esbuild\lib\main.<span class="hljs-name">js</span>:<span class="hljs-number">1149</span>:<span class="hljs-number">7</span>)<br>    at <span class="hljs-name">D</span>:\my\resource\Vue.js\vue3+Pinia\node_modules\esbuild\lib\main.<span class="hljs-name">js</span>:<span class="hljs-number">1258</span>:<span class="hljs-number">14</span><br>    at <span class="hljs-name">D</span>:\my\resource\Vue.js\vue3+Pinia\node_modules\esbuild\lib\main.<span class="hljs-name">js</span>:<span class="hljs-number">629</span>:<span class="hljs-number">9</span><br>    at handleIncomingPacket (<span class="hljs-name">D</span>:\my\resource\Vue.js\vue3+Pinia\node_modules\esbuild\lib\main.<span class="hljs-name">js</span>:<span class="hljs-number">726</span>:<span class="hljs-number">9</span>)<br>    at Socket.readFromStdout (<span class="hljs-name">D</span>:\my\resource\Vue.js\vue3+Pinia\node_modules\esbuild\lib\main.<span class="hljs-name">js</span>:<span class="hljs-number">596</span>:<span class="hljs-number">7</span>)<br>    at Socket.emit (events.<span class="hljs-name">js</span>:<span class="hljs-number">400</span>:<span class="hljs-number">28</span>)<br>    at addChunk (internal/streams/readable.<span class="hljs-name">js</span>:<span class="hljs-number">290</span>:<span class="hljs-number">12</span>)<br></code></pre></div></td></tr></table></figure><p>一番折腾（又是删除 node_modules 重新 install 安装，又是升级依赖到最新版本，又是检查文件夹路径有无中文…）过后，找到了<a href="https://github.com/nuxt/vite/issues/207#issuecomment-972655272">解决方法</a>：</p><p><img src="/assets/img/portainer/vite.png" alt="vite.png"></p><p>升级 Node.js 到最新版本（当前最新版本为 16.13.2），删掉 node_modules 文件夹，重新安装依赖，启动正常</p><p>如果你使用 nvm，可以这样快捷升级 nodejs</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nvm install 16.13.2<br>nvm use 16.13.2<br></code></pre></div></td></tr></table></figure><h4 id="3-3-nginx-conf"><a href="#3-3-nginx-conf" class="headerlink" title="3.3 nginx.conf"></a>3.3 nginx.conf</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs conf">server &#123;<br>    listen  80; #配置监听端口<br>    charset utf-8;<br><br>    #charset koi8-r;<br>    #access_log  /var/log/nginx/host.access.log  main;<br><br>    location ~ /api/ &#123; # 配置跨域转发<br>        # 注意这里的配置代理名称为docker-compose中koa容器的名称<br>        proxy_pass  http://koa_server:4000;<br>        # rewrite ^/api/(.*)$ /$1 break;<br>        proxy_set_header Host $host;<br>        proxy_set_header X-Real-IP $remote_addr;<br>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>        client_max_body_size 100m;<br>    &#125;<br><br>    location / &#123;<br>        root   /usr/share/nginx/dist; #服务默认启动目录<br>        index  index.html index.htm; #默认访问文件<br>        try_files $uri /index.html; # 防止浏览器刷新后，页面404<br>        client_max_body_size 100m;<br>    &#125;<br><br>    location =/admin &#123;<br>        deny all; #admin目录禁止任何人访问<br>    &#125;<br><br>    location ~\.java$ &#123;<br>        deny all; #匹配所有java文件禁止访问<br>    &#125;<br><br>    error_page   500 502 503 504  /50x.html; #错误状态的显示页面，配置后需重启<br>    error_page 404 /404.html; #404页面<br>    location = /50x.html &#123;<br>        root   /usr/share/nginx/html;<br>    &#125;<br><br>    gzip on; #开启gzip<br>    gzip_buffers 32 4k; #设置压缩所需要的缓冲区大小，以4k为单位，如果文件为32k则申请32*4k的缓冲区<br>    gzip_comp_level 6; #gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间<br>    gzip_min_length 4000; #gizp压缩起点，文件大于4k才进行压缩<br>    gzip_vary on; # 是否在http header中添加Vary: Accept-Encoding，建议开启<br>    gzip_static on; #nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩，如果找不到则不进行压缩<br>    gzip_types text/xml text/javascript application/javascript text/css text/plain application/json application/x-javascript; # 进行压缩的文件类型<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-4-Dockerfile"><a href="#3-4-Dockerfile" class="headerlink" title="3.4 Dockerfile"></a>3.4 Dockerfile</h4><blockquote><p>使用多阶段构建，减少容器体积</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> alpine:<span class="hljs-number">3.15</span> AS base<br><span class="hljs-keyword">ENV</span> NODE_ENV=production \<br>  APP_PATH=/app<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-variable">$APP_PATH</span></span><br><span class="hljs-comment"># 使用apk命令安装 nodejs 和 yarn</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apk add --no-cache --update nodejs=16.13.2-r0 yarn</span><br><br><span class="hljs-keyword">FROM</span> base AS install<br><span class="hljs-keyword">COPY</span><span class="language-bash"> package.json yarn.lock <span class="hljs-variable">$APP_PATH</span>/</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yarn install</span><br><br><span class="hljs-keyword">FROM</span> base AS build<br><span class="hljs-comment"># 拷贝上面生成的 node_modules 文件夹复制到最终的工作目录下</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=install <span class="hljs-variable">$APP_PATH</span>/node_modules <span class="hljs-variable">$APP_PATH</span>/node_modules</span><br><span class="hljs-comment"># 拷贝当前目录的文件到工作目录(除了.dockerignore中忽略的)</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . <span class="hljs-variable">$APP_PATH</span>/</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yarn run build</span><br><br><span class="hljs-keyword">FROM</span> nginx:alpine<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /usr/share/nginx/dist</span><br><span class="hljs-comment"># 添加自己的配置 default.conf 在下面</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> nginx.conf /etc/nginx/conf.d/default.conf</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=build /app/dist .</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br></code></pre></div></td></tr></table></figure><h3 id="4-后台部分"><a href="#4-后台部分" class="headerlink" title="4. 后台部分"></a>4. 后台部分</h3><h4 id="4-1-入口文件"><a href="#4-1-入口文件" class="headerlink" title="4.1 入口文件"></a>4.1 入口文件</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// server.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Koa</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;koa&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Router</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@koa/router&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ROOT</span> = path.<span class="hljs-title function_">resolve</span>(process.<span class="hljs-title function_">cwd</span>(), <span class="hljs-string">&quot;./&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; connectMySQL &#125; = <span class="hljs-built_in">require</span>(path.<span class="hljs-title function_">resolve</span>(<span class="hljs-variable constant_">ROOT</span>, <span class="hljs-string">&quot;./util/db&quot;</span>));<br><span class="hljs-keyword">const</span> todoList = <span class="hljs-built_in">require</span>(path.<span class="hljs-title function_">resolve</span>(<span class="hljs-variable constant_">ROOT</span>, <span class="hljs-string">&quot;./routes/todoList&quot;</span>));<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();<br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>();<br><br><span class="hljs-comment">// 加载所有子路由</span><br>router.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;/api&quot;</span>, todoList.<span class="hljs-title function_">routes</span>(), todoList.<span class="hljs-title function_">allowedMethods</span>());<br><span class="hljs-comment">// 加载路由中间件</span><br>app.<span class="hljs-title function_">use</span>(router.<span class="hljs-title function_">routes</span>()).<span class="hljs-title function_">use</span>(router.<span class="hljs-title function_">allowedMethods</span>());<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">4000</span>, <span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">connectMySQL</span>();<br>&#125;);<br></code></pre></div></td></tr></table></figure><h4 id="4-2-sequelize-连接-mysql-数据库"><a href="#4-2-sequelize-连接-mysql-数据库" class="headerlink" title="4.2 sequelize 连接 mysql 数据库"></a>4.2 <a href="https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/getting-started.md">sequelize 连接 mysql 数据库</a></h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// util/db.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Sequelize</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;sequelize&quot;</span>);<br><br><span class="hljs-keyword">const</span> db = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sequelize</span>(<span class="hljs-string">&quot;todolist&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>, &#123;<br>  <span class="hljs-attr">dialect</span>: <span class="hljs-string">&quot;mysql&quot;</span>,<br>  <span class="hljs-attr">dialectOptions</span>: &#123;<br>    <span class="hljs-attr">charset</span>: <span class="hljs-string">&quot;utf8mb4&quot;</span>,<br>    <span class="hljs-attr">collate</span>: <span class="hljs-string">&quot;utf8mb4_unicode_ci&quot;</span>,<br>    <span class="hljs-attr">supportBigNumbers</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">bigNumberStrings</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-comment">// 这里的host，线上指向docker-compose中mysql的容器名</span><br>  <span class="hljs-attr">host</span>:<br>    process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&quot;development&quot;</span><br>      ? <span class="hljs-string">&quot;localhost&quot;</span><br>      : <span class="hljs-string">&quot;todolist_mysql_server&quot;</span>,<br>  <span class="hljs-attr">timezone</span>: <span class="hljs-string">&quot;+08:00&quot;</span>, <span class="hljs-comment">// 东8区</span><br>  <span class="hljs-attr">port</span>: <span class="hljs-string">&quot;3306&quot;</span>,<br>&#125;);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">connectMySQL</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">await</span> db.<span class="hljs-title function_">authenticate</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;mysql连接成功&quot;</span>);<br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;连接失败，3秒后重试&quot;</span>);<br>    <span class="hljs-built_in">setTimeout</span>(connectMySQL, <span class="hljs-number">3000</span>);<br>  &#125;<br>&#125;;<br><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">connectMySQL</span> = connectMySQL;<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">db</span> = db;<br></code></pre></div></td></tr></table></figure><h4 id="4-3-接口示例"><a href="#4-3-接口示例" class="headerlink" title="4.3 接口示例"></a>4.3 接口示例</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// routes/todolist.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Router</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@koa/router&quot;</span>);<br><span class="hljs-keyword">const</span> dayjs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;dayjs&quot;</span>);<br><span class="hljs-keyword">const</span> utc = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;dayjs/plugin/utc&quot;</span>); <span class="hljs-comment">// dependent on utc plugin</span><br><span class="hljs-keyword">const</span> timezone = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;dayjs/plugin/timezone&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">QueryTypes</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;sequelize&quot;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ROOT</span> = path.<span class="hljs-title function_">resolve</span>(process.<span class="hljs-title function_">cwd</span>(), <span class="hljs-string">&quot;./&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; db &#125; = <span class="hljs-built_in">require</span>(path.<span class="hljs-title function_">resolve</span>(<span class="hljs-variable constant_">ROOT</span>, <span class="hljs-string">&quot;./util/db&quot;</span>));<br><br><span class="hljs-keyword">const</span> todoList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>();<br><span class="hljs-comment">// https://dayjs.gitee.io/docs/zh-CN/plugin/timezone</span><br>dayjs.<span class="hljs-title function_">extend</span>(utc);<br>dayjs.<span class="hljs-title function_">extend</span>(timezone);<br>dayjs.<span class="hljs-property">tz</span>.<span class="hljs-title function_">setDefault</span>(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>);<br><br><span class="hljs-comment">// 列表查询</span><br>todoList.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/todoList/list&quot;</span>, <span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> reqParams = ctx.<span class="hljs-property">query</span>;<br>  <span class="hljs-comment">// https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/getting-started.md#promises-%E5%92%8C-asyncawait</span><br><br>  <span class="hljs-keyword">const</span> selects = &#123;<br>    <span class="hljs-number">0</span>: <span class="hljs-string">&quot;SELECT * FROM todolist WHERE is_finished=&#x27;0&#x27; ORDER BY create_time DESC;&quot;</span>,<br>    <span class="hljs-number">1</span>: <span class="hljs-string">&quot;SELECT * FROM todolist WHERE is_finished=&#x27;1&#x27; ORDER BY create_time DESC;&quot;</span>,<br>    <span class="hljs-number">2</span>: <span class="hljs-string">&quot;SELECT * FROM todolist ORDER BY create_time DESC;&quot;</span>,<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> filterType = reqParams.<span class="hljs-property">filterType</span> || <span class="hljs-string">&quot;2&quot;</span>;<br><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">let</span> list = <span class="hljs-keyword">await</span> db.<span class="hljs-title function_">query</span>(selects[filterType], &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">QueryTypes</span>.<span class="hljs-property">SELECT</span>,<br>    &#125;);<br><br>    list = list.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> (&#123;<br>      ...item,<br>      <span class="hljs-attr">create_time</span>: <span class="hljs-title function_">dayjs</span>(item.<span class="hljs-property">create_time</span>)<br>        .<span class="hljs-title function_">tz</span>(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>)<br>        .<span class="hljs-title function_">format</span>(<span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>),<br>      <span class="hljs-attr">is_finished</span>: item.<span class="hljs-property">is_finished</span> === <span class="hljs-string">&quot;0&quot;</span> ? <span class="hljs-literal">false</span> : <span class="hljs-literal">true</span>,<br>    &#125;));<br><br>    ctx.<span class="hljs-property">body</span> = &#123;<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>      <span class="hljs-attr">data</span>: list || [],<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;ok&quot;</span>,<br>    &#125;;<br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>  &#125;<br><br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = todoList;<br></code></pre></div></td></tr></table></figure><h4 id="4-4-Dockerfile"><a href="#4-4-Dockerfile" class="headerlink" title="4.4 Dockerfile"></a>4.4 Dockerfile</h4><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> alpine:<span class="hljs-number">3.15</span> AS base<br><br><span class="hljs-keyword">ENV</span> NODE_ENV=production \<br>  APP_PATH=/www/node-server<br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-variable">$APP_PATH</span></span><br><br><span class="hljs-comment"># 使用apk命令安装 nodejs</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apk add --no-cache --update nodejs=16.13.2-r0 npm</span><br><br><span class="hljs-comment"># 基于基础镜像安装项目依赖</span><br><span class="hljs-keyword">FROM</span> base AS install<br><br><span class="hljs-comment"># 将当前目录的package.json 拷贝到工作目录下</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> package.json package-lock.json <span class="hljs-variable">$APP_PATH</span>/</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install</span><br><br><span class="hljs-comment"># 基于基础镜像进行最终构建</span><br><span class="hljs-keyword">FROM</span> base<br><br><span class="hljs-comment"># 拷贝 上面生成的 node_modules 文件夹复制到最终的工作目录下</span><br><span class="hljs-comment"># COPY命令复制文件夹的时候，不是直接复制该文件夹，而是将文件夹中的内容复制到目标路径</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=install <span class="hljs-variable">$APP_PATH</span>/node_modules <span class="hljs-variable">$APP_PATH</span>/node_modules</span><br><span class="hljs-comment"># 拷贝当前目录的文件到工作目录(除了.dockerignore中忽略的)</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . <span class="hljs-variable">$APP_PATH</span>/</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">4000</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;npm&quot;</span>, <span class="hljs-string">&quot;run&quot;</span>, <span class="hljs-string">&quot;server&quot;</span>]</span><br></code></pre></div></td></tr></table></figure><h4 id="4-5-注意事项"><a href="#4-5-注意事项" class="headerlink" title="4.5 注意事项"></a>4.5 注意事项</h4><ul><li>数据库连接配置时区<code>timezone</code>，设置为东 8 区</li><li>设置数据库字符集为<code>utf8mb4</code>，方便后面存储表情符</li><li><code>dayjs</code>库调整显示为东 8 区时间</li><li><code>sequelize</code>查询出来有重复项(非数据库里的数据重复)，需要配置<code>type</code>为<code>QueryTypes.SELECT</code></li></ul><h3 id="5-MySQL-部分"><a href="#5-MySQL-部分" class="headerlink" title="5. MySQL 部分"></a>5. MySQL 部分</h3><blockquote><p>这里选择的版本为<strong>5.7.30</strong>版本，线上 8.0 版本未部署成功</p></blockquote><h4 id="5-1-mysql-x2F-Dockerfile"><a href="#5-1-mysql-x2F-Dockerfile" class="headerlink" title="5.1 mysql&#x2F;Dockerfile"></a>5.1 mysql&#x2F;Dockerfile</h4><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> mysql:<span class="hljs-number">5.7</span>.<span class="hljs-number">30</span><br><br><span class="hljs-keyword">LABEL</span><span class="language-bash"> version=<span class="hljs-string">&quot;1.0.0&quot;</span> description=<span class="hljs-string">&quot;todolist MySQL 服务器&quot;</span></span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /mysql</span><br><br><span class="hljs-keyword">ENV</span> MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span><br><span class="hljs-comment"># MYSQL_DATABASE=todolist</span><br><span class="hljs-comment"># MYSQL_ALLOW_EMPTY_PASSWORD=yes</span><br><br><span class="hljs-comment"># 启动脚本</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> setup.sh /mysql/setup.sh</span><br><span class="hljs-comment"># 创建数据库</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> create_db.sql /mysql/create_db.sql</span><br><span class="hljs-comment"># 初始化数据</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> initial_data.sql /mysql/initial_data.sql</span><br><span class="hljs-comment"># 设置密码和权限</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> privileges.sql /mysql/privileges.sql</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">3306</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;/mysql/setup.sh&quot;</span>]</span><br></code></pre></div></td></tr></table></figure><h4 id="5-2-mysql-setup-sh容器启动脚本"><a href="#5-2-mysql-setup-sh容器启动脚本" class="headerlink" title="5.2 mysql/setup.sh容器启动脚本"></a>5.2 <code>mysql/setup.sh</code>容器启动脚本</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">set</span> -e<br><span class="hljs-comment"># https://xie.infoq.cn/article/a3c8ffbd34d818de010f2b0f6</span><br><span class="hljs-comment"># 打印mysql服务的状态</span><br><span class="hljs-built_in">echo</span> $(service mysql status)<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;1.启动mysql...&#x27;</span><br><span class="hljs-comment">#启动mysql</span><br><span class="hljs-comment"># service mysql stop</span><br><span class="hljs-comment"># service mysql restart</span><br>service mysql start<br><br><span class="hljs-comment"># sleep 3</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;2.创建数据库...&#x27;</span><br>mysql &lt;/mysql/create_db.sql<br><span class="hljs-built_in">sleep</span> 3<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;3.开始导入数据...&#x27;</span><br>mysql &lt;/mysql/initial_data.sql<br><br><span class="hljs-built_in">sleep</span> 3<br><span class="hljs-built_in">echo</span> $(service mysql status)<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;4.修改mysql权限...&#x27;</span><br>mysql &lt;/mysql/privileges.sql<br><span class="hljs-built_in">sleep</span> 3<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;4.权限修改完毕...&#x27;</span><br><br><span class="hljs-comment"># 防止container启动后退出</span><br><span class="hljs-comment"># http://www.mayanpeng.cn/archives/121.html</span><br><span class="hljs-built_in">tail</span> -f /dev/null<br></code></pre></div></td></tr></table></figure><h4 id="5-3-mysql-create-db-sql创建数据库"><a href="#5-3-mysql-create-db-sql创建数据库" class="headerlink" title="5.3 mysql/create_db.sql创建数据库"></a>5.3 <code>mysql/create_db.sql</code>创建数据库</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> todolist;<br></code></pre></div></td></tr></table></figure><h4 id="5-4-mysql-initial-data-sql初始化表"><a href="#5-4-mysql-initial-data-sql初始化表" class="headerlink" title="5.4 mysql/initial_data.sql初始化表"></a>5.4 <code>mysql/initial_data.sql</code>初始化表</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 使用todolist库</span><br>USE todolist;<br><br><span class="hljs-comment">-- 创建todolist表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> todolist(id <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">PRIMARY</span> KEY, create_time DATETIME <span class="hljs-keyword">UNIQUE</span>, is_finished ENUM(<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>, msg <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;--&#x27;</span>) COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;todolist表&#x27;</span> ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- 打印数据库</span><br><span class="hljs-keyword">SHOW</span> TABLES;<br><br><span class="hljs-comment">-- 打印表结构</span><br><span class="hljs-keyword">DESC</span> todolist;<br><br><span class="hljs-comment">-- 插入1条默认数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> todolist(id, create_time, is_finished, msg) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>, NOW(), <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;hello world&#x27;</span>);<br></code></pre></div></td></tr></table></figure><h4 id="5-5-mysql-privileges-sql设置权限密码"><a href="#5-5-mysql-privileges-sql设置权限密码" class="headerlink" title="5.5 mysql/privileges.sql设置权限密码"></a>5.5 <code>mysql/privileges.sql</code>设置权限密码</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">use mysql;<br><span class="hljs-keyword">SELECT</span> host, <span class="hljs-keyword">user</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span>;<br><br><span class="hljs-comment">-- 将数据库的权限授权给root用户，密码为123456</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><br><span class="hljs-comment">-- 刷新权限这一条命令一定要有：</span><br>flush privileges;<br></code></pre></div></td></tr></table></figure><h3 id="6-部署准备"><a href="#6-部署准备" class="headerlink" title="6 部署准备"></a>6 部署准备</h3><h4 id="6-1-提前准备好"><a href="#6-1-提前准备好" class="headerlink" title="6.1 提前准备好"></a>6.1 提前准备好</h4><ol><li><p>在<code>dockerhub</code>账号或者<code>阿里云镜像容器服务</code>创建 3 个仓库，分别放 mysql、koa、vue 应用，我这里创建的是<code>todolist_mysql</code>、<code>koa</code>和<code>vite_vue3_pinia</code>，在下面的 docker-compose.yml 配置文件中一一对应<br><img src="/assets/img/portainer/dockerhub.jpg" alt="dockerhub.jpg"></p></li><li><p>在你的<code>github</code>仓库里里配置好上面 dockerhub 的账号和密码<code>secrets</code>，方便于后面使用 github 仓库的 actions 推送。我这里创建的是<code>DOCKERHUB_TOKEN</code>放密码，<code>DOCKERHUB_USERNAME</code>放账户<br><img src="/assets/img/portainer/github.png" alt="github.png"></p></li></ol><h4 id="6-2-docker-compose-yml"><a href="#6-2-docker-compose-yml" class="headerlink" title="6.2 docker-compose.yml"></a>6.2 <code>docker-compose.yml</code></h4><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mysql:</span> <span class="hljs-comment"># mysql</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./mysql</span><br>    <span class="hljs-comment"># image名称为在dockerhub里创建好的名称</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">你的docker账户名/todolist_mysql:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">todolist_mysql_server</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-comment"># MYSQL_ROOT_PASSWORD: &quot;123456&quot;</span><br><br>  <span class="hljs-attr">node:</span> <span class="hljs-comment"># nodejs服务</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;mysql&quot;</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span> <span class="hljs-comment"># Dockerfile所在目录构建</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">你的docker账户名/koa:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">koa_server</span><br>    <span class="hljs-comment"># ports:</span><br>    <span class="hljs-comment">#   - &quot;8001:4000&quot;</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span> <span class="hljs-comment"># 自动重启</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">NODE_ENV=production</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">server</span> <span class="hljs-comment"># 覆盖容器启动后默认执行的命令</span><br><br>  <span class="hljs-attr">vue:</span><br>    <span class="hljs-attr">depends_on:</span> <span class="hljs-comment"># vue 容器会保证在 node容器之后启动</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;node&quot;</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./web</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">你的docker账户名/vite_vue3_pinia:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">vite_vue3_pinia</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">NODE_ENV=production</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8001:80&quot;</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">default:</span><br>    <span class="hljs-attr">external:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">vue3-koa</span><br></code></pre></div></td></tr></table></figure><h4 id="6-3-github-ci-配置文件"><a href="#6-3-github-ci-配置文件" class="headerlink" title="6.3 github ci 配置文件"></a>6.3 github ci 配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># .github/workflows/ci.yml</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">MySQL</span> <span class="hljs-string">+</span> <span class="hljs-string">Koa2</span> <span class="hljs-string">Server</span> <span class="hljs-string">+</span> <span class="hljs-string">Vue3</span> <span class="hljs-string">todolist</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [<span class="hljs-string">main</span>] <span class="hljs-comment"># 监听main分支</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br><br>      <span class="hljs-comment"># 制作docker镜像并推送到dockerhub</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">build</span> <span class="hljs-string">and</span> <span class="hljs-string">push</span> <span class="hljs-string">docker</span> <span class="hljs-string">image</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          # 这里用到上面创建的secrets变量</span><br><span class="hljs-string">          # 登录你的docker账号</span><br><span class="hljs-string">          docker login -u $&#123;&#123; secrets.DOCKERHUB_USERNAME &#125;&#125; -p $&#123;&#123; secrets.DOCKERHUB_TOKEN &#125;&#125;</span><br><span class="hljs-string">          # 进行docker镜像制作</span><br><span class="hljs-string">          docker-compose build</span><br><span class="hljs-string">          # 推送到你的docker账户里</span><br><span class="hljs-string">          docker-compose push</span><br><span class="hljs-string">          # 退出登录</span><br><span class="hljs-string">          docker logout</span><br></code></pre></div></td></tr></table></figure><h4 id="6-4-提交代码"><a href="#6-4-提交代码" class="headerlink" title="6.4 提交代码"></a>6.4 提交代码</h4><blockquote><p>等不及了，是时候进行提交代码了</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git add .<br><br>git commit -m <span class="hljs-string">&quot;feat: init&quot;</span><br><br>git push -u origin main<br></code></pre></div></td></tr></table></figure><p>不出意外，在仓库的<code>Actions</code>里看到构建成功。</p><p><img src="/assets/img/portainer/ci.png" alt="ci.png"></p><h3 id="7-Portainer出场"><a href="#7-Portainer出场" class="headerlink" title="7. Portainer出场"></a>7. <code>Portainer</code>出场</h3><blockquote><p>费了这么大劲，todolist 还没看到，是我的错，最后一步了，别放弃。</p></blockquote><h4 id="7-1-Portainer-的好处"><a href="#7-1-Portainer-的好处" class="headerlink" title="7.1 Portainer 的好处"></a>7.1 Portainer 的好处</h4><p>这就如同 git，使用 git GUI 工具和 git bash 命令行其他一样，方便容器管理操作。如果你喜欢命令行，就直接跳过这一节，直接部署容器吧。</p><p>把 git 仓库代码下载到服务器，<code>docker compose up</code>即可解决战斗！</p><h4 id="7-2-登录你的服务器安装portainer，我这里之前安装的-1-24-2-版本"><a href="#7-2-登录你的服务器安装portainer，我这里之前安装的-1-24-2-版本" class="headerlink" title="7.2 登录你的服务器安装portainer，我这里之前安装的 1.24.2 版本"></a>7.2 登录你的服务器安装<a href="https://hub.docker.com/r/portainer/portainer">portainer</a>，我这里之前安装的 1.24.2 版本</h4><blockquote><p>前提是在你的服务器上安装好 docker</p></blockquote><ol><li>下载</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker pull portainer/portainer:latest<br></code></pre></div></td></tr></table></figure><ol start="2"><li>运行</li></ol><blockquote><p>注意： 这里你的服务器的安全组要开放 9000 端口</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">docker run -d -p <span class="hljs-number">9000</span>:<span class="hljs-number">9000</span> -v <span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/docker.sock:/</span>var<span class="hljs-regexp">/run/</span>docker.sock --restart=always --name prtainer portainer/portainer<br></code></pre></div></td></tr></table></figure><h4 id="7-3-portainer-实操"><a href="#7-3-portainer-实操" class="headerlink" title="7.3 portainer 实操"></a>7.3 portainer 实操</h4><p>浏览器里打开<code>http://你的服务器公网ip:9000</code>,设置好账户和密码，进行登录，并且设置本地节点</p><p><img src="/assets/img/portainer/portainer.jpg" alt="portainer.png"></p><h4 id="7-3-1-拉取刚才推到-dockerhub-的镜像"><a href="#7-3-1-拉取刚才推到-dockerhub-的镜像" class="headerlink" title="7.3.1 拉取刚才推到 dockerhub 的镜像"></a>7.3.1 拉取刚才推到 dockerhub 的镜像</h4><blockquote><p>刚才那 3 个镜像都要拉取</p></blockquote><p><img src="/assets/img/portainer/portainer2.png" alt="portainer2.png"></p><p>如果是推到阿里云镜像容器的，点击左侧菜单 Registry，然后进去点击 Add registry 添加你的镜像容器 url，同时可以配置<code>Authentication</code>,你的账号和密码，然后就可以和上面一样 pull 镜像了</p><p><img src="/assets/img/portainer/portainer3.jpg" alt="portainer3.png"></p><h4 id="7-3-2-设置容器-NetWork，进行容器通信"><a href="#7-3-2-设置容器-NetWork，进行容器通信" class="headerlink" title="7.3.2 设置容器 NetWork，进行容器通信"></a>7.3.2 设置容器 NetWork，进行容器通信</h4><blockquote><p>我受不了，到底还有多少步，你骗我。真的马上结束了</p></blockquote><p>实质是使用了 <code>docker network</code>，然后再把自己的容器添加到这个 network 中来</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker network create 自定义bridge名称<br>docker network connect 自定义bridge名称 容器名称<br></code></pre></div></td></tr></table></figure><p>这里我们用图形化界面操作</p><p><img src="/assets/img/portainer/portainer5.jpg" alt="portainer5.png"></p><h4 id="7-3-3-部署容器"><a href="#7-3-3-部署容器" class="headerlink" title="7.3.3 部署容器"></a>7.3.3 部署容器</h4><blockquote><p>我真的受不了了，还没结束啊，这次真的结束了</p></blockquote><p>点击 container 添加容器。这里必须和 docker-compose 中的顺序一样，先部署 MySQL，再部署 Koa，最后部署 vue 应用</p><p><img src="/assets/img/portainer/portainer4.jpg" alt="portainer4.png"></p><p>进行部署配置，按顺序部署完 3 个容器，容器名称和端口必须都得和配置文件中的一样</p><p><img src="/assets/img/portainer/portainer6.jpg" alt="portainer6.png"></p><h4 id="7-3-4-阿弥陀佛"><a href="#7-3-4-阿弥陀佛" class="headerlink" title="7.3.4 阿弥陀佛"></a>7.3.4 阿弥陀佛</h4><blockquote><p>xdm，真的结束了，是我折磨你了。一切顺利的话，3 个容器都部署成功</p></blockquote><p>打开浏览器访问你的 todolist, <code>http://你的ip:8001</code></p><h4 id="7-3-5-关于保存-emoji-失败"><a href="#7-3-5-关于保存-emoji-失败" class="headerlink" title="7.3.5 关于保存 emoji 失败"></a>7.3.5 关于保存 emoji 失败</h4><blockquote><p>因为前面创建表的时候，msg 列没有使用<code>utf8mb4</code>字符集。那为什么不在建表的时候就设置好，我错了，xdm，揍我吧</p></blockquote><blockquote><p>觉得复杂难受的，直接跳过</p></blockquote><p><strong>docker 进入容器实战</strong></p><p>前提是登录你的服务器</p><ol><li>查看运行的容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker container ls<br></code></pre></div></td></tr></table></figure><ol start="2"><li>进入容器</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it 上面mysql容器的CONTAINER ID sh<br></code></pre></div></td></tr></table></figure><ol start="3"><li>连接 mysql</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mysql -h localhost -u root -p<br><span class="hljs-meta prompt_"># </span><span class="language-bash">然后输入设置的密码</span><br></code></pre></div></td></tr></table></figure><p>不出意外，我们成功进入容器内，并连接上了 mysql</p><figure class="highlight smali"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smali">[root@iZbp19ftqv2b85av0b2d4qZ /]<span class="hljs-comment"># docker exec -it a206f021c205 sh</span><br><span class="hljs-comment"># mysql -h localhost -u root -p</span><br>Enter password:<br>Welcome to the MySQ<span class="hljs-class">L monitor.  Commands end with ;</span><span class="hljs-built_in"> or </span>\g.<br>Your MySQL connection id is 53<br>Server version: 5.7.30 MySQL Community Server (GPL)<br><br>Copyright (c) 2000, 2020, Oracle<span class="hljs-built_in"> and/or </span>its affiliates. All rights reserved.<br><br>Oracle is a registered trademark of Oracle Corporation<span class="hljs-built_in"> and/or </span>its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type &#x27;help;&#x27;<span class="hljs-built_in"> or </span>&#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.<br><br>mysql&gt;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>修改 todolist 表的 msg 列属性</li></ol><ul><li>使用 todolist 库</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">USE todolist;<br></code></pre></div></td></tr></table></figure><ul><li>进行修改</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> todolist MODIFY msg <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8mb4 <span class="hljs-keyword">collate</span> utf8mb4_unicode_ci <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;--&#x27;</span>;<br>Query OK, <span class="hljs-number">6</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.04</span> sec)<br>Records: <span class="hljs-number">6</span>  Duplicates: <span class="hljs-number">0</span>  Warnings: <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><ul><li>验证是否修改成功</li></ul><blockquote><p>可以看到，msg 列已经修改成功了</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> todolist\G<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>       <span class="hljs-keyword">Table</span>: todolist<br><span class="hljs-keyword">Create</span> <span class="hljs-keyword">Table</span>: <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `todolist` (<br>  `id` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `create_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `is_finished` enum(<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>  `msg` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;--&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `create_time` (`create_time`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;todolist表&#x27;</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></div></td></tr></table></figure><ul><li>浏览器里输入 emoji 表情符添加测试，不出意外，已经 ok。结束了！！！</li></ul><h3 id="8-参考资料"><a href="#8-参考资料" class="headerlink" title="8. 参考资料"></a>8. 参考资料</h3><ol><li><p><a href="https://segmentfault.com/a/1190000039803577">使用 Portainer 部署 Docker 容器实践</a></p></li><li><p><a href="https://xie.infoq.cn/article/a3c8ffbd34d818de010f2b0f6">MySql 的 Dockerfile 编写</a></p></li><li><p><a href="https://pinia.esm.dev/introduction.html#a-more-realistic-example">Pinia 文档</a></p></li><li><p><a href="https://github.com/demopark/sequelize-docs-Zh-CN">sequelize 中文文档</a></p></li><li><p><a href="https://dayjs.gitee.io/zh-CN/">dayjs</a></p></li><li><p><a href="https://juejin.cn/post/7045999468843368462">【实战】Node 服务中如何写日志？</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>github actions</tag>
      
      <tag>CI</tag>
      
      <tag>CD</tag>
      
      <tag>Portainer</tag>
      
      <tag>docker-compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Next.js + Docker 打造一个属于你的私人博客</title>
    <link href="/2022/01/08/nextjs-blog/"/>
    <url>/2022/01/08/nextjs-blog/</url>
    
    <content type="html"><![CDATA[<h3 id="1-Next-js-简介"><a href="#1-Next-js-简介" class="headerlink" title="1. Next.js 简介"></a>1. Next.js 简介</h3><blockquote><p>[The React Framework for Production] Next.js gives you the best developer experience with all the features you need for production: hybrid static &amp; server rendering, TypeScript support, smart bundling, route pre-fetching, and more. No config needed.</p></blockquote><p>一顿牛皮下来，就是 Next.js 在生产和开发环境下都能带给你最佳体验，开箱体验，无需任何配置</p><h3 id="2-为什么选择-Next-js"><a href="#2-为什么选择-Next-js" class="headerlink" title="2. 为什么选择 Next.js"></a>2. 为什么选择 Next.js</h3><blockquote><p>老表，咋回事哦，vue 不能满足了吗，搞这玩意干嘛，<a href="https://www.vuepress.cn/">vuepress</a> 写所谓的静态博客网站不香？香，还比这简单，但请容许我介绍完这个 Next.js</p></blockquote><p><img src="/assets/img/nextjs-blog/gs.jpg"></p><h4 id="2-1-那-Next-js-有哪些优点呢？"><a href="#2-1-那-Next-js-有哪些优点呢？" class="headerlink" title="2.1 那 Next.js 有哪些优点呢？"></a>2.1 那 Next.js 有哪些优点呢？</h4><ul><li>图片优化</li><li>支持国际化</li><li>零配置</li><li>支持 SSG + SSR</li><li>文件系统路由</li><li>优点太多…</li></ul><p><img src="/assets/img/nextjs-blog/yd.jpg"></p><h4 id="2-2-那-Next-js-比这-vue-和-react-造出来的单页面有何不同？"><a href="#2-2-那-Next-js-比这-vue-和-react-造出来的单页面有何不同？" class="headerlink" title="2.2 那 Next.js 比这 vue 和 react 造出来的单页面有何不同？"></a>2.2 那 Next.js 比这 vue 和 react 造出来的单页面有何不同？</h4><ol><li>vue 和 react 造出来的单页面应用 SEO 不友好，搜索引擎抓不到 html 的内容，内容都在 js 里</li><li>vue 和 react 造出来的单页面首屏白屏时间过长，在不对项目 webpack 专门优化的情况下，那个 bundle.js 很大，严重影响体验</li></ol><p><strong>总结</strong>：如果项目对 SEO 要求比较高，建议上 Next 或<a href="https://www.nuxtjs.cn/">Nuxt</a></p><h4 id="2-3-Next-js-和传统的-php、jsp-有何区别？"><a href="#2-3-Next-js-和传统的-php、jsp-有何区别？" class="headerlink" title="2.3 Next.js 和传统的 php、jsp 有何区别？"></a>2.3 Next.js 和传统的 php、jsp 有何区别？</h4><blockquote><p>简单了解</p></blockquote><ol><li>客户端渲染</li></ol><p>前后端分离，通过 ajax 进行数据交互，vue 和 react 就是这种模式</p><ol start="2"><li>服务端模板渲染</li></ol><p>php 和 jsp 是解析模板文件，将数据渲染到文件上，最后将模板文件变为 html，生成 html 返回给浏览器，前后端不用同一套代码</p><ol start="3"><li>前后端同构渲染</li></ol><p>也是服务端生成 html 返回给浏览器，区别在于前后端会共用一部分组件代码逻辑，这部分代码既可以用于服务端，也可以用于客户端，而模板渲染是两套代码</p><h3 id="3-Next-js-主要-api-快速上手"><a href="#3-Next-js-主要-api-快速上手" class="headerlink" title="3. Next.js 主要 api 快速上手"></a>3. Next.js 主要 api 快速上手</h3><blockquote><p><strong>注意</strong>：Node.js 版本 12.22.0 起步</p></blockquote><h4 id="3-1-使用create-next-app脚手架创建项目"><a href="#3-1-使用create-next-app脚手架创建项目" class="headerlink" title="3.1 使用create-next-app脚手架创建项目"></a>3.1 使用<code>create-next-app</code>脚手架创建项目</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npx create-next-app@latest<br><span class="hljs-comment"># or</span><br>yarn create next-app<br></code></pre></div></td></tr></table></figure><h4 id="3-2-项目目录结构"><a href="#3-2-项目目录结构" class="headerlink" title="3.2 项目目录结构"></a>3.2 项目目录结构</h4><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">│  .eslintrc.<span class="hljs-keyword">json</span><br><span class="hljs-keyword"></span>│  .gitignore<br>│  next.config.<span class="hljs-keyword">js </span>    <span class="hljs-comment"># next配置文件</span><br>│  package.<span class="hljs-keyword">json</span><br><span class="hljs-keyword"></span>│  README.md<br>│  yarn.lock<br>│<br>├─pages               <span class="hljs-comment"># 页面路由</span><br>│  │  index.<span class="hljs-keyword">js</span><br><span class="hljs-keyword"></span>│  │  _app.<span class="hljs-keyword">js</span><br><span class="hljs-keyword"></span>│  │<br>│  └─api              <span class="hljs-comment"># api服务</span><br>│          hello.<span class="hljs-keyword">js</span><br><span class="hljs-keyword"></span>│<br>├─public              <span class="hljs-comment"># 静态资源</span><br>│      favicon.ico<br>│      vercel.svg<br>│<br>└─styles              <span class="hljs-comment"># css样式</span><br>        globals.css   <span class="hljs-comment"># 全局样式</span><br>        Home.module.css<br></code></pre></div></td></tr></table></figure><h4 id="3-3-路由"><a href="#3-3-路由" class="headerlink" title="3.3 路由"></a>3.3 路由</h4><ol><li>文件系统路由</li></ol><ul><li><code>/pages/index.js</code> 路径为 <code>/</code></li><li><code>/pages/posts/about.js</code> 路径为 <code>/posts/about</code></li><li><code>/pages/posts/[id].js</code> 动态路径为 <code>/posts/foo</code> 或者<code>/posts/bar</code> 等等</li></ul><ol start="2"><li>Link 组件</li></ol><blockquote><p>Link 组件会自动执行 prefetch 预加载</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Link</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;next/link&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Home</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/posts/about&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>about page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">// 或者不用a标签，传参示例</span><br>&lt;<span class="hljs-title class_">Link</span><br>  href=&#123;&#123;<br>    <span class="hljs-attr">pathname</span>: <span class="hljs-string">&quot;/about&quot;</span>,<br>    <span class="hljs-attr">query</span>: &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;test&quot;</span> &#125;,<br>  &#125;&#125;<br>  passHref<br>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>about page<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Link</span>&gt;;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>useRouter</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;next/router&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useCallback, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">List</span>() &#123;<br>  <span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>();<br><br>  <span class="hljs-keyword">const</span> gotoDetail = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">fileName</span>: detailid &#125; = data;<br><br>    <span class="hljs-comment">// https://www.nextjs.cn/docs/api-reference/next/router#with-url-object</span><br>    router.<span class="hljs-title function_">push</span>(&#123;<br>      <span class="hljs-attr">pathname</span>: <span class="hljs-string">&quot;/posts/[detailid]&quot;</span>,<br>      <span class="hljs-attr">query</span>: &#123;<br>        detailid,<br>      &#125;,<br>    &#125;);<br>  &#125;, []);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// Prefetch the dashboard page</span><br>    router.<span class="hljs-title function_">prefetch</span>(<span class="hljs-string">&#x27;/dashboard&#x27;</span>);<br>  &#125;, []);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      ...</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>动态路由</li></ol><p>就是<code>/pages/posts/[id].js</code>这样的路由</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; getAllPostIds, getPostData &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/lib/posts&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getStaticPaths</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> allListData = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getAllPostIds</span>();<br>  <span class="hljs-keyword">const</span> paths = allListData.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">params</span>: &#123; <span class="hljs-attr">id</span>: item.<span class="hljs-property">fileName</span> &#125;,<br>    &#125;;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    paths,<br>    <span class="hljs-attr">fallback</span>: <span class="hljs-literal">false</span>,<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getStaticProps</span>(<span class="hljs-params">&#123; params &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> postData = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getPostData</span>(params.<span class="hljs-property">id</span>);<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">props</span>: &#123;<br>      postData,<br>    &#125;,<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params">&#123; postData &#125;</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-4-Head-组件"><a href="#3-4-Head-组件" class="headerlink" title="3.4 Head 组件"></a>3.4 Head 组件</h4><blockquote><p>用于自定义 head 标签内容</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Head</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;next/head&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Layout</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Head</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charSet</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;Next.js&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;Next.js&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Next.js<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Head</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-5-Image-组件"><a href="#3-5-Image-组件" class="headerlink" title="3.5 Image 组件"></a>3.5 Image 组件</h4><blockquote><p>使用适当的属性，可以大幅优化图像，提升页面渲染</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Image</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;next/image&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyImg</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Image</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.homeBgImg&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;bgImg&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;fill&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">objectFit</span>=<span class="hljs-string">&quot;cover&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">objectPosition</span>=<span class="hljs-string">&quot;center&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">quality</span>=<span class="hljs-string">&#123;65&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">priority</span>=<span class="hljs-string">&#123;true&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;blur&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">blurDataURL</span>=<span class="hljs-string">&#123;DEFAULT_BASE64&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;img&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-6-Script-组件"><a href="#3-6-Script-组件" class="headerlink" title="3.6 Script 组件"></a>3.6 Script 组件</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Script</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;next/script&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Home</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Script</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://Jquery.js&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onLoad</span>=<span class="hljs-string">&#123;()</span> =&gt;</span><span class="language-javascript"> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          $.<span class="hljs-title function_">ajax</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// ...</span></span></span><br><span class="language-javascript"><span class="language-xml">          &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;&#125;</span></span><br><span class="language-javascript"><span class="language-xml">      /&gt;</span></span><br><span class="language-javascript"><span class="language-xml">    &lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-7-CSS"><a href="#3-7-CSS" class="headerlink" title="3.7 CSS"></a>3.7 CSS</h4><ol><li>CSS Modules（已内置）</li><li>Sass（已内置）</li><li>styled-jsx（已内置）</li><li><a href="https://github.com/vercel/next.js/tree/canary/examples/with-styled-components">styled-components</a>（需自行配置）</li><li><a href="https://tailwindcss.com/docs/installation/using-postcss">Tailwind CSS</a>（需自行配置）</li></ol><h4 id="3-8-Next-js-的-3-种基本渲染方式"><a href="#3-8-Next-js-的-3-种基本渲染方式" class="headerlink" title="3.8 Next.js 的 3 种基本渲染方式"></a>3.8 Next.js 的 3 种基本渲染方式</h4><ol><li>Client-side Rendering</li></ol><blockquote><p>就是常见的前后端分离</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> useSWR <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;swr&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">fetcher</span> = (<span class="hljs-params">url</span>) =&gt; <span class="hljs-title function_">fetch</span>(url).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> res.<span class="hljs-title function_">json</span>());<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-title function_">useSWR</span>(<span class="hljs-string">&quot;/api/user&quot;</span>, fetcher);<br><br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>failed to load<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  <span class="hljs-keyword">if</span> (!data) <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>loading...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hello &#123;data.name&#125;!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="2"><li>Static Generation (Recommended)</li></ol><blockquote><p>一般以展示一些静态固定数据为主，打包的时候就直接生成，比如博客页面、固定营销页面、帮助文档等</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; getAllPostIds &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/lib/posts&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getStaticProps</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> allListData = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getAllPostIds</span>();<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">props</span>: &#123;<br>      allListData,<br>    &#125;,<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params">&#123; allListData &#125;</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>Server-side Rendering<blockquote><p>以动态数据为主，每次请求的时候都在服务端执行，对服务器压力比较大</p></blockquote></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getServerSideProps</span>(<span class="hljs-params">context</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">props</span>: &#123;<br>      <span class="hljs-attr">list</span>: [...]<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params">&#123; list &#125;</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-部署"><a href="#4-部署" class="headerlink" title="4. 部署"></a>4. 部署</h3><h4 id="4-1-使用-Vercel-快速部署"><a href="#4-1-使用-Vercel-快速部署" class="headerlink" title="4.1 使用 Vercel 快速部署"></a>4.1 使用 Vercel 快速部署</h4><p>使用 github 账户注册登录<a href="https://vercel.com/">Vercel</a>官网，授权访问该仓库，即可快速部署，部署完即可访问。还能看到部署日志。</p><h4 id="4-2-部署到自己的服务器"><a href="#4-2-部署到自己的服务器" class="headerlink" title="4.2 部署到自己的服务器"></a>4.2 部署到自己的服务器</h4><h5 id="4-2-1-在服务器上进行-docker-镜像制作，然后部署"><a href="#4-2-1-在服务器上进行-docker-镜像制作，然后部署" class="headerlink" title="4.2.1 在服务器上进行 docker 镜像制作，然后部署"></a>4.2.1 在服务器上进行 docker 镜像制作，然后部署</h5><blockquote><p>这里服务器以 centos 为例</p></blockquote><h6 id="第-1-步：Dockerfile-文件"><a href="#第-1-步：Dockerfile-文件" class="headerlink" title="第 1 步：Dockerfile 文件"></a>第 1 步：Dockerfile 文件</h6><ol><li>使用 Next.js<a href="https://www.nextjs.cn/docs/deployment#docker-image">官方 Dockerfile</a></li></ol><p><strong>注意</strong>：如果使用官方 Dockerfile，比如在阿里云上进行部署，会遇到网络问题，下载某些包会很慢，跟你本地访问 github 官网一样，所以要设置国内镜像下载，速度就会变快</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile"><span class="hljs-comment"># Install dependencies only when needed</span><br><span class="hljs-keyword">FROM</span> node:alpine AS deps<br><span class="hljs-comment"># Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apk add --no-cache libc6-compat</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> package.json yarn.lock ./</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yarn install --frozen-lockfile</span><br><br><span class="hljs-comment"># Rebuild the source code only when needed</span><br><span class="hljs-keyword">FROM</span> node:alpine AS builder<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=deps /app/node_modules ./node_modules</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yarn build &amp;&amp; yarn install --production --ignore-scripts --prefer-offline</span><br><br><span class="hljs-comment"># Production image, copy all the files and run next</span><br><span class="hljs-keyword">FROM</span> node:alpine AS runner<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><br><span class="hljs-keyword">ENV</span> NODE_ENV production<br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> addgroup -g 1001 -S nodejs</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> adduser -S nextjs -u 1001</span><br><br><span class="hljs-comment"># You only need to copy next.config.js if you are NOT using the default configuration</span><br><span class="hljs-comment"># COPY --from=builder /app/next.config.js ./</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder /app/public ./public</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder --<span class="hljs-built_in">chown</span>=nextjs:nodejs /app/.next ./.next</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder /app/node_modules ./node_modules</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder /app/package.json ./package.json</span><br><br><span class="hljs-keyword">USER</span> nextjs<br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">3000</span><br><br><span class="hljs-keyword">ENV</span> PORT <span class="hljs-number">3000</span><br><br><span class="hljs-comment"># Next.js collects completely anonymous telemetry data about general usage.</span><br><span class="hljs-comment"># Learn more here: https://nextjs.org/telemetry</span><br><span class="hljs-comment"># Uncomment the following line in case you want to disable telemetry.</span><br><span class="hljs-comment"># ENV NEXT_TELEMETRY_DISABLED 1</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;node_modules/.bin/next&quot;</span>, <span class="hljs-string">&quot;start&quot;</span>]</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>使用自己的 Dockerfile</li></ol><blockquote><p>这里可以对 Docker 进行多阶段构建，使打包出来的镜像体积变小</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 构建基础镜像</span><br>FROM alpine:3.15 AS base<br><span class="hljs-comment">#纯净版镜像</span><br><br>ENV NODE_ENV=production \<br>  APP_PATH=/app<br><br>WORKDIR <span class="hljs-variable">$APP_PATH</span><br><br><span class="hljs-comment"># 使用国内镜像，加速下面 apk add下载安装alpine不稳定情况</span><br>RUN sed -i <span class="hljs-string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27;</span> /etc/apk/repositories<br><br><span class="hljs-comment"># 使用apk命令安装 nodejs 和 yarn</span><br>RUN apk add --no-cache --update nodejs=16.13.1-r0 yarn=1.22.17-r0<br><br><span class="hljs-comment"># 2. 基于基础镜像安装项目依赖</span><br>FROM base AS install<br><br>COPY package.json yarn.lock ./<br><br>RUN yarn install<br><br><span class="hljs-comment"># 3. 基于基础镜像进行最终构建</span><br>FROM base<br><br><span class="hljs-comment"># 拷贝 上面生成的 node_modules 文件夹复制到最终的工作目录下</span><br>COPY --from=install <span class="hljs-variable">$APP_PATH</span>/node_modules ./node_modules<br><br><span class="hljs-comment"># 拷贝当前目录下的所有文件(除了.dockerignore里排除的)，都拷贝到工作目录下</span><br>COPY . .<br><br>RUN yarn build<br><br>EXPOSE 3000<br><br>CMD [<span class="hljs-string">&quot;yarn&quot;</span>, <span class="hljs-string">&quot;start&quot;</span>]<br></code></pre></div></td></tr></table></figure><h6 id="第-2-步：-将源代码搞到服务器上"><a href="#第-2-步：-将源代码搞到服务器上" class="headerlink" title="第 2 步： 将源代码搞到服务器上"></a>第 2 步： 将源代码搞到服务器上</h6><ol><li>使用<code>scp</code>命令手动将本地源代码上传至服务器</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">scp -r local_dir root@121.xxx.xxx.xxx:remote_dir<br></code></pre></div></td></tr></table></figure><ol start="2"><li>或者在远程服务器上<code>wget</code>下载 github 源码，然后解压</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget https://github.com/xxx/main.zip -O main.zip &amp;&amp; unzip main.zip -d .<br></code></pre></div></td></tr></table></figure><ol start="3"><li>使用<code>xshell</code>工具上传文件到服务器</li></ol><p>上面 3 种方法都可以把本地文件传到服务器对应目录</p><h6 id="第-3-步：-docker-镜像制作"><a href="#第-3-步：-docker-镜像制作" class="headerlink" title="第 3 步： docker 镜像制作"></a>第 3 步： docker 镜像制作</h6><blockquote><p>前提是安装好了 docker 并启动</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 切换都源码目录执行</span><br>docker image build -t blog-demo .<br></code></pre></div></td></tr></table></figure><p>接着会看到命令行上正在执行镜像制作过程，顺利的话，就成功了</p><p><img src="/assets/img/nextjs-blog/build.jpg" alt="build"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 不出意外，可以看到刚才制作的镜像</span><br>docker image <span class="hljs-built_in">ls</span><br></code></pre></div></td></tr></table></figure><h6 id="第-4-步：-启动容器"><a href="#第-4-步：-启动容器" class="headerlink" title="第 4 步： 启动容器"></a>第 4 步： 启动容器</h6><blockquote><p>前提要在服务器上开好安全组</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> container run -d -p <span class="hljs-number">80</span>:<span class="hljs-number">3000</span> -it blog-demo<br><span class="hljs-comment"># -d： 后台运行容器</span><br><span class="hljs-comment"># -p: 前面80是本机服务器开放端口，后面3000是容器暴露出来的端口</span><br><span class="hljs-comment"># --name：给容器命名</span><br></code></pre></div></td></tr></table></figure><p>不出意外，容器成功运行。可以在浏览器里进行访问了。</p><h5 id="4-2-2-使用github-actions自动部署"><a href="#4-2-2-使用github-actions自动部署" class="headerlink" title="4.2.2 使用github actions自动部署"></a>4.2.2 使用<code>github actions</code>自动部署</h5><blockquote><p>上面手动步骤太麻烦了，需要解放双手</p></blockquote><p>这里也可以选择 dockerhub，注册好后，创建仓库，即可推送。阿里云的镜像容器服务，也需要提前开通准备好（命名空间+私人仓库）。</p><h6 id="第-1-步：提前准备好"><a href="#第-1-步：提前准备好" class="headerlink" title="第 1 步：提前准备好"></a>第 1 步：提前准备好</h6><ul><li>容器登录账号+密码</li><li>服务器的 HOST + 登录账户 + 密码</li><li>阿里云或者 dockerhub 的镜像容器仓库</li></ul><h6 id="第-2-步：github-该仓库-Settings-gt-Secrets-添加秘钥，即上面准备好的这-5-个"><a href="#第-2-步：github-该仓库-Settings-gt-Secrets-添加秘钥，即上面准备好的这-5-个" class="headerlink" title="第 2 步：github 该仓库 Settings-&gt;Secrets 添加秘钥，即上面准备好的这 5 个"></a>第 2 步：github 该仓库 Settings-&gt;Secrets 添加秘钥，即上面准备好的这 5 个</h6><blockquote><p>我这里买的是阿里云的屌丝 1 核 2G 机器，生产环境别这么玩，账号密码可能泄露</p></blockquote><p><img src="/assets/img/nextjs-blog/secrets.jpg" alt="secrets"></p><h6 id="第-3-步：项目根目录添加github-yml配置文件"><a href="#第-3-步：项目根目录添加github-yml配置文件" class="headerlink" title="第 3 步：项目根目录添加github yml配置文件"></a>第 3 步：项目根目录添加<code>github yml</code>配置文件</h6><blockquote><p>.github&#x2F;workflows&#x2F;deploy.yml</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">name: Docker Image CI<br><br>on:<br>  push: <span class="hljs-comment"># push 时触发ci</span><br>    branches: [main] <span class="hljs-comment"># 作用于main分支</span><br>  <span class="hljs-comment"># pull_request:</span><br>  <span class="hljs-comment">#   branches: [main]</span><br><br><span class="hljs-built_in">jobs</span>:<br>  build:<br>    runs-on: ubuntu-latest<br><br>    steps:<br>      <span class="hljs-comment"># 拉取main分支代码</span><br>      - name: Checkout<br>        uses: actions/checkout@v2<br><br>      <span class="hljs-comment"># 制作docker镜像并推送到阿里云容器镜像服务</span><br>      - name: build and push docker image<br>        run: |<br>          <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;&#123; secrets.ALIYUN_DOCKER_PASSWORD &#125;</span>&#125; | docker login registry.cn-hangzhou.aliyuncs.com --username <span class="hljs-variable">$&#123;&#123; secrets.ALIYUN_DOCKER_USERNAME &#125;</span>&#125; --password-stdin<br><br>          docker image build -t myblog:latest .<br>          docker tag myblog registry.cn-hangzhou.aliyuncs.com/test-blog/myblog:latest<br>          docker push registry.cn-hangzhou.aliyuncs.com/test-blog/myblog:latest<br>          docker <span class="hljs-built_in">logout</span><br>      <span class="hljs-comment"># 登录远程服务器，拉取镜像，制作并重启容器</span><br>      <span class="hljs-comment"># https://github.com/marketplace/actions/remote-ssh-commands</span><br>      - name: ssh remote deploy<br>        uses: fifsky/ssh-action@master<br>        with:<br>          <span class="hljs-built_in">command</span>: |<br>            <span class="hljs-built_in">cd</span> /<br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;1.docker login start==&gt;&quot;</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;&#123; secrets.ALIYUN_DOCKER_PASSWORD &#125;</span>&#125; | docker login registry.cn-hangzhou.aliyuncs.com --username <span class="hljs-variable">$&#123;&#123; secrets.ALIYUN_DOCKER_USERNAME &#125;</span>&#125; --password-stdin<br><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;2.docker stop myblog container==&gt;&quot;</span><br>            docker container stop myblog<br><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;3.docker conatainer rm==&gt;&quot;</span><br>            docker container <span class="hljs-built_in">rm</span> myblog<br><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;4.docker image rm==&gt;&quot;</span><br>            docker image <span class="hljs-built_in">rm</span> registry.cn-hangzhou.aliyuncs.com/test-blog/myblog:latest<br><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;5.docker pull==&gt;&quot;</span><br>            docker pull registry.cn-hangzhou.aliyuncs.com/test-blog/myblog:latest<br><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;6.docker container create and start==&gt;&quot;</span><br>            docker container run -d -p 80:3000 --name myblog registry.cn-hangzhou.aliyuncs.com/test-blog/myblog:latest<br><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;7.docker logout==&gt;&quot;</span><br>            docker <span class="hljs-built_in">logout</span><br>          host: <span class="hljs-variable">$&#123;&#123; secrets.HOST &#125;</span>&#125;<br>          user: <span class="hljs-variable">$&#123;&#123; secrets.USER &#125;</span>&#125;<br>          pass: <span class="hljs-variable">$&#123;&#123; secrets.PASSWORD &#125;</span>&#125;<br><br></code></pre></div></td></tr></table></figure><h6 id="第-4-步：提交代码，自动部署"><a href="#第-4-步：提交代码，自动部署" class="headerlink" title="第 4 步：提交代码，自动部署"></a>第 4 步：提交代码，自动部署</h6><blockquote><p>不出意外，在仓库的 Actions 里看到一切 ok</p></blockquote><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> .<br><span class="hljs-symbol">git</span> commit -m <span class="hljs-string">&quot;chore: add github actions yml&quot;</span><br><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> -u origin main<br></code></pre></div></td></tr></table></figure><p><img src="/assets/img/nextjs-blog/deploy.jpg" alt="deploy"></p><p><a href="https://nextjs-blog-nine-delta-65.vercel.app/">当前博客点击预览</a></p><p><img src="/assets/img/nextjs-blog/666.png" alt="666"></p><h3 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h3><ol><li><p><a href="https://nextjs.org/docs/getting-started">Next.js 官方文档</a></p></li><li><p><a href="https://juejin.cn/post/6991689670027542564">如何优化 node 项目的 docker 镜像</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">Docker 入门教程</a></p></li><li><p><a href="https://www.zhihu.com/question/379598562">前后端同构和模板渲染的区别是什么呢？</a></p></li><li><p><a href="https://juejin.cn/post/6950799922178310152">手把手教你用 Github Actions 部署前端项目</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>nextjs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>next.js</tag>
      
      <tag>github actions</tag>
      
      <tag>CI</tag>
      
      <tag>CD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微前端qiankun上手体验</title>
    <link href="/2021/02/25/qiankun/"/>
    <url>/2021/02/25/qiankun/</url>
    
    <content type="html"><![CDATA[<blockquote><ol><li><a href="https://qiankun.umijs.org/zh">qiankun 官方文档</a></li><li><a href="https://zh-hans.single-spa.js.org/docs/getting-started-overview/">single-spa</a></li><li><a href="https://juejin.cn/post/6844904162509979662#heading-0">微前端-最容易看懂的微前端知识</a></li></ol></blockquote><p>微前端的类型：</p><ol><li>受路由控制渲染的子应用</li><li>不受路由控制的组件</li><li>非渲染组件，应用间通信逻辑</li></ol><h3 id="1-子应用-vue"><a href="#1-子应用-vue" class="headerlink" title="1.子应用-vue"></a>1.子应用-vue</h3><h4 id="1-vue-cli-创建子应用"><a href="#1-vue-cli-创建子应用" class="headerlink" title="1. vue-cli 创建子应用"></a>1. vue-cli 创建子应用</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vue create qiankun_vue<br></code></pre></div></td></tr></table></figure><h4 id="2-修改入口main-js文件"><a href="#2-修改入口main-js文件" class="headerlink" title="2. 修改入口main.js文件"></a>2. 修改入口<code>main.js</code>文件</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// https://qiankun.umijs.org/zh/guide/tutorial#vue-微应用</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<br><br><span class="hljs-comment">// Vue.config.productionTip = false</span><br><br><span class="hljs-keyword">let</span> vueInstance = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">props = &#123;&#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; container &#125; = props;<br><br>  vueInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    router,<br>    <span class="hljs-attr">render</span>: <span class="hljs-function">(<span class="hljs-params">h</span>) =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>    <span class="hljs-comment">// 这里是挂载到自己的html上，基座会拿到这个挂载后的html，将其插入到相应的容器里</span><br><br>    <span class="hljs-comment">// Application died in status NOT_MOUNTED: Target container with #container not existed after xxx mounted!</span><br>    <span class="hljs-comment">// 微应用的根 id 与其他 DOM 冲突。解决办法是：修改根 id 的查找范围。</span><br>  &#125;).$mount(container ? container.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#app&quot;</span>) : <span class="hljs-string">&quot;#app&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 使用 webpack 运行时 publicPath 配置</span><br><span class="hljs-comment">// 动态设置publicPath</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">__POWERED_BY_QIANKUN__</span>) &#123;<br>  __webpack_public_path__ = <span class="hljs-variable language_">window</span>.<span class="hljs-property">__INJECTED_PUBLIC_PATH_BY_QIANKUN__</span>;<br>&#125;<br><br><span class="hljs-comment">// https://qiankun.umijs.org/zh/faq#如何独立运行微应用？</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">window</span>.<span class="hljs-property">__POWERED_BY_QIANKUN__</span>) &#123;<br>  <span class="hljs-title function_">render</span>();<br>&#125;<br><br><span class="hljs-comment">// 暴露3个异步方法 bootstrap mount unmount</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params">props</span>) &#123;&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">mount</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;props=====&gt;&quot;</span>, props);<br>  <span class="hljs-title function_">render</span>(props);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">unmount</span>(<span class="hljs-params">props</span>) &#123;<br>  vueInstance &amp;&amp; vueInstance.$destroy();<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-修改路由router-index-js文件"><a href="#3-修改路由router-index-js文件" class="headerlink" title="3. 修改路由router/index.js文件"></a>3. 修改路由<code>router/index.js</code>文件</h4><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff">  const router = new VueRouter(&#123;<br>    mode: &#x27;history&#x27;,<br><span class="hljs-deletion">-    base: process.env.BASE_URL,</span><br><span class="hljs-addition">+    base: window.__POWERED_BY_QIANKUN__ ? &#x27;/vue&#x27; : process.env.BASE_URL,</span><br>    routes<br>  &#125;)<br><br></code></pre></div></td></tr></table></figure><h4 id="4-根目录新建vue-config-js，修改打包配置"><a href="#4-根目录新建vue-config-js，修改打包配置" class="headerlink" title="4. 根目录新建vue.config.js，修改打包配置"></a>4. 根目录新建<code>vue.config.js</code>，修改打包配置</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">8000</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>: <span class="hljs-string">&quot;*&quot;</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-comment">// https://webpack.docschina.org/configuration/output/#outputlibrary</span><br>  <span class="hljs-attr">configureWebpack</span>: &#123;<br>    <span class="hljs-attr">output</span>: &#123;<br>      <span class="hljs-attr">library</span>: <span class="hljs-string">&quot;vueApp&quot;</span>, <span class="hljs-comment">// 打包成一个类库</span><br>      <span class="hljs-attr">libraryTarget</span>: <span class="hljs-string">&quot;umd&quot;</span>, <span class="hljs-comment">// umd最终会把bootstrap/mount/unmount挂载到window上</span><br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="2-子应用-react"><a href="#2-子应用-react" class="headerlink" title="2.子应用-react"></a>2.子应用-react</h3><h4 id="1-create-react-app-创建子应用"><a href="#1-create-react-app-创建子应用" class="headerlink" title="1. create-react-app 创建子应用"></a>1. create-react-app 创建子应用</h4><figure class="highlight dsconfig"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dsconfig"><span class="hljs-built_in">create-react-app</span> <span class="hljs-string">qiankun_react</span><br></code></pre></div></td></tr></table></figure><h4 id="2-修改入口index-js文件"><a href="#2-修改入口index-js文件" class="headerlink" title="2. 修改入口index.js文件"></a>2. 修改入口<code>index.js</code>文件</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BrowserRouter</span>, <span class="hljs-title class_">Link</span>, <span class="hljs-title class_">Route</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./index.css&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App&quot;</span>;<br><span class="hljs-comment">// import reportWebVitals from &#x27;./reportWebVitals&#x27;;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; container &#125; = props;<br>  <span class="hljs-comment">// https://reactrouter.com/web/api/BrowserRouter</span><br>  <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span> <span class="hljs-attr">basename</span>=<span class="hljs-string">&quot;/react&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>react-home<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span> |<span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>react-about<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">        &#123;/* exact 严格模式 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">exact</span> <span class="hljs-attr">render</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span>&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">exact</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">render</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>react about page<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#125;</span><br><span class="language-xml">        &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span>,<br>    container<br>      ? container.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#root&quot;</span>)<br>      : <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#root&quot;</span>)<br>  );<br>&#125;<br><br><span class="hljs-comment">// 独立运行</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">window</span>.<span class="hljs-property">__POWERED_BY_QIANKUN__</span>) &#123;<br>  <span class="hljs-title function_">render</span>();<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params">props</span>) &#123;&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">mount</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-title function_">render</span>(props);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">unmount</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; container &#125; = props;<br>  <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">unmountComponentAtNode</span>(<br>    container<br>      ? container.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#root&quot;</span>)<br>      : <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#root&quot;</span>)<br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-修改打包配置文件"><a href="#3-修改打包配置文件" class="headerlink" title="3. 修改打包配置文件"></a>3. 修改打包配置文件</h4><h5 id="1-安装react-app-rewired"><a href="#1-安装react-app-rewired" class="headerlink" title="1. 安装react-app-rewired"></a>1. 安装<code>react-app-rewired</code></h5><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yarn add react-app-rewired -D<br></code></pre></div></td></tr></table></figure><h5 id="2-子应用根目录新建config-overrides-js文件"><a href="#2-子应用根目录新建config-overrides-js文件" class="headerlink" title="2. 子应用根目录新建config-overrides.js文件"></a>2. 子应用根目录新建<code>config-overrides.js</code>文件</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// https://github.com/timarney/react-app-rewired/blob/HEAD/README_zh.md#扩展配置选项</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">webpack</span>: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    config.<span class="hljs-property">output</span>.<span class="hljs-property">library</span> = <span class="hljs-string">&quot;reactApp&quot;</span>;<br>    config.<span class="hljs-property">output</span>.<span class="hljs-property">libraryTarget</span> = <span class="hljs-string">&quot;umd&quot;</span>;<br>    config.<span class="hljs-property">output</span>.<span class="hljs-property">publicPath</span> = <span class="hljs-string">&quot;http://localhost:9000/&quot;</span>;<br>    <span class="hljs-keyword">return</span> config;<br>  &#125;,<br>  <span class="hljs-attr">devServer</span>: <span class="hljs-function">(<span class="hljs-params">configFunc</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">proxy, allowedHost</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> config = <span class="hljs-title function_">configFunc</span>(proxy, allowedHost);<br>      <span class="hljs-comment">// 设置开发服务允许跨域</span><br>      config.<span class="hljs-property">headers</span> = &#123;<br>        <span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>: <span class="hljs-string">&quot;*&quot;</span>,<br>      &#125;;<br><br>      <span class="hljs-keyword">return</span> config;<br>    &#125;;<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><h5 id="3-设置环境变量"><a href="#3-设置环境变量" class="headerlink" title="3. 设置环境变量"></a>3. 设置环境变量</h5><ol><li>子应用根目录新建<code>.env</code>文件</li></ol><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">PORT</span>=<span class="hljs-number">4000</span><br><span class="hljs-attr">WDS_SOCKET_PORT</span>=<span class="hljs-number">4000</span><br></code></pre></div></td></tr></table></figure><p>或者在<code>package.json</code>启动脚本中修改端口</p><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"> &quot;scripts&quot;: &#123;<br><span class="hljs-deletion">-     &quot;start&quot;: &quot;react-app-rewired start&quot;,</span><br><span class="hljs-addition">+     &quot;start&quot;: &quot;set PORT=4000 &amp;&amp; react-app-rewired start&quot;,</span><br>   &#125;,<br></code></pre></div></td></tr></table></figure><ol start="2"><li>修改<code>package.json</code>文件</li></ol><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"> &quot;scripts&quot;: &#123;<br><span class="hljs-deletion">-     &quot;start&quot;: &quot;react-scripts start&quot;,</span><br><span class="hljs-deletion">-     &quot;build&quot;: &quot;react-scripts build&quot;,</span><br><span class="hljs-deletion">-     &quot;test&quot;: &quot;react-scripts test&quot;,</span><br><span class="hljs-deletion">-     &quot;eject&quot;: &quot;react-scripts eject&quot;</span><br><span class="hljs-addition">+     &quot;start&quot;: &quot;react-app-rewired start&quot;,</span><br><span class="hljs-addition">+     &quot;build&quot;: &quot;react-app-rewired build&quot;,</span><br><span class="hljs-addition">+     &quot;test&quot;: &quot;react-app-rewired test&quot;,</span><br><span class="hljs-addition">+     &quot;eject&quot;: &quot;react-app-rewired eject&quot;</span><br>   &#125;,<br></code></pre></div></td></tr></table></figure><h3 id="3-子应用-非-webpack-构建-jquery-bootstrap"><a href="#3-子应用-非-webpack-构建-jquery-bootstrap" class="headerlink" title="3.子应用(非 webpack 构建)-jquery+bootstrap"></a>3.子应用(非 webpack 构建)-jquery+bootstrap</h3><h4 id="1-新建index-html文件"><a href="#1-新建index-html文件" class="headerlink" title="1. 新建index.html文件"></a>1. 新建<code>index.html</code>文件</h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap 101 Template<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;//localhost:5000/lib/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>你好，世界！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-addon&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;basic-addon1&quot;</span>&gt;</span>@<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Username&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">&quot;basic-addon1&quot;</span></span><br><span class="hljs-tag">          /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//localhost:5000/lib/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//localhost:5000/lib/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  entry js为入口文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//localhost:5000/entry.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="2-新建entry-js入口文件"><a href="#2-新建entry-js入口文件" class="headerlink" title="2. 新建entry.js入口文件"></a>2. 新建<code>entry.js</code>入口文件</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">render</span> = (<span class="hljs-params">$</span>) =&gt; &#123;<br>  $(<span class="hljs-string">&quot;#purehtml-container&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;Hello, render with jQuery&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>();<br>&#125;;<br>(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-variable language_">global</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">global</span>[<span class="hljs-string">&quot;purehtml&quot;</span>] = &#123;<br>    <span class="hljs-attr">bootstrap</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;purehtml bootstrap&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>();<br>    &#125;,<br>    <span class="hljs-attr">mount</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;purehtml mount&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">render</span>($);<br>    &#125;,<br>    <span class="hljs-attr">unmount</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;purehtml unmount&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>();<br>    &#125;,<br>  &#125;;<br>&#125;)(<span class="hljs-variable language_">window</span>);<br></code></pre></div></td></tr></table></figure><h3 id="4-基座应用-vue"><a href="#4-基座应用-vue" class="headerlink" title="4.基座应用-vue"></a>4.基座应用-vue</h3><h4 id="1-修改入口main-js文件"><a href="#1-修改入口main-js文件" class="headerlink" title="1.修改入口main.js文件"></a>1.修改入口<code>main.js</code>文件</h4><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff">import Vue from &#x27;vue&#x27;<br>import App from &#x27;./App.vue&#x27;<br>import router from &#x27;./router&#x27;<br><span class="hljs-addition">+ import &#123; registerMicroApps, start &#125; from &#x27;qiankun&#x27;;</span><br><span class="hljs-addition">+ import ElementUI from &#x27;element-ui&#x27;;</span><br><span class="hljs-addition">+ import &#x27;element-ui/lib/theme-chalk/index.css&#x27;;</span><br><br>Vue.config.productionTip = false<br><br><span class="hljs-addition">+ Vue.use(ElementUI);</span><br><br><span class="hljs-addition">+ const apps = [</span><br><span class="hljs-addition">+   &#123;</span><br><span class="hljs-addition">+     name: &quot;vueApp&quot;,</span><br><span class="hljs-addition">+     // 默认通过fetch加载这个html，解析里面的js，动态的执行</span><br><span class="hljs-addition">+     // 注意：子应用必须支持跨域</span><br><span class="hljs-addition">+     entry: &quot;http://localhost:8000&quot;,</span><br><span class="hljs-addition">+     container: &quot;#vueDOM&quot;, // 容器名</span><br><span class="hljs-addition">+     activeRule: &quot;/vue&quot;, // 激活路径</span><br><span class="hljs-addition">+     props: &#123; a: 1, b: 2 &#125;, // 传给子应用的参数</span><br><span class="hljs-addition">+   &#125;,</span><br><span class="hljs-addition">+   &#123;</span><br><span class="hljs-addition">+     name: &quot;reactApp&quot;,</span><br><span class="hljs-addition">+     entry: &quot;//localhost:9000&quot;,</span><br><span class="hljs-addition">+     container: &quot;#react&quot;,</span><br><span class="hljs-addition">+     activeRule: &quot;/react&quot;,</span><br><span class="hljs-addition">+   &#125;,</span><br><span class="hljs-addition">+   &#123;</span><br><span class="hljs-addition">+     name: &quot;jqueryApp&quot;,</span><br><span class="hljs-addition">+     entry: &quot;//localhost:5000&quot;,</span><br><span class="hljs-addition">+     container: &quot;#jquery&quot;,</span><br><span class="hljs-addition">+     activeRule: &quot;/jquery&quot;,</span><br><span class="hljs-addition">+     props: &#123; a: 100, b: 200 &#125;,</span><br><span class="hljs-addition">+   &#125;,</span><br><span class="hljs-addition">+ ];</span><br><span class="hljs-addition">+</span><br><span class="hljs-addition">+ registerMicroApps(apps); // 注册应用</span><br><span class="hljs-addition">+ // 启动应用</span><br><span class="hljs-addition">+ start(&#123;</span><br><span class="hljs-addition">+   // https://qiankun.umijs.org/zh/api#startopts</span><br><span class="hljs-addition">+   prefetch: false, // 取消预加载</span><br><span class="hljs-addition">+ &#125;);</span><br><br>new Vue(&#123;<br>  router,<br>  render: h =&gt; h(App)<br>&#125;).$mount(&#x27;#app&#x27;)<br></code></pre></div></td></tr></table></figure><h4 id="2-修改App-vue组件"><a href="#2-修改App-vue组件" class="headerlink" title="2. 修改App.vue组件"></a>2. 修改<code>App.vue</code>组件</h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span> <span class="hljs-attr">:router</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 基座自己的路由 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>base-home<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>base-about<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 引用其他子应用 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;/vue&quot;</span>&gt;</span>vue 应用<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;/react&quot;</span>&gt;</span>react 应用<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;/jquery&quot;</span>&gt;</span>jquery + bootstrap 应用<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vueDOM&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;react&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jquery&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>qiankun</tag>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redux toolkit 的使用</title>
    <link href="/2020/10/09/redux-toolkit/"/>
    <url>/2020/10/09/redux-toolkit/</url>
    
    <content type="html"><![CDATA[<blockquote><ol><li><a href="https://redux-toolkit.js.org/">Redux Toolkit 官网</a></li><li><a href="https://www.51hint.com/posts/redux_toolkit/">Redux_toolkit 使用</a></li></ol></blockquote><h3 id="为什么要使用-redux-toolkit"><a href="#为什么要使用-redux-toolkit" class="headerlink" title="为什么要使用 redux toolkit"></a>为什么要使用 redux toolkit</h3><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-comment">// 优化前</span><br>index<span class="hljs-selector-class">.js</span><br>state<span class="hljs-selector-class">.js</span><br>actionTypes<span class="hljs-selector-class">.js</span><br>actions<span class="hljs-selector-class">.js</span><br>reducer<span class="hljs-selector-class">.js</span><br><br><span class="hljs-comment">// 优化后</span><br>index<span class="hljs-selector-class">.js</span><br>slice.js<br></code></pre></div></td></tr></table></figure><p>之前使用<em>redux</em>,需要安装<em>redux-thunk,immer</em>等其它依赖库，使用 store 的同事需要重复写许多样板代码，现在把 action 和 reducer 都写在了一起，简化了许多样板代码，代码变得更加精简。</p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight gherkin"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gherkin">├── LICENSE<br>├── package.json<br>├── public<br>|<span class="hljs-string">  ├── favicon.ico</span><br><span class="hljs-string"></span>|<span class="hljs-string">  ├── index.html</span><br><span class="hljs-string">├── README.md</span><br><span class="hljs-string">├── src</span><br><span class="hljs-string"></span>|<span class="hljs-string">  ├── App.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">  ├── components</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  ├── ComA</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  ├── index.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  └── store</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">     ├── comASlice.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">     └── state.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  ├── ComB</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  ├── index.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  └── store</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">     ├── comBSlice.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">     └── state.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  └── Header</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">     └── index.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">  ├── index.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">  └── store</span><br><span class="hljs-string"></span>|<span class="hljs-string">     ├── index.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">     └── reducer.js</span><br><span class="hljs-string">└── yarn.lock</span><br></code></pre></div></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yarn add react-redux @reduxjs/toolkit<br></code></pre></div></td></tr></table></figure><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><ol><li>index.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Provider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App&quot;</span>;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>)<br>);<br></code></pre></div></td></tr></table></figure><ol start="2"><li>src&#x2F;store&#x2F;reducer.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; combineReducers &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><span class="hljs-keyword">import</span> comASlice <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../components/ComA/store/comASlice&quot;</span>;<br><span class="hljs-keyword">import</span> comBSlice <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../components/ComB/store/comBSlice&quot;</span>;<br><br><span class="hljs-keyword">const</span> rootReducer = <span class="hljs-title function_">combineReducers</span>(&#123;<br>  <span class="hljs-attr">comAReducer</span>: comASlice.<span class="hljs-property">reducer</span>,<br>  <span class="hljs-attr">comBReducer</span>: comBSlice.<span class="hljs-property">reducer</span>,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> rootReducer;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>src&#x2F;store&#x2F;index.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; configureStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><span class="hljs-keyword">import</span> rootReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./reducer&quot;</span>;<br><br><span class="hljs-comment">// 这里使用configureStore代替之前的createStore</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">configureStore</span>(&#123;<br>  <span class="hljs-attr">reducer</span>: rootReducer,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>src&#x2F;components&#x2F;ComB&#x2F;index.js</li></ol><p><strong>hooks 下使用 useSelector 和 useDispatch 代替之前 connect 的 mapStateToProps 和 mapDispatchToPrpops</strong>，之前通过 props 获取 state 和 dispatch，现在直接通过 hooks 的方式获取，代码变得更加的简洁</p><blockquote><p><a href="https://blog.csdn.net/vitaviva/article/details/104508139">redux 中使用 useSelector、useDispatch 替代 connect</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">// import &#123; connect &#125; from &#x27;react-redux&#x27;;</span><br><span class="hljs-keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-keyword">import</span> comBSlice <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store/comBSlice&quot;</span>;<br><br><span class="hljs-keyword">const</span> &#123;<br>  <span class="hljs-attr">actions</span>: &#123; increment, decrement &#125;,<br>&#125; = comBSlice;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">ComA</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-comment">// const &#123; num &#125; = props;</span><br>  <span class="hljs-comment">// const &#123; handleIncrement, handleDecrement &#125; = props;</span><br><br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>();<br>  <span class="hljs-keyword">const</span> num = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.<span class="hljs-property">comBReducer</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleIncrement</span> = (<span class="hljs-params">num</span>) =&gt; <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">increment</span>(num));<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleDecrement</span> = (<span class="hljs-params">num</span>) =&gt; <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">decrement</span>(num));<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>ComA<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        num: <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>&#123;num&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> handleIncrement(1)&#125;&gt;increase +1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> handleDecrement(1)&#125;&gt;decrease -1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-comment">// const mapStateToProps = state =&gt; (&#123;</span><br><span class="hljs-comment">//   num: state.comBReducer</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">// const mapDispatchToProps = dispatch =&gt; (&#123;</span><br><span class="hljs-comment">//   handleIncrement(num) &#123;</span><br><span class="hljs-comment">//     dispatch(increment(num));</span><br><span class="hljs-comment">//   &#125;,</span><br><span class="hljs-comment">//   handleDecrement(num) &#123;</span><br><span class="hljs-comment">//     dispatch(decrement(num));</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;)</span><br><br><span class="hljs-comment">// export default connect(mapStateToProps, mapDispatchToProps)(memo(ComA));</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">memo</span>(<span class="hljs-title class_">ComA</span>);<br></code></pre></div></td></tr></table></figure><ol start="5"><li>src&#x2F;components&#x2F;ComB&#x2F;store&#x2F;comBSlice.js</li></ol><blockquote><p>通过 createSlice 将 action 和 reducer 建立在一起，代码更加简洁</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createSlice &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; num &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./state&quot;</span>;<br><br><span class="hljs-keyword">const</span> comBSlice = <span class="hljs-title function_">createSlice</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;comB&quot;</span>,<br>  <span class="hljs-attr">initialState</span>: num,<br>  <span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-attr">increment</span>: <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> state + action.<span class="hljs-property">payload</span>,<br>    <span class="hljs-attr">decrement</span>: <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> state - action.<span class="hljs-property">payload</span>,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> comBSlice;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
      <tag>redux</tag>
      
      <tag>redux-toolkit</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
