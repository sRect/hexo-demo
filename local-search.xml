<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/09/27/hello-world/"/>
    <url>/2023/09/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>React Native Android端 Deep Link</title>
    <link href="/2023/09/06/react-native-deep-link/"/>
    <url>/2023/09/06/react-native-deep-link/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/sRect/reactNativeBlogApp">本文 github 仓库链接</a></p><p>本文测试主要版本信息</p><table><thead><tr><th>package</th><th align="center">version</th></tr></thead><tbody><tr><td>react</td><td align="center">18.2.0</td></tr><tr><td>react-native</td><td align="center">0.71.2</td></tr><tr><td>android</td><td align="center">13</td></tr><tr><td>手机</td><td align="center">小米10</td></tr></tbody></table><h2 id="1-Deep-Link的日常使用场景"><a href="#1-Deep-Link的日常使用场景" class="headerlink" title="1. Deep Link的日常使用场景"></a>1. <code>Deep Link</code>的日常使用场景</h2><ol><li><p>从并夕夕app分享到微信，邀请好友砍一刀，其中有的链接打开后是h5页面，h5页面打开后，弹出提示，“立即打开xx应用”，或者打开后，要求右上角在本机浏览器中打开，然后浏览器里弹出提示，“当前网站请求打开xx应用”。</p></li><li><p>从app中，或者短信中打开微信小程序，链接如<code>weixin://dl/business/?t= *TICKET*</code>。</p></li></ol><h2 id="2-什么是Deep-Link"><a href="#2-什么是Deep-Link" class="headerlink" title="2. 什么是Deep Link?"></a>2. 什么是<code>Deep Link</code>?</h2><p><a href="https://www.reactnative.cn/docs/security#authentication-and-deep-linking">文档</a>中提到：</p><blockquote><p>Mobile apps have a unique vulnerability that is non-existent in the web: deep linking. Deep linking is a way of sending data directly to a native application from an outside source. A deep link looks like app:&#x2F;&#x2F; where app is your app scheme and anything following the &#x2F;&#x2F; could be used internally to handle the request.</p></blockquote><blockquote><p>Deep links are not secure and you should never send any sensitive information in them.</p></blockquote><p>总结：</p><ol><li><p><code>Deep Link</code>是手机端app中独有的；</p></li><li><p><code>Deep Link</code>是一种通过外面链接把数据发送到app里的方法；</p></li><li><p><code>Deep Link</code>长得像<code>app://</code>，其中“<em>app</em>”是你自定义的scheme，“*&#x2F;&#x2F;*”后面跟的内容，用来给app处理的；</p></li><li><p><code>Deep Link</code>是不安全的，不要通过这种方式发送敏感数据。</p></li></ol><h2 id="3-开启Deep-Link"><a href="#3-开启Deep-Link" class="headerlink" title="3. 开启Deep Link"></a>3. 开启Deep Link</h2><blockquote><p>下面xml中有注释掉的配置，是因为准备配置app link，验证app link，通过后才允许拉起app，配置好后，但验证失败了，下面会讲</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- android/app/src/main/AndroidManifest.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">queries</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;intent&gt;</span><br><span class="hljs-comment">        &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;</span><br><span class="hljs-comment">        &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</span><br><span class="hljs-comment">        &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;</span><br><span class="hljs-comment">        &lt;data android:scheme=&quot;https&quot; </span><br><span class="hljs-comment">          android:host=&quot;my.applink.com&quot;</span><br><span class="hljs-comment">          android:pathPrefix=&quot;/detail&quot; /&gt;</span><br><span class="hljs-comment">    &lt;/intent&gt; --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.VIEW&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:scheme</span>=<span class="hljs-string">&quot;yourScheme&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">queries</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>或者</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- android/app/src/main/AndroidManifest.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span> <span class="hljs-attr">android:launchMode</span>=<span class="hljs-string">&quot;singleTask&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.VIEW&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:scheme</span>=<span class="hljs-string">&quot;yourScheme&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><br>     <span class="hljs-comment">&lt;!-- 注意：“/”在pathPrefix中是必须的 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;intent-filter android:autoVerify=&quot;true&quot;&gt;</span><br><span class="hljs-comment">      &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;</span><br><span class="hljs-comment">      &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</span><br><span class="hljs-comment">      &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;</span><br><span class="hljs-comment">      &lt;data android:scheme=&quot;https&quot; </span><br><span class="hljs-comment">        android:host=&quot;my.applink.com&quot;</span><br><span class="hljs-comment">        android:pathPrefix=&quot;/detail&quot; /&gt;</span><br><span class="hljs-comment">    &lt;/intent-filter&gt; --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="4-处理Deep-Link"><a href="#4-处理Deep-Link" class="headerlink" title="4. 处理Deep Link"></a>4. 处理Deep Link</h2><h3 id="4-1-监听其它app通过deep-Link拉起本app"><a href="#4-1-监听其它app通过deep-Link拉起本app" class="headerlink" title="4.1 监听其它app通过deep Link拉起本app"></a>4.1 监听其它app通过deep Link拉起本app</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123;<span class="hljs-title class_">Fragment</span>, useEffect, memo&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Linking</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-native&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;useNavigate&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-native&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">DeepLinksListener</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">cb</span> = data =&gt; &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Linking data==&gt;&#x27;</span>, data);<br><br>      <span class="hljs-keyword">const</span> url = data.<span class="hljs-property">url</span>;<br>      <span class="hljs-keyword">const</span> schemas = [<br>        <span class="hljs-string">&#x27;yourScheme://&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://my.applink.com/&#x27;</span>,<br>      ];<br><br>      <span class="hljs-keyword">if</span> (schemas.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">s</span> =&gt;</span> url.<span class="hljs-title function_">startsWith</span>(s))) &#123;<br>        <span class="hljs-keyword">let</span> newUrl = url<br>          .<span class="hljs-title function_">replace</span>(schemas[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;&#x27;</span>)<br>          .<span class="hljs-title function_">replace</span>(schemas[<span class="hljs-number">2</span>], <span class="hljs-string">&#x27;&#x27;</span>);<br>        navigate &amp;&amp; <span class="hljs-title function_">navigate</span>(<span class="hljs-string">`/<span class="hljs-subst">$&#123;newUrl&#125;</span>`</span>);<br>      &#125;<br>    &#125;;<br>    <span class="hljs-title class_">Linking</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;url&#x27;</span>, cb);<br><br>    <span class="hljs-comment">// return () =&gt; &#123;</span><br>    <span class="hljs-comment">//   Linking.removeEventListener(&#x27;url&#x27;, cb);</span><br>    <span class="hljs-comment">// &#125;;</span><br>  &#125;, [navigate]);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Fragment</span> /&gt;</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">memo</span>(<span class="hljs-title class_">DeepLinksListener</span>);<br></code></pre></div></td></tr></table></figure><h3 id="4-2-通过Deep-link打开其它app"><a href="#4-2-通过Deep-link打开其它app" class="headerlink" title="4.2 通过Deep link打开其它app"></a>4.2 通过Deep link打开其它app</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Linking</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-native&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleOpenUrl</span> = <span class="hljs-keyword">async</span> linkUrl =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> supported = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Linking</span>.<span class="hljs-title function_">canOpenURL</span>(linkUrl);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;supported&#x27;</span>, supported);<br>    <span class="hljs-keyword">if</span> (supported) &#123;<br>      <span class="hljs-comment">// Opening the link with some app, if the URL scheme is &quot;http&quot; the web link should be opened</span><br>      <span class="hljs-comment">// by some browser in the mobile</span><br>      <span class="hljs-keyword">await</span> <span class="hljs-title class_">Linking</span>.<span class="hljs-title function_">openURL</span>(linkUrl);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title class_">Alert</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;提示&#x27;</span>, <span class="hljs-string">`无法打开<span class="hljs-subst">$&#123;linkUrl&#125;</span>`</span>, [&#123;<span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;确定&#x27;</span>&#125;]);<br>    &#125;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>    <span class="hljs-title class_">Alert</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;提示&#x27;</span>, <span class="hljs-string">`无法打开<span class="hljs-subst">$&#123;linkUrl&#125;</span>,<span class="hljs-subst">$&#123;error.message&#125;</span>`</span>, [<br>      &#123;<span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;确定&#x27;</span>&#125;,<br>    ]);<br>  &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol><li>测试打开微信App</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title function_">handleOpenUrl</span>(<span class="hljs-string">&quot;weixin://&quot;</span>); <span class="hljs-comment">// 可以正常拉起打开微信</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>测试打开另一个RN App</li></ol><blockquote><p>前提是另一个app中AndroidManifest.xml中已经配置好deep link</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title function_">handleOpenUrl</span>(<span class="hljs-string">&quot;mydeeplink://&quot;</span>);<br></code></pre></div></td></tr></table></figure><ul><li><code>await Linking.canOpenURL(&quot;mydeeplink://&quot;)</code>直接返回false</li><li>直接通过<code>await Linking.openURL(&quot;mydeeplink://&quot;)</code>可以拉起另一个RN App</li><li>感觉 <code>Linking.canOpenURL</code>有问题，知道原因的告诉我一声，测试机型是小米13，android13版本</li></ul><ol start="3"><li>测试scheme为https和http的链接</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title function_">handleOpenUrl</span>(<span class="hljs-string">&quot;https://cn.bing.com&quot;</span>); <span class="hljs-comment">// 正常拉起手机浏览器，并打打开网站</span><br></code></pre></div></td></tr></table></figure><ol start="4"><li>测试打开app设置页</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">await</span> <span class="hljs-title class_">Linking</span>.<span class="hljs-title function_">openSettings</span>(); <span class="hljs-comment">// 正常打开app设置页</span><br></code></pre></div></td></tr></table></figure><ol start="5"><li>通过adb指令测试</li></ol><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">adb shell am start -W -a android.intent.action.VIEW -d <span class="hljs-string">&quot;yourScheme://detail/xxx&quot;</span> com.your-app-name <span class="hljs-comment"># 成功拉起目标app</span><br></code></pre></div></td></tr></table></figure><h3 id="4-3-被其他App拉起后获取Deep-Link"><a href="#4-3-被其他App拉起后获取Deep-Link" class="headerlink" title="4.3 被其他App拉起后获取Deep Link"></a>4.3 被其他App拉起后获取Deep Link</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> initialUrl = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Linking</span>.<span class="hljs-title function_">getInitialURL</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;initialUrl:&#x27;</span>, initialUrl);<br></code></pre></div></td></tr></table></figure><ol><li>在开发debugger模式下，Linking.getInitialURL始终返回null</li><li>如果app是被其它app拉起的，会获取到deep link值，反之始终为null</li></ol><h2 id="5-App-Link"><a href="#5-App-Link" class="headerlink" title="5. App Link"></a>5. App Link</h2><h2 id="5-1-App-Link-与-Deep-Link比较"><a href="#5-1-App-Link-与-Deep-Link比较" class="headerlink" title="5.1 App Link 与 Deep Link比较"></a>5.1 App Link 与 Deep Link比较</h2><blockquote><p><a href="https://developer.android.google.cn/training/app-links/verify-android-applinks?hl=zh-cn">文档</a></p></blockquote><table><thead><tr><th align="center"></th><th align="center">Deep Link</th><th align="center">App Link</th></tr></thead><tbody><tr><td align="center">intent 网址架构</td><td align="center">http、https 或自定义架构</td><td align="center">需要 http 或 https</td></tr><tr><td align="center">intent 操作</td><td align="center">intent 操作    任何操作</td><td align="center">需要 android.intent.action.VIEW</td></tr><tr><td align="center">intent 类别</td><td align="center">任何类别</td><td align="center">需要 android.intent.category.BROWSABLE 和 android.intent.category.DEFAULT</td></tr><tr><td align="center">链接验证</td><td align="center">无</td><td align="center">需要通过 HTTPS 协议在您的网站上发布 Digital Asset Links 文件</td></tr><tr><td align="center">用户体验</td><td align="center">可能会显示一个消除歧义对话框，以供用户选择用于打开链接的应用</td><td align="center">无对话框；您的应用会打开以处理您的网站链接</td></tr><tr><td align="center">兼容性</td><td align="center">所有 Android 版本</td><td align="center">Android 6.0 及更高版本</td></tr></tbody></table><h2 id="5-2-App-Link配置步骤"><a href="#5-2-App-Link配置步骤" class="headerlink" title="5.2 App Link配置步骤"></a>5.2 App Link配置步骤</h2><h3 id="5-2-1-AndroidManifest-xml配置"><a href="#5-2-1-AndroidManifest-xml配置" class="headerlink" title="5.2.1 AndroidManifest.xml配置"></a>5.2.1 AndroidManifest.xml配置</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- android/app/src/main/AndroidManifest.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;asset_statements&quot;</span> <span class="hljs-attr">android:resource</span>=<span class="hljs-string">&quot;@string/asset_statements&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">...</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span> <span class="hljs-attr">android:autoVerify</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.VIEW&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.BROWSABLE&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:scheme</span>=<span class="hljs-string">&quot;https&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">android:host</span>=<span class="hljs-string">&quot;my.applink.com&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:pathPrefix</span>=<span class="hljs-string">&quot;/detail&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- android/app/src/main/res/values/strings.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;asset_statements&quot;</span>&gt;</span><br>    [&#123;<br>      \&quot;relation\&quot;: [\&quot;delegate_permission/common.share_location\&quot;],<br>      \&quot;target\&quot;: &#123;<br>        \&quot;namespace\&quot;: \&quot;web\&quot;,<br>        \&quot;site\&quot;: \&quot;https://my.applink.com\&quot;<br>      &#125;<br>    &#125;]<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-2-2-本地部署一个https服务"><a href="#5-2-2-本地部署一个https服务" class="headerlink" title="5.2.2 本地部署一个https服务"></a>5.2.2 本地部署一个https服务</h3><blockquote><p>可以使用nginx或者<a href="https://www.npmjs.com/package/live-server">live-server</a>等，我这里使用了live-server</p></blockquote><ol><li>使用openssl创建https证书</li></ol><ul><li>生成服务器私钥</li></ul><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">openssl genrsa -out server.key 1024<br></code></pre></div></td></tr></table></figure><ul><li>根据私钥和输入的信息生成证书请求文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">openssl req -new -key server.key -out server.csr<br></code></pre></div></td></tr></table></figure><ul><li>第一步的私钥和第二步的请求文件生成证书(下面失效时间为365天)</li></ul><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">openssl x509 -req -<span class="hljs-keyword">in</span> server.csr -out server.crt -signkey server.key -days 3650<br></code></pre></div></td></tr></table></figure><ol start="2"><li><a href="https://github.com/tapio/live-server#https">live-server开启https</a></li></ol><blockquote><p>如果有现成的https部署的网站，就不用本地这么麻烦了，直接部署在线上</p></blockquote><p>把上一步生成的<code>server.crt</code>和<code>server.key</code>都复制到live-server项目根目录里</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">var</span> liveServer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;live-server&quot;</span>);<br><br><span class="hljs-keyword">var</span> params = &#123;<br>  <span class="hljs-attr">port</span>: <span class="hljs-number">443</span>, <span class="hljs-comment">// Set the server port. Defaults to 8080.</span><br>  <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;0.0.0.0&quot;</span>, <span class="hljs-comment">// Set the address to bind to. Defaults to 0.0.0.0 or process.env.IP.</span><br>  <span class="hljs-attr">root</span>: <span class="hljs-string">&quot;./&quot;</span>, <span class="hljs-comment">// Set root directory that&#x27;s being served. Defaults to cwd.</span><br>  <span class="hljs-attr">open</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// When false, it won&#x27;t load your browser by default.</span><br>  <span class="hljs-attr">ignore</span>: <span class="hljs-string">&quot;scss,my/templates&quot;</span>, <span class="hljs-comment">// comma-separated string for paths to ignore</span><br>  <span class="hljs-attr">file</span>: <span class="hljs-string">&quot;index.html&quot;</span>, <span class="hljs-comment">// When set, serve this file (server root relative) for every 404 (useful for single-page applications)</span><br>  <span class="hljs-attr">wait</span>: <span class="hljs-number">1000</span>, <span class="hljs-comment">// Waits for all changes, before reloading. Defaults to 0 sec.</span><br>  <span class="hljs-attr">mount</span>: [[<span class="hljs-string">&quot;/components&quot;</span>, <span class="hljs-string">&quot;./node_modules&quot;</span>]], <span class="hljs-comment">// Mount a directory to a route.</span><br>  <span class="hljs-attr">logLevel</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// 0 = errors only, 1 = some, 2 = lots</span><br>  <span class="hljs-attr">middleware</span>: [<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;<br>      <span class="hljs-keyword">if</span> (req.<span class="hljs-property">url</span> === <span class="hljs-string">&quot;/.well-known/assetlinks.json&quot;</span>) &#123;<br>        <span class="hljs-keyword">const</span> data = fs.<span class="hljs-title function_">readFileSync</span>(<br>          path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;./.well-known/assetlinks.json&quot;</span>)<br>        );<br><br>        res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>          <span class="hljs-string">&quot;Content-Disposition&quot;</span>: <span class="hljs-string">&quot;attachment; filename=assetlinks.json&quot;</span>,<br>          <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>,<br>        &#125;);<br><br>        res.<span class="hljs-title function_">end</span>(data);<br>      &#125;<br><br>      <span class="hljs-title function_">next</span>();<br>    &#125;,<br>  ], <span class="hljs-comment">// Takes an array of Connect-compatible middleware that are injected into the server middleware stack</span><br>  <span class="hljs-attr">https</span>: &#123;<br>    <span class="hljs-attr">cert</span>: fs.<span class="hljs-title function_">readFileSync</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;./server.crt&quot;</span>)),<br>    <span class="hljs-attr">key</span>: fs.<span class="hljs-title function_">readFileSync</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;./server.key&quot;</span>)),<br>    <span class="hljs-attr">passphrase</span>: <span class="hljs-string">&quot;12345&quot;</span>,<br>  &#125;,<br>  <span class="hljs-comment">// &quot;https-module&quot;: &quot;httpsModule&quot;,</span><br>&#125;;<br>liveServer.<span class="hljs-title function_">start</span>(params);<br></code></pre></div></td></tr></table></figure><ol start="3"><li>获取App debug.keystore的SHA256签名</li></ol><blockquote><p>这是在react native项目的根目录执行，debug.keystore的密钥库口令是 <code>android</code></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">keytool -list -v -keystore android/app/debug.keystore<br></code></pre></div></td></tr></table></figure><ol start="4"><li>live-server项目根目录创建<code>.well-known/assetlinks.json</code>文件</li></ol><blockquote><p>这里可以使用<a href="https://developers.google.cn/digital-asset-links/tools/generator?hl=zh-cn">线上的语句列表生成器和测试器</a></p></blockquote><p>把上面生成的SHA256签名填入下面的<code>sha256_cert_fingerprints</code>中</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;relation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;delegate_permission/common.handle_all_urls&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;namespace&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;android_app&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;package_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.example&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sha256_cert_fingerprints&quot;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5&quot;</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br></code></pre></div></td></tr></table></figure><ol start="5"><li>修改本地hosts</li></ol><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.1.5</span> my.applink.com<br></code></pre></div></td></tr></table></figure><ol start="6"><li>验证访问<code>assetlinks.json</code>文件</li></ol><ul><li>启动live-server项目</li></ul><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">npx live-server<br></code></pre></div></td></tr></table></figure><ul><li>浏览器输入<code>https://my.applink.com/.well-known/assetlinks.json</code>可以正常打开下载，说明部署正常</li></ul><ol start="7"><li>手机端验证访问<code>assetlinks.json</code>文件</li></ol><p>手机要和电脑处在同一局域网下(wifi下)，修改手机的wifi代理配置，填入主机名(电脑ip)和端口号，这样手机就可以访问下载<code>assetlinks.json</code>文件了，代理我这里用的是<a href="https://www.npmjs.com/package/anyproxy">anyproxy</a>。</p><h3 id="5-2-3-测试App-Link"><a href="#5-2-3-测试App-Link" class="headerlink" title="5.2.3 测试App Link"></a>5.2.3 测试App Link</h3><ol><li>测试网址 intent</li></ol><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">adb shell am start -a android.intent.action.VIEW \<br>    -c android.intent.category.BROWSABLE \<br>    -d <span class="hljs-string">&quot;http://my.applink.com/detail/xxx&quot;</span> \<br>    com.your-app-name<br></code></pre></div></td></tr></table></figure><p><strong>测试结果</strong>：经过实际测试可以正常拉起app，并跳转到app指定页面</p><ol start="2"><li>在另一个RN项目中拉起测试</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">await</span> <span class="hljs-title class_">Linking</span>.<span class="hljs-title function_">openURL</span>(<span class="hljs-string">&quot;https://my.applink.com/detail/xxx&quot;</span>)<br></code></pre></div></td></tr></table></figure><p><strong>测试结果</strong>： 经过实际测试，只拉起了手机本地浏览器，没有拉起app。有可能是上面生成的https证书，手机不认可（浏览器弹出了警告，点击继续才打开网页）</p><ol start="3"><li>调用android原生方法传入app link拉起测试</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.your-app-name;<br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.net.Uri;<br><br><span class="hljs-keyword">import</span> com.facebook.react.bridge.NativeModule;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactApplicationContext;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactContext;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactContextBaseJavaModule;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactMethod;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.Promise;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OpenAppLinkModule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ReactContextBaseJavaModule</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ReactApplicationContext reactContext;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">OPENLINK_OK</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;OPENLINK_OK&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">OPENLINK_ERR</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;OPENLINK_ERR&quot;</span>;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OpenAppLink&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">OpenAppLinkModule</span><span class="hljs-params">(ReactApplicationContext context)</span> &#123;<br>    <span class="hljs-built_in">super</span>(context);<br>    reactContext = context;<br>  &#125;<br><br>  <span class="hljs-meta">@ReactMethod</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleOpenAppLink</span><span class="hljs-params">(String appLinkUrl, String appPackageName, Promise promise)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(Intent.ACTION_VIEW, Uri.parse(appLinkUrl));<br>      intent.setPackage(appPackageName);<br>      intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<br>      reactContext.startActivity(intent);<br><br>      promise.resolve(OPENLINK_OK);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      promise.reject(OPENLINK_ERR, e);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>js端调用android原生方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">NativeModules</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-native&#x27;</span>;<br><br><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NativeModules</span>.<span class="hljs-property">OpenAppLink</span>.<span class="hljs-title function_">handleOpenAppLink</span>(<br>    <span class="hljs-string">&#x27;https://my.applink.com/detail/xxx&#x27;</span>,<br>    <span class="hljs-string">&#x27;com.your-app-name&#x27;</span>,<br>  );<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;openAppLink res:&#x27;</span>, res);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>测试结果</strong>： 经过实际测试，可以正常拉起app，并跳转到指定页面</p><ol start="4"><li>顺便测试下h5页面拉起app</li></ol><ul><li>在live-server的根目录<code>index.html</code>中，添加a链接拉起app</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deepLinkId&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;yourAppScheme://detail/xxx&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>打开 app 测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>如果想在打开h5页面时，免去用户的点击操作，可以添加js，主动派发点击事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;DOMContentLoaded&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#deepLinkId&quot;</span>);<br>  <span class="hljs-keyword">var</span> event = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createEvent</span>(<span class="hljs-string">&quot;MouseEvent&quot;</span>);<br>  event.<span class="hljs-title function_">initMouseEvent</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-property">defaultView</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">null</span>);<br>  btn.<span class="hljs-title function_">dispatchEvent</span>(event);  <span class="hljs-comment">//在这一步会设置event.target,以及触发事件类型</span><br>&#125;);<br></code></pre></div></td></tr></table></figure><p><strong>测试结果</strong>：经过实际测试，点击a链接，浏览器弹出提示，<code>当前网站请求打开xx app</code>，点击<code>允许</code>，成功拉起app，并跳转到指定页</p><h2 id="5-3-存在的问题和后续挣扎"><a href="#5-3-存在的问题和后续挣扎" class="headerlink" title="5.3 存在的问题和后续挣扎"></a>5.3 存在的问题和后续挣扎</h2><ol><li><p>通过<code>Linking.openURL</code>这个api，传入app link只能拉起本地浏览器，没拉起app</p></li><li><p><code>Linking.canOpenURL</code>这个api，传入deep link链接，返回false，但通过<code>Linking.openURL</code>又能打开，有问题</p></li><li><p>上面费那么大劲，本地部署一个https，把本地服务暂停掉，通过android原生app link拉起目标app，发现其实也是能拉起的，这等于是压根就没有进行校验，好家伙，浪费我感情</p></li><li><p>经过搜索，chatGPT提示，有说是因为我本地https证书的问题，两边RN App项目都要处理</p></li></ol><ul><li><code>android/app/src/main/res/raw</code></li></ul><p>把本地生成的https证书<code>server.crt</code>复制到这里</p><ul><li><code>android/app/src/main/res/xml/network_security_config.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">network-security-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">base-config</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 这里为了测试applink，导入了本地https证书 --&gt;</span><br>      <span class="hljs-comment">&lt;!-- 本地https证书会导致搞得地图无法加载显示 --&gt;</span><br>      <span class="hljs-comment">&lt;!-- 测试完成后，可以注释掉或者删除掉，或者使用正规认证的https证书 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">trust-anchors</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">certificates</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;@raw/server&quot;</span>/&gt;</span> <br>      <span class="hljs-tag">&lt;/<span class="hljs-name">trust-anchors</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">base-config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">network-security-config</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><code>android/app/src/main/java/com/mydeeplink/TrustServerCrtModule.java</code></li></ul><p>创建原生方法，让app读取并信任证书</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.your-app-name;<br><br><span class="hljs-keyword">import</span> com.facebook.react.bridge.NativeModule;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactApplicationContext;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactContext;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactContextBaseJavaModule;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactMethod;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.Promise;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.security.KeyStore;<br><span class="hljs-keyword">import</span> java.security.SecureRandom;<br><span class="hljs-keyword">import</span> java.security.cert.CertificateFactory;<br><span class="hljs-keyword">import</span> java.security.cert.X509Certificate;<br><br><span class="hljs-keyword">import</span> javax.net.ssl.HttpsURLConnection;<br><span class="hljs-keyword">import</span> javax.net.ssl.SSLContext;  <br><span class="hljs-keyword">import</span> javax.net.ssl.TrustManagerFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TrustServerCrtModule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ReactContextBaseJavaModule</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ReactApplicationContext reactContext;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SERVER_READ_OK</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;server.crt已设置为信任&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SERVER_READ_ERROR</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SERVER_READ_ERROR&quot;</span>;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;TrustServerCrt&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">TrustServerCrtModule</span><span class="hljs-params">(ReactApplicationContext context)</span> &#123;<br>    <span class="hljs-built_in">super</span>(context);<br>    reactContext = context;<br>  &#125;<br><br>  <span class="hljs-meta">@ReactMethod</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readServerCrt</span><span class="hljs-params">(Promise promise)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 读取证书文件</span><br>      <span class="hljs-type">InputStream</span> <span class="hljs-variable">certStream</span> <span class="hljs-operator">=</span> reactContext.getResources().openRawResource(R.raw.server);<br>      <span class="hljs-type">CertificateFactory</span> <span class="hljs-variable">cf</span> <span class="hljs-operator">=</span> CertificateFactory.getInstance(<span class="hljs-string">&quot;X.509&quot;</span>);<br>      <span class="hljs-type">X509Certificate</span> <span class="hljs-variable">cert</span> <span class="hljs-operator">=</span> (X509Certificate) cf.generateCertificate(certStream);<br><br>      <span class="hljs-comment">// 创建一个证书集合,将自签名证书放入</span><br>      <span class="hljs-type">KeyStore</span> <span class="hljs-variable">keyStore</span> <span class="hljs-operator">=</span> KeyStore.getInstance(KeyStore.getDefaultType());<br>      keyStore.load(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>      keyStore.setCertificateEntry(<span class="hljs-string">&quot;ca&quot;</span>, cert);<br><br>      <span class="hljs-comment">// 使用含有新证书的 TrustManager</span><br>      <span class="hljs-type">SSLContext</span> <span class="hljs-variable">sslContext</span> <span class="hljs-operator">=</span> SSLContext.getInstance(<span class="hljs-string">&quot;TLS&quot;</span>);<br>      <span class="hljs-type">TrustManagerFactory</span> <span class="hljs-variable">trustManagerFactory</span> <span class="hljs-operator">=</span> TrustManagerFactory<br>          .getInstance(TrustManagerFactory.getDefaultAlgorithm());<br>      trustManagerFactory.init(keyStore);<br>      sslContext.init(<span class="hljs-literal">null</span>, trustManagerFactory.getTrustManagers(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureRandom</span>());<br><br>      <span class="hljs-comment">// 设置全局的 SSLSocketFactory</span><br>      HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());<br><br>      promise.resolve(SERVER_READ_OK);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      promise.reject(SERVER_READ_ERROR, e);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>js端调用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">await</span> <span class="hljs-title class_">NativeModules</span>.<span class="hljs-property">TrustServerCrt</span>.<span class="hljs-title function_">readServerCrt</span>();<br></code></pre></div></td></tr></table></figure><p><strong>结果</strong>：一顿猛虎操作，毛用都没，再次浪费我感情</p><ol start="5"><li><code>assetlinks.json</code>部署在公网上，并且能够通过https正常访问<code>/.well-known/assetlinks.json</code>，然后再使用<code>Linking.openURL</code>调用</li></ol><p><strong>结果</strong>：只是拉起本地浏览器，未拉起app</p><ol start="6"><li><p>准备用android studio来配置，当我把项目导入后，点击<code>Tools -- App Links Assistant</code>弹出面板后，在第一步<code>Open URL Mapping Editor</code>中填了<code>Host、Path和pathPrefix</code>后，死活选择不了<code>Activity</code>，无语。。。</p></li><li><p>一番搜索，说是国内网络原因，app link使用有问题，知道的说一声；</p></li></ol><h2 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6.参考资料"></a>6.参考资料</h2><ol><li><a href="https://www.reactnative.cn/docs/linking">React Native Linking</a></li><li><a href="https://developer.android.google.cn/training/app-links?hl=zh-cn">Android 应用链接</a></li><li><a href="https://developer.android.google.cn/studio/write/app-link-indexing?hl=zh-cn">添加 Android App Links</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>react native</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
      <tag>react native</tag>
      
      <tag>android</tag>
      
      <tag>deep link</tag>
      
      <tag>app link</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一次页面请求loading转圈圈没停止bug的追踪</title>
    <link href="/2023/07/31/refresh-token/"/>
    <url>/2023/07/31/refresh-token/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://juejin.cn/post/7262201057957429304">本文掘金链接</a></li></ul><blockquote><p>终极省流：项目中封装的请求方法存在问题，刷新token成功后，没把旧的请求结果返回到业务代码中，Promise一直处在pending状态，所以关闭loading方法一直没执行，导致一直在转圈圈</p></blockquote><h2 id="1-项目背景"><a href="#1-项目背景" class="headerlink" title="1. 项目背景"></a>1. 项目背景</h2><ul><li>uniapp 微信小程序项目</li><li>项目中采用JWT登录，登录成功后返回<code>access_token</code>和<code>refresh_token</code>，其中access_token用于每次请求的时候在header中带上令牌，<code>Authorization: Bearer &#123;&#123;access_token&#125;&#125;</code>，refresh_token用于access_token过期失效后刷新新的access_token</li><li>网络请求采用的是基于<code>uni.request</code>自行封装的方法</li></ul><h2 id="2-发现bug及分析"><a href="#2-发现bug及分析" class="headerlink" title="2. 发现bug及分析"></a>2. 发现bug及分析</h2><h3 id="2-1-误会了mescroll-uni"><a href="#2-1-误会了mescroll-uni" class="headerlink" title="2.1 误会了mescroll-uni"></a>2.1 误会了mescroll-uni</h3><ul><li>发生bug的页面，是一个列表页，请求需要携带token的，列表里采用了<a href="http://www.mescroll.com/uni.html#options">mescroll-uni</a>库（是专门用在uni-app的下拉刷新和上拉加载的组件, 支持一套代码编译到iOS、Android、H5、小程序等多个平台）</li></ul><blockquote><p>mescroll-uni简单使用示例</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mescroll-uni</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;mescrollRef&quot;</span> <span class="hljs-attr">bottom</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">:safearea</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">:down</span>=<span class="hljs-string">&quot;downOption&quot;</span> <span class="hljs-attr">:up</span>=<span class="hljs-string">&quot;upOption&quot;</span> @<span class="hljs-attr">init</span>=<span class="hljs-string">&quot;mescrollInit&quot;</span> @<span class="hljs-attr">down</span>=<span class="hljs-string">&quot;downCallback&quot;</span> @<span class="hljs-attr">up</span>=<span class="hljs-string">&quot;upCallback&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- ... --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mescroll-uni</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">MescrollMixin</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;mescroll-uni/mescroll-mixins.js&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">MescrollUni</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;mescroll-uni/mescroll-uni.vue&quot;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">mixins</span>: [<span class="hljs-title class_">MescrollMixin</span>],</span><br><span class="language-javascript">  <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-string">&quot;mescroll-uni&quot;</span>: <span class="hljs-title class_">MescrollUni</span></span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">list</span>: [],</span><br><span class="language-javascript">      <span class="hljs-attr">upOption</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">use</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否启用上拉加载; 默认true</span></span><br><span class="language-javascript">        <span class="hljs-attr">auto</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否在初始化完毕之后自动执行上拉加载的回调; 默认true</span></span><br><span class="language-javascript">        <span class="hljs-attr">page</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">num</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 当前页码,默认0,回调之前会加1,即callback(page)会从1开始</span></span><br><span class="language-javascript">          <span class="hljs-attr">size</span>: <span class="hljs-number">10</span> <span class="hljs-comment">// 每页数据的数量,默认10</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">noMoreSize</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 配置列表的总数量要大于等于5条才显示&#x27;-- END --&#x27;的提示</span></span><br><span class="language-javascript">        <span class="hljs-attr">empty</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">tip</span>: <span class="hljs-string">&#x27;暂无数据&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">icon</span>: emptyPNG</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">textNoMore</span>: <span class="hljs-string">&#x27;---没有更多了---&#x27;</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">async</span> <span class="hljs-title function_">upCallback</span>(<span class="hljs-params">page</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">try</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">http</span>(<span class="hljs-string">&#x27;/api/xxx/getList&#x27;</span>, <span class="hljs-string">&quot;POST&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (res.<span class="hljs-property">code</span> === <span class="hljs-number">200</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 接口返回的当前页数据列表</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> curPageData = res.<span class="hljs-property">data</span>.<span class="hljs-property">list</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">// 接口返回的总长度</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> totalSize = res.<span class="hljs-property">data</span>.<span class="hljs-property">total</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">// 接口返回的当前页数据长度</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> curPageLen = res.<span class="hljs-property">data</span>.<span class="hljs-property">list</span>.<span class="hljs-property">length</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = page.<span class="hljs-property">num</span> === <span class="hljs-number">1</span> ? curPageData : [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>, ...curPageData];</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">mescroll</span>.<span class="hljs-title function_">endBySize</span>(curPageLen, totalSize);</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">      &#125; <span class="hljs-keyword">catch</span>(e) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">mescroll</span>.<span class="hljs-title function_">endErr</span>();</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><p>当access_token失效后，而这时候刚好点击进入到了这个列表页，而mescroll-uni在upOption中配置了<code>auto: true</code>(即初始化完毕之后自动执行上拉加载的回调)，此时会走刷新token操作，token刷新成功后，会重新把刚才的请求走一遍，然后把结果返回给页面。问题就出现在这，由于封装的请求方法中的刷新token模块有问题，没有把重新请求的结果返回给页面，导致mescroll-uni一直在loading。</p></li><li><p>而在微信开发者工具network中看到没任何问题，请求A返回code为4011，token失效，发起refresh_token请求，然后再次发送请求A，步骤没错。console控制台也没有任何报错。</p></li><li><p>当重新下拉刷新后，列表就重新渲染了(因为此时发起的请求，带的token已经是刷新过后的新token)，这样造成我一度认为mescroll-uni库有bug，无语！</p></li></ul><h3 id="2-2-token刷新方法存在问题"><a href="#2-2-token刷新方法存在问题" class="headerlink" title="2.2 token刷新方法存在问题"></a>2.2 token刷新方法存在问题</h3><blockquote><p>一次偶然在请求前加了<code>uni.showLoading</code>，发现token刷新成功后，转圈圈居然还在，<code>uni.hideLoading</code>未执行，让我恍然大悟，项目中自行封装的<code>http</code>方法有问题</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><span class="hljs-attr">methods</span>: &#123;<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">fetchData</span>(<span class="hljs-params"></span>) &#123;<br>uni.<span class="hljs-title function_">showLoading</span>();<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">http</span>(<span class="hljs-string">&quot;/api/xxx/xxx&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>);<br>uni.<span class="hljs-title function_">hideLoading</span>();<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>uni.<span class="hljs-title function_">hideLoading</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e);<br>&#125;<br>&#125;<br>&#125;,<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">onLoad</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">fetchData</span>();<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>存在问题</strong>的<code>http</code>请求方法代码片段：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> config <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./config&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">http</span> = (<span class="hljs-params">path,method,params,header</span>) =&gt; &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>uni.<span class="hljs-title function_">request</span>(&#123;<br><span class="hljs-attr">method</span>: method,<br>url,<br><span class="hljs-attr">header</span>: &#123;<br>...header,<br><span class="hljs-title class_">Authorization</span>: uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&quot;access_token&quot;</span>)<br>? <span class="hljs-string">&quot;Bearer &quot;</span> + uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&quot;access_token&quot;</span>)<br>: <span class="hljs-string">&quot;&quot;</span>,<br>&#125;,,<br><span class="hljs-attr">data</span>: params,<br><span class="hljs-attr">success</span>: <span class="hljs-keyword">async</span> (res) =&gt; &#123;<br><span class="hljs-keyword">const</span> &#123;<br><span class="hljs-attr">data</span>: &#123; code, msg &#125;&#125; = res;<br><span class="hljs-keyword">if</span> (code &gt;= <span class="hljs-number">200</span> &amp;&amp; code &lt; <span class="hljs-number">300</span>) &#123;<br><span class="hljs-title function_">resolve</span>(res.<span class="hljs-property">data</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (code === <span class="hljs-number">4011</span>) &#123;<br><span class="hljs-comment">// ==&gt;问题就出现在这</span><br><span class="hljs-title function_">refreshToken</span>(&#123; path, method, params, isRsa &#125;);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (code === <span class="hljs-number">4013</span>) &#123;<br><span class="hljs-title function_">gotoLoginPage</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">reject</span>(res.<span class="hljs-property">data</span>);<br>&#125;<br>&#125;,<br><span class="hljs-attr">fail</span>: <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;请求失败&quot;</span>, err);<br><span class="hljs-title function_">reject</span>(err);<br>&#125;,<br>&#125;);<br>&#125;);<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">refreshToken</span>(<span class="hljs-params">failParams</span>) &#123;<br>uni.<span class="hljs-title function_">request</span>(&#123;<br><span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br><span class="hljs-attr">url</span>: config.<span class="hljs-property">baseUrl</span> + <span class="hljs-string">&quot;/api/xxx/token/reset&quot;</span>,<br><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">refresh_token</span>: uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&quot;refresh_token&quot;</span>),<br>&#125;,<br><span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> &#123; code, data &#125; = res.<span class="hljs-property">data</span>;<br><br><span class="hljs-keyword">if</span> (code === <span class="hljs-number">200</span>) &#123;<br>uni.<span class="hljs-title function_">setStorageSync</span>(<span class="hljs-string">&quot;access_token&quot;</span>, data.<span class="hljs-property">access_token</span>);<br>uni.<span class="hljs-title function_">setStorageSync</span>(<span class="hljs-string">&quot;refresh_token&quot;</span>, data.<span class="hljs-property">refresh_token</span>);<br><br><span class="hljs-keyword">const</span> &#123; path, method, params, isRsa &#125; = failParams;<br><span class="hljs-comment">// 这里虽然把那次请求重新发送出去，但是结果没返回给页面</span><br><span class="hljs-title function_">http</span>(path, method, params, isRsa);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (code === <span class="hljs-number">4012</span>) &#123;<br><span class="hljs-comment">// refresh_token也失效了，重新登录</span><br><span class="hljs-title function_">gotoLoginPage</span>();<br>&#125;<br>&#125;,<br><span class="hljs-attr">fail</span>: <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;请求失败&quot;</span>, err);<br>&#125;,<br>&#125;);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> http;<br></code></pre></div></td></tr></table></figure><p><strong>分析</strong>：上面代码中可以看到，当返回4011 token失效后，refreshToken方法中，刷新token后，重新执行http方法发起请求，这时候的结果，没有resolve或者reject回去，导致页面那一次请求一直处在pending状态，而<a href="https://uniapp.dcloud.net.cn/api/request/request.html#request">uni.request</a>方法默认超时时间为60000ms(即1分钟)，没等到1分钟，就手动离开这个页面了，导致超时的错误也没看到。refreshToken方法里虽然把那一次请求重新发出了，但这里就如同你用postman，请求成功与否和页面代码已无关</p><h2 id="3-无感刷新的修改"><a href="#3-无感刷新的修改" class="headerlink" title="3. 无感刷新的修改"></a>3. 无感刷新的修改</h2><blockquote><p>项目是中途接手，那就基于这个继续修改，就不替换了</p></blockquote><p><strong>两个注意点：</strong></p><ol><li>当access_token失效后，此时刷新token，要防止重复刷新，用一个变量控制</li><li>当access_token失效后，此时正在刷新token，如果页面中此时还有其它请求正在发出，需要存起来(Promise在pending状态)，等token刷新成功后，再把刚才存起来的请求按顺序一个个拿出来，按顺序重新发起请求，并把结果返回给页面(把Promise状态改为fulfilled或者rejected状态)</li></ol><p>改造后的完整代码片段：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 标记token是否正在刷新</span><br><span class="hljs-keyword">let</span> isRefreshing = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 需要重新发起请求的队列</span><br><span class="hljs-keyword">const</span> oldRequestQueue = [];<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">http</span> = (<span class="hljs-params">path,method,params,header</span>) =&gt; &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>uni.<span class="hljs-title function_">request</span>(&#123;<br><span class="hljs-attr">method</span>: method,<br>url,<br><span class="hljs-attr">header</span>: &#123;<br>...header,<br><span class="hljs-title class_">Authorization</span>: uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&quot;access_token&quot;</span>)<br>? <span class="hljs-string">&quot;Bearer &quot;</span> + uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&quot;access_token&quot;</span>)<br>: <span class="hljs-string">&quot;&quot;</span>,<br>&#125;,<br><span class="hljs-attr">data</span>: params,<br><span class="hljs-attr">success</span>: <span class="hljs-keyword">async</span> (res) =&gt; &#123;<br><span class="hljs-keyword">const</span> &#123;<br><span class="hljs-attr">data</span>: &#123; code, msg &#125;,&#125; = res;<br><span class="hljs-keyword">if</span> (code &gt;= <span class="hljs-number">200</span> &amp;&amp; code &lt; <span class="hljs-number">300</span>) &#123;<br><span class="hljs-title function_">resolve</span>(res.<span class="hljs-property">data</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (code === <span class="hljs-number">4011</span>) &#123;<br><span class="hljs-comment">// 改造重点在这==&gt;</span><br><span class="hljs-keyword">if</span>(!isRefreshing) &#123;<br>            isRefreshing = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">// 将当前这次请求存入requests中</span><br>oldRequestQueue.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(&#123; resolve, reject, path, method, params, isRsa &#125;));<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;准备开始刷新token&quot;</span>);<br><span class="hljs-keyword">let</span> refreshTokenIsOk = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">try</span> &#123;<br>refreshTokenIsOk = <span class="hljs-keyword">await</span> <span class="hljs-title function_">refreshToken</span>();<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;刷新token错误:&quot;</span>, error);<br>oldRequestQueue.<span class="hljs-property">length</span> = <span class="hljs-number">0</span>;<br><span class="hljs-title function_">gotoLoginPage</span>();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>isRefreshing = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (refreshTokenIsOk === <span class="hljs-string">&quot;refresh_token_ok&quot;</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;刷新token成功， oldRequestQueue.length:&quot;</span>, oldRequestQueue.<span class="hljs-property">length</span>);<br><br><span class="hljs-keyword">if</span> (oldRequestQueue.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">// token 刷新后将oldRequestQueue村的请求重新执行</span><br><span class="hljs-keyword">for</span> <span class="hljs-keyword">await</span> (<span class="hljs-keyword">let</span> fn <span class="hljs-keyword">of</span> oldRequestQueue) &#123;<br><span class="hljs-keyword">const</span> &#123;<br><span class="hljs-attr">resolve</span>: oldResolve,<br><span class="hljs-attr">reject</span>: oldReject,<br><span class="hljs-attr">path</span>: oldPath,<br><span class="hljs-attr">method</span>: oldMethod,<br><span class="hljs-attr">params</span>: oldParams,<br><span class="hljs-attr">isRsa</span>: oldIsRsa,<br>&#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fn</span>();<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">http</span>(oldPath, oldMethod, oldParams, oldIsRsa);<br><span class="hljs-title function_">oldResolve</span>(res);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-title function_">oldReject</span>(error);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 重新请求完清空requests</span><br>oldRequestQueue.<span class="hljs-property">length</span> = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 此时正在刷新token，有请求过来，将请求也存入oldRequestQueue中</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;正在刷新token,存入oldRequestQueue:&quot;</span>, path);<br>oldRequestQueue.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(&#123; resolve, reject, path, method, params, isRsa &#125;));<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (code === <span class="hljs-number">4013</span>) &#123;<br><span class="hljs-title function_">gotoLoginPage</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">reject</span>(res.<span class="hljs-property">data</span>);<br>&#125;<br>&#125;,<br><span class="hljs-attr">fail</span>: <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;请求失败&quot;</span>, err);<br><span class="hljs-title function_">reject</span>(err);<br>&#125;,<br>&#125;);<br>&#125;);<br>&#125;;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">refreshToken</span>(<span class="hljs-params"></span>) &#123;<br>uni.<span class="hljs-title function_">request</span>(&#123;<br><span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br><span class="hljs-attr">url</span>: config.<span class="hljs-property">baseUrl</span> + <span class="hljs-string">&quot;/api/xxx/token/reset&quot;</span>,<br><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">refresh_token</span>: uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&quot;refresh_token&quot;</span>),<br>&#125;,<br><span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> &#123; code, data &#125; = res.<span class="hljs-property">data</span>;<br><br><span class="hljs-keyword">if</span> (code === <span class="hljs-number">200</span>) &#123;<br>uni.<span class="hljs-title function_">setStorageSync</span>(<span class="hljs-string">&quot;access_token&quot;</span>, data.<span class="hljs-property">access_token</span>);<br>uni.<span class="hljs-title function_">setStorageSync</span>(<span class="hljs-string">&quot;refresh_token&quot;</span>, data.<span class="hljs-property">refresh_token</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;refresh_token_ok&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (code === <span class="hljs-number">4012</span>) &#123;<br><span class="hljs-comment">// refresh_token也失效了，重新登录</span><br>oldRequestQueue.<span class="hljs-property">length</span> = <span class="hljs-number">0</span>;<br><span class="hljs-title function_">gotoLoginPage</span>();<br>&#125;<br>&#125;,<br><span class="hljs-attr">fail</span>: <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;请求失败&quot;</span>, err);<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(err);<br>&#125;,<br>&#125;);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> http;<br></code></pre></div></td></tr></table></figure><h2 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h2><ol><li><a href="https://juejin.cn/post/6854573219119104014">封装 axios 拦截器实现用户无感刷新 access_token</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>uniapp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uniapp</tag>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一次uniapp HbuilderX创建的小程序项目中使用tailwindcss折腾记录</title>
    <link href="/2023/07/17/hbuilderx-tailwindcss/"/>
    <url>/2023/07/17/hbuilderx-tailwindcss/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://juejin.cn/post/7257022428193636409">本文掘金链接</a></li></ul><blockquote><p>如题，是基于HbuilderX创建的小程序项目，非cli方式创建的项目</p></blockquote><h2 id="1-啰嗦两句"><a href="#1-啰嗦两句" class="headerlink" title="1.啰嗦两句"></a>1.啰嗦两句</h2><ul><li><a href="https://www.tailwindcss.cn/">tailwindcss</a>已经出来很长时间了，在前端娱乐圈里也是炒的火热。这个工具还没使用过，<a href="https://windicss.org/guide/">windicss</a>这个新的轮子又都扎我脸上了。</li><li>之前被uniapp HbuilderX方式创建的h5项目折腾过，这篇文章<a href="https://juejin.cn/post/7129492032241795080">《uniapp 打包 h5 问题总结》</a>有记录。那这次为什么还要用HbuilderX这种方式，没办法，一开始项目不是我创建的。</li></ul><p>省流（得出结论）：</p><ul><li>uniapp HbuilderX方式被高度封装，都被封装到他的应用里去了，虽暴露出来的几个文件和方法，后续配置起来还是费劲。</li><li>而用vue-cli方式创建的，配置文件全部暴露，方便后续修改</li></ul><h2 id="2-开始配置"><a href="#2-开始配置" class="headerlink" title="2.开始配置"></a>2.开始配置</h2><blockquote><ul><li>根据这位兄弟的分享，<a href="https://ask.dcloud.net.cn/article/40098">Hbuilder创建的uniapp工程，使用tailwindcss最优雅的方式</a> 提示，HbuilderX创建的uniapp工程也是内置了postcss，但都是高度封装的。</li><li>想基于它内部的postcss中添加<code>tailwindcss plugins</code>，很难，路会走偏(亲测，路确实很偏，一堆报错，还会和uview-ui冲突)</li><li>所以这里直接使用<code>Tailwind CLI</code>方式</li></ul></blockquote><p>根据<a href="https://www.tailwindcss.cn/docs/installation">文档</a></p><ol><li><p><code>npm install -D tailwindcss</code>安装</p></li><li><p><code>npx tailwindcss init</code>，生成<code>tailwind.config.js</code> 配置文件</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">import(&#x27;tailwindcss&#x27;).Config</span>&#125; */</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-comment">// https://ask.dcloud.net.cn/article/40098</span><br>  <span class="hljs-attr">separator</span>: <span class="hljs-string">&#x27;__&#x27;</span>, <span class="hljs-comment">// 如果是小程序项目需要设置这一项，将 : 选择器替换成 __，之后 hover:bg-red-500 将改为 hover__bg-red-500  </span><br>  <span class="hljs-attr">corePlugins</span>: &#123;  <br>  <span class="hljs-comment">// 预设样式  </span><br>  <span class="hljs-attr">preflight</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 一般uniapp都有预设样式，所以不需要tailwindcss的预设  </span><br>  <span class="hljs-comment">// 以下功能小程序不支持  </span><br>  <span class="hljs-attr">space</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// &gt; 子节点选择器  </span><br>  <span class="hljs-attr">divideWidth</span>: <span class="hljs-literal">false</span>,  <br>  <span class="hljs-attr">divideColor</span>: <span class="hljs-literal">false</span>,  <br>  <span class="hljs-attr">divideStyle</span>: <span class="hljs-literal">false</span>,  <br>  <span class="hljs-attr">divideOpacity</span>: <span class="hljs-literal">false</span>,  <br>  &#125;,<br>  <span class="hljs-attr">content</span>: [<br>  <span class="hljs-string">&#x27;./pages/**/*.&#123;vue,js&#125;&#x27;</span>,<br>  <span class="hljs-comment">// &#x27;./main.js&#x27;,  </span><br>  <span class="hljs-string">&#x27;./App.vue&#x27;</span>,  <br>  <span class="hljs-comment">// &#x27;./index.html&#x27; </span><br>  ],<br>  <span class="hljs-attr">theme</span>: &#123;<br><span class="hljs-attr">extend</span>: &#123;&#125;,<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [],<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>根目录新建<code>tailwind-input.css</code></li></ol><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* @tailwind base; */</span><br><span class="hljs-keyword">@tailwind</span> components;<br><span class="hljs-keyword">@tailwind</span> utilities;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>开启 Tailwind CLI 构建流程</li></ol><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">npx tailwindcss -i ./tailwind-input.css -o ./static/css/tailwind.css --watch<br></code></pre></div></td></tr></table></figure><ol start="5"><li><code>App.vue</code>中引入编译过的<code>tailwind.css</code></li></ol><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff">&lt;style lang=&quot;scss&quot;&gt;<br>@import &quot;@/uni_modules/uview-ui/index.scss&quot;;<br><span class="hljs-addition">+@import url(&quot;./static/css/tailwind.css&quot;);</span><br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><p>其实到这里已经ok了，缺点就是每次运行项目都要自己手动去执行<code>npx tailwindcss -i ./tailwind-input.css -o ./static/css/tailwind.css --watch</code>,不方便<br>所以必须改成自动化</p><h2 id="3-启动项目自动化tailwindcss编译"><a href="#3-启动项目自动化tailwindcss编译" class="headerlink" title="3.启动项目自动化tailwindcss编译"></a>3.启动项目自动化tailwindcss编译</h2><blockquote><p>庆幸的是，uniapp官方暴露出来了<code>vue.config.js</code>，我们可以在这里面配置</p></blockquote><h3 id="3-1-package-json中添加自定义脚本运行"><a href="#3-1-package-json中添加自定义脚本运行" class="headerlink" title="3.1 package.json中添加自定义脚本运行"></a>3.1 <code>package.json</code>中添加自定义脚本运行</h3><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;tailwind:dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npx tailwindcss -i ./tailwind-input.css -o ./static/css/tailwind.css --watch&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;tailwind:prod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npx tailwindcss -i ./tailwind-input.css -o ./static/css/tailwind.css&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;uni-app&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;dev:mp-weixin:dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;本地开发-测试环境接口&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;browser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;UNI_PLATFORM&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mp-weixin&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;NODE_ENV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;development&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;BASE_URL_ENV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;development&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;define&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;CUSTOM-CONST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;dev:mp-weixin:prod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;本地开发-正式环境接口&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;browser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;UNI_PLATFORM&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mp-weixin&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;NODE_ENV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;development&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;BASE_URL_ENV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;production&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;define&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;CUSTOM-CONST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;build:mp-weixin:dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;打包-测试环境接口&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;browser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;UNI_PLATFORM&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mp-weixin&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;NODE_ENV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;production&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;BASE_URL_ENV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;development&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;define&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;CUSTOM-CONST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;build:mp-weixin:prod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;打包-正式环境接口&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;browser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;UNI_PLATFORM&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mp-weixin&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;NODE_ENV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;production&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;BASE_URL_ENV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;production&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;define&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;CUSTOM-CONST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-2-根目录新建vue-config-js"><a href="#3-2-根目录新建vue-config-js" class="headerlink" title="3.2 根目录新建vue.config.js"></a>3.2 根目录新建<code>vue.config.js</code></h3><blockquote><ul><li>利用<code>child_process.exec</code>执行子进程，运行<code>npx tailwindcss -i ./tailwind-input.css -o ./static/css/tailwind.css --watch</code>,</li><li>问题也就出现在这，child_process.exec默认用的是<code>/bin/sh</code>执行，虽然可以配置修改成<code>&#123;shell: &#39;/bin/bash&#39;&#125;</code>或者<code>&#123;shell: &#39;/bin/zsh&#39;&#125;</code>,</li><li>但是tailwindcss每次都报错，因为HbuilderX执行vue.config.js里采用的nodejs版本是<code>v12</code>，通过<code>console.log(process.version)</code>可以看到nodejs当前版本</li><li>为什么它这里采用的是nodejs v12版本，暂不清楚，但本地zsh，执行<code>node -v</code>，是v16版本</li><li>nodejs v12版本执行tailwindcss编译，<a href="https://github.com/tailwindlabs/tailwindcss/discussions/8807">Npx tailwindcss results in “Unexpected Token .”</a></li><li>根据提示，解决办法就是切换当前nodejs版本为v16</li></ul></blockquote><p><img src="/assets/img/hbuilderx-tailwindcss/640.png"></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123;exec&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;process.env.UNI_SCRIPT:&quot;</span>, process.<span class="hljs-property">env</span>.<span class="hljs-property">UNI_SCRIPT</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;process.env.NODE_ENV:&quot;</span>, process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;当前nodejs版本&quot;</span>, process.<span class="hljs-property">version</span>);<br><br><span class="hljs-keyword">const</span> isDev = process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;development&#x27;</span>;<br><br><span class="hljs-title function_">exec</span>(<br>isDev ? <span class="hljs-string">&#x27;npm run tailwind:dev&#x27;</span> : <span class="hljs-string">&#x27;&quot;npm run tailwind:prod&#x27;</span>,<br>&#123; <span class="hljs-attr">cwd</span>: __dirname, <span class="hljs-attr">shell</span>: <span class="hljs-string">&quot;/bin/bash&quot;</span>, &#125;,<br><span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;  <br><span class="hljs-keyword">if</span> (error) &#123;  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;[tailwindcss error]&#x27;</span>, error);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;error.stderr:&quot;</span>, stderr);<br>&#125; <br><br>isDev ? <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`[tailwindcss stdout]: <span class="hljs-subst">$&#123;stdout&#125;</span>`</span>)<br>: <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;[tailwindcss] 生产环境打包完成&#x27;</span>);<br>&#125;<br>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;&#125;;<br></code></pre></div></td></tr></table></figure><p>报错信息如下：</p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns">[tailwindcss error] Error: Command failed: npm run tailwind:dev<br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.610</span> Unexpected token &#x27;.&#x27;<br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.622</span> npm ERR! code ELIFECYCLE<br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.623</span> npm ERR! errno <span class="hljs-number">1</span><br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.638</span> npm ERR! @ tailwind:dev: `npx tailwindcss -i ./tailwind-input.css -o ./static/css/tailwind.css --watch`<br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.639</span> npm ERR! Exit status <span class="hljs-number">1</span><br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.652</span> npm ERR! <br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.668</span> npm ERR! Failed at the @ tailwind:dev script.<br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.669</span> npm ERR! This is probably not a problem with npm. There is likely additional logging output above.<br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.686</span> npm ERR! <span class="hljs-keyword">A</span> complete log of this run can be found in:<br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.702</span> npm ERR!     /Users/xxx/.npm/_logs/<span class="hljs-number">2023</span>-<span class="hljs-number">07</span>-<span class="hljs-number">18</span>T06_38_23_626Z-debug.log<br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.719</span>     at ChildProcess.exithandler (child_process.js:<span class="hljs-number">308</span>:<span class="hljs-number">12</span>)<br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.740</span>     at ChildProcess.emit (events.js:<span class="hljs-number">314</span>:<span class="hljs-number">20</span>)<br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.757</span>     at maybeClose (internal/child_process.js:<span class="hljs-number">1022</span>:<span class="hljs-number">16</span>)<br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.774</span>     at Socket.&lt;anonymous&gt; (internal/child_process.js:<span class="hljs-number">444</span>:<span class="hljs-number">11</span>)<br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.790</span>     at Socket.emit (events.js:<span class="hljs-number">314</span>:<span class="hljs-number">20</span>)<br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.791</span>     at Pipe.&lt;anonymous&gt; (net.js:<span class="hljs-number">675</span>:<span class="hljs-number">12</span>) &#123;<br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.807</span>   killed: false,<br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.810</span>   code: <span class="hljs-number">1</span>,<br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.825</span>   signal: null,<br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.840</span>   cmd: &#x27;npm run tailwind:dev&#x27;<br><span class="hljs-number">14</span>:<span class="hljs-number">38:24.841</span> &#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-3-在vue-config-js中切换nodejs版本"><a href="#3-3-在vue-config-js中切换nodejs版本" class="headerlink" title="3.3 在vue.config.js中切换nodejs版本"></a>3.3 在<code>vue.config.js</code>中切换nodejs版本</h3><h4 id="3-3-1-原本想直接nvm-use-v16-14-2，但是nvm命令找不到"><a href="#3-3-1-原本想直接nvm-use-v16-14-2，但是nvm命令找不到" class="headerlink" title="3.3.1 原本想直接nvm use v16.14.2，但是nvm命令找不到"></a>3.3.1 原本想直接<code>nvm use v16.14.2</code>，但是nvm命令找不到</h4><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;当前nodejs版本&quot;</span>, process.<span class="hljs-keyword">version</span>);<br><br>exec(<span class="hljs-string">&quot;nvm use 16.14.2&quot;</span>, &#123; cwd: __dirname, <span class="hljs-keyword">shell</span>: <span class="hljs-string">&quot;/bin/bash&quot;</span>, &#125;, <span class="hljs-keyword">error</span> =&gt; &#123;<br>console.<span class="hljs-keyword">error</span>(<span class="hljs-keyword">error</span>);<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>报错信息如下：</p><figure class="highlight ldif"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ldif">当前nodejs版本 v12.22.1<br><span class="hljs-attribute">Error</span>: Command failed: nvm use 16.14.2<br><span class="hljs-attribute">14</span>:49:05.163 /bin/bash: nvm: command not found<br><span class="hljs-attribute">14</span>:49:05.172     at ChildProcess.exithandler (child_process.js:308:12)<br><span class="hljs-attribute">14</span>:49:05.172     at ChildProcess.emit (events.js:314:20)<br><span class="hljs-attribute">14</span>:49:05.184     at maybeClose (internal/child_process.js:1022:16)<br><span class="hljs-attribute">14</span>:49:05.185     at Socket.&lt;anonymous&gt; (internal/child_process.js:444:11)<br><span class="hljs-attribute">14</span>:49:05.197     at Socket.emit (events.js:314:20)<br><span class="hljs-attribute">14</span>:49:05.197     at Pipe.&lt;anonymous&gt; (net.js:675:12) &#123;<br><span class="hljs-attribute">14</span>:49:05.209   killed: false,<br><span class="hljs-attribute">14</span>:49:05.212   code: 127,<br><span class="hljs-attribute">14</span>:49:05.226   signal: null,<br><span class="hljs-attribute">14</span>:49:05.244   cmd: &#x27;nvm use 16.14.2&#x27;<br><span class="hljs-attribute">14</span>:49:05.260 &#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-3-2-shelljs登场"><a href="#3-3-2-shelljs登场" class="headerlink" title="3.3.2 shelljs登场"></a>3.3.2 <code>shelljs</code>登场</h4><blockquote><p>这破烂<code>child_process.exec</code>，不折腾了，用<a href="https://www.npmjs.com/package/shelljs">shelljs</a></p></blockquote><ul><li><p>vue.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> shell = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;shelljs&#x27;</span>);<br><span class="hljs-keyword">const</span> isDev = process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;development&#x27;</span>;<br><br>shell.<span class="hljs-title function_">cd</span>(__dirname);<br><br>isDev <br>? shell.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;bash ./tailwindcss.sh development&#x27;</span>, &#123;<span class="hljs-attr">shell</span>: <span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-attr">async</span>:<span class="hljs-literal">true</span>&#125;)<br>: shell.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;bash ./tailwindcss.sh production&#x27;</span>, &#123;<span class="hljs-attr">shell</span>: <span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-attr">async</span>:<span class="hljs-literal">true</span>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;&#125;;<br></code></pre></div></td></tr></table></figure></li><li><p>根目录新建<code>tailwindcss.sh</code></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br>CURRENT_NODE_ENV=<span class="hljs-variable">$1</span><br>DEVELOPMENT=<span class="hljs-string">&quot;development&quot;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;当前NODE_ENV:&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$CURRENT_NODE_ENV</span><br><br><span class="hljs-comment"># 切换到当前目录</span><br><span class="hljs-built_in">cd</span> $(<span class="hljs-built_in">dirname</span> <span class="hljs-variable">$0</span>);<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;当前目录:&quot;</span><br><span class="hljs-built_in">pwd</span><br><br>&#123; <span class="hljs-comment"># try</span><br> <br>    <span class="hljs-built_in">source</span> ~/.nvm/nvm.sh;<br>    <br>    <span class="hljs-comment">#切换nodejs版本</span><br>    nvm use 16.14.2<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;切换后nodejs版本：&quot;</span><br>node -v<br>    <br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$CURRENT_NODE_ENV</span> == <span class="hljs-variable">$DEVELOPMENT</span> ]<br>    <span class="hljs-keyword">then</span><br>    npm run tailwind:dev<br>    <span class="hljs-keyword">else</span><br>    npm run tailwind:prod<br>    <span class="hljs-keyword">fi</span><br>&#125; || &#123; <span class="hljs-comment"># catch</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;tailwindcss 执行错误，请检查&quot;</span>;<br>&#125;<br><br><span class="hljs-built_in">sleep</span> 3<br></code></pre></div></td></tr></table></figure><ul><li>当执行Hbuilderx顶部菜单<code>运行 - 本地开发-测试环境接口</code></li></ul><p>此时nodejs版本倒是正确切换了，tailwindcss也正确执行了，但是shell命令执行阻塞了，停留在那不继续往下执行了（HbuilderX不继续编译vue为小程序了）</p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns">正在编译中...<br><span class="hljs-number">15</span>:<span class="hljs-number">19:40.696</span> process.env.UNI_SCRIPT: dev:mp-weixin:dev<br><span class="hljs-number">15</span>:<span class="hljs-number">19:40.705</span> process.env.NODE_ENV: development<br><span class="hljs-number">15</span>:<span class="hljs-number">19:40.706</span> isDev: true<br><span class="hljs-number">15</span>:<span class="hljs-number">19:40.716</span> 当前nodejs版本 v12.<span class="hljs-number">22</span>.<span class="hljs-number">1</span><br><span class="hljs-number">15</span>:<span class="hljs-number">19:40.766</span> 当前NODE_ENV:<br><span class="hljs-number">15</span>:<span class="hljs-number">19:40.766</span> development<br><span class="hljs-number">15</span>:<span class="hljs-number">19:43.041</span> Now using node v16.<span class="hljs-number">14</span>.<span class="hljs-number">2</span> (npm v8.<span class="hljs-number">5</span>.<span class="hljs-number">0</span>)<br><span class="hljs-number">15</span>:<span class="hljs-number">19:43.051</span> 切换后nodejs版本：<br><span class="hljs-number">15</span>:<span class="hljs-number">19:43.068</span> v16.<span class="hljs-number">14</span>.<span class="hljs-number">2</span><br><span class="hljs-number">15</span>:<span class="hljs-number">19:43.450</span> &gt; tailwind:dev<br><span class="hljs-number">15</span>:<span class="hljs-number">19:43.461</span> &gt; npx tailwindcss -i ./tailwind-input.css -o ./static/css/tailwind.css --watch<br><span class="hljs-number">15</span>:<span class="hljs-number">19:44.696</span> Rebuilding...<br><span class="hljs-number">15</span>:<span class="hljs-number">19:45.038</span> Done in <span class="hljs-number">388m</span>s.<br></code></pre></div></td></tr></table></figure><h4 id="3-3-3-shell执行阻塞解决"><a href="#3-3-3-shell执行阻塞解决" class="headerlink" title="3.3.3 shell执行阻塞解决"></a>3.3.3 shell执行阻塞解决</h4><blockquote><p>两种方法：</p></blockquote><ul><li><p>1 <code>shell.exec(&#39;bash ./tailwindcss.sh development&#39;, &#123;shell: &quot;/bin/bash&quot;, async:true&#125;)</code></p></li><li><p>2 <code>shell.exec(&#39;bash ./tailwindcss.sh development &amp;&#39;, &#123;shell: &quot;/bin/bash&quot;&#125;)</code></p></li></ul><h4 id="3-3-4-又遇坎坷，uview-ui报错"><a href="#3-3-4-又遇坎坷，uview-ui报错" class="headerlink" title="3.3.4 又遇坎坷，uview-ui报错"></a>3.3.4 又遇坎坷，<code>uview-ui</code>报错</h4><blockquote><p>好不容易让tailwindcss正常编译，但是项目中的uview ui又报错了，心累</p></blockquote><p>报错信息如下：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Module</span> parse failed: Unexpected token (<span class="hljs-number">224</span>:<span class="hljs-number">64</span>)<br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">218</span> File was processed with these loaders:<br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">234</span>  * ./node_modules/babel-loader/lib/index.js<br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">287</span>  * ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js<br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">319</span>  * ./node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js<br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">321</span>  * ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js<br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">405</span>  * ./node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js<br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">430</span> You may need an additional loader to handle the result of these loaders.<br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">475</span> |         const grandChild = child.$children; // 判断如果在需要重新初始化的组件数组中名中，并且存在init方法的话，则执行<br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">476</span> | <br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">503</span> &gt;         if (names.includes(child.$options.name) &amp;&amp; typeof child?.init === &#x27;function&#x27;) &#123;<br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">504</span> |           // 需要进行一定的延时，因为初始化页面需要时间<br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">530</span> |           uni.$u.sleep(<span class="hljs-number">50</span>).then(() =&gt; &#123;<br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">531</span> Module parse failed: Unexpected token (<span class="hljs-number">3</span>:<span class="hljs-number">49</span>)<br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">551</span> File was processed with these loaders:<br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">551</span>  * ./node_modules/babel-loader/lib/index.js<br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">663</span>  * ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js<br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">694</span> You may need an additional loader to handle the result of these loaders.<br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">695</span> | // 看到此报错，是因为没有配置vue.config.js的【transpileDependencies】，详见：https://www.uviewui.com/components/npmSetting.html#_5-cli模式额外配置<br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">714</span> | const pleaseSetTranspileDependencies = &#123;&#125;,<br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">715</span> &gt;       babelTest = pleaseSetTranspileDependencies?.test; // 引入全局mixin<br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">740</span> | <br><span class="hljs-attribute">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">17</span>.<span class="hljs-number">891</span> | import mixin from &#x27;./libs/mixin/mixin.js&#x27;; // 小程序特有的mixin<br></code></pre></div></td></tr></table></figure><p>根据提示，是要在vue.config.js中添加<code>transpileDependencies</code>配置：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-attr">transpileDependencies</span>: [<span class="hljs-string">&#x27;uview-ui&#x27;</span>]<br>&#125;;<br></code></pre></div></td></tr></table></figure><ul><li>修改后，继续执行，还是同样的报错，根据<a href="https://www.uviewui.com/components/install.html">uview ui</a>文档，Hbuilderx方式安装无需再vue.config.js中添加transpileDependencies配置</li><li>删掉刚才的<code>transpileDependencies: [&#39;uview-ui&#39;]</code>配置</li><li>难道要用uview ui提供的<a href="https://www.uviewui.com/components/npmSetting.html">npm方式</a>安装吗？试了一遍，还是同样的报错，默默的撤回了修改</li></ul><h4 id="3-3-5-uview-ui报错的分析解决"><a href="#3-3-5-uview-ui报错的分析解决" class="headerlink" title="3.3.5 uview-ui报错的分析解决"></a>3.3.5 <code>uview-ui</code>报错的分析解决</h4><blockquote><p>其实就是，tailwindcss的编译不能和HbuilderX编译小程序在同一时间执行，要错开</p><ol><li>可以新开一个shell窗口执行tailwindcss编译</li><li>或者在子进程中执行tailwindcss编译</li><li>或者拿到HbuilderX编译小程序完毕后打开微信开发者工具的回调，然后再另执行tailwindcss编译</li><li>setTimeout大法</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> shell = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;shelljs&#x27;</span>);<br><span class="hljs-keyword">const</span> isDev = process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;development&#x27;</span>;<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>shell.<span class="hljs-title function_">cd</span>(__dirname);<br><br>isDev <br>? shell.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;bash ./tailwindcss.sh development &amp;&#x27;</span>, &#123;<span class="hljs-attr">shell</span>: <span class="hljs-string">&quot;/bin/bash&quot;</span>&#125;)<br>: shell.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;bash ./tailwindcss.sh production&#x27;</span>, &#123;<span class="hljs-attr">shell</span>: <span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-attr">async</span>:<span class="hljs-literal">true</span>&#125;);<br>&#125;, <span class="hljs-number">30000</span>); <span class="hljs-comment">// 30s后执行</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;&#125;;<br></code></pre></div></td></tr></table></figure><p>可以看到，HbuilderX先进行了vue编译成小程序，然后tailwindcss进行监听编译，先后顺序错开，执行ok</p><p>修改文件也可以生效</p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns">process.env.UNI_SCRIPT: dev:mp-weixin:dev<br><span class="hljs-number">15</span>:<span class="hljs-number">43:08.945</span> process.env.NODE_ENV: development<br><span class="hljs-number">15</span>:<span class="hljs-number">43:08.958</span> isDev: true<br><span class="hljs-number">15</span>:<span class="hljs-number">43:08.973</span> 当前nodejs版本 v12.<span class="hljs-number">22</span>.<span class="hljs-number">1</span><br><span class="hljs-number">15</span>:<span class="hljs-number">43:10.582</span> ​Browserslist: caniuse-lite is outdated. Please run:<br><span class="hljs-number">15</span>:<span class="hljs-number">43:10.593</span> npx browserslist@latest --update-db​<br><span class="hljs-number">15</span>:<span class="hljs-number">43:27.934</span> 项目 &#x27;xxx&#x27; 编译成功。前端运行日志，请另行在小程序开发工具的控制台查看。<br><span class="hljs-number">15</span>:<span class="hljs-number">43:27.951</span> 正在启动微信开发者工具...<br><span class="hljs-number">15</span>:<span class="hljs-number">43:28.941</span> [微信小程序开发者工具] - initialize<br><span class="hljs-number">15</span>:<span class="hljs-number">43:28.952</span> [微信小程序开发者工具]<br><span class="hljs-number">15</span>:<span class="hljs-number">43:28.953</span> [微信小程序开发者工具]<br><span class="hljs-number">15</span>:<span class="hljs-number">43:29.029</span> [微信小程序开发者工具] ✔ IDE server has started, listening on http://<span class="hljs-number">127.0.0.1</span>:<span class="hljs-number">59243</span><br><span class="hljs-number">15</span>:<span class="hljs-number">43:29.075</span> [微信小程序开发者工具]<br><span class="hljs-number">15</span>:<span class="hljs-number">43:29.092</span> [微信小程序开发者工具] - open IDE<br><span class="hljs-number">15:43:29.169</span> [微信小程序开发者工具]<br><span class="hljs-number">15:43:29.169</span> [微信小程序开发者工具]<br><span class="hljs-number">15</span>:<span class="hljs-number">43:29.895</span> [微信小程序开发者工具] ✔ open IDE<br><span class="hljs-number">15</span>:<span class="hljs-number">43:29.910</span> [微信小程序开发者工具]<br><span class="hljs-number">15</span>:<span class="hljs-number">43:29.911</span> 微信开发者工具已启动，在HBuilderX中修改文件并保存，会自动刷新微信模拟器<br><span class="hljs-number">15</span>:<span class="hljs-number">43:29.932</span> 注：<br><span class="hljs-number">15</span>:<span class="hljs-number">43:29.961</span> <span class="hljs-number">1</span>. 可以通过微信开发者工具切换pages.json中condition配置的页面，或者关闭微信开发者工具，然后再从HBuilderX中启动指定页面<br><span class="hljs-number">15</span>:<span class="hljs-number">43:29.992</span> <span class="hljs-number">2</span>. 如果出现微信开发者工具启动后白屏的问题，检查是否启动多个微信开发者工具，如果是则关闭所有打开的微信开发者工具，然后再重新运行<br><span class="hljs-number">15</span>:<span class="hljs-number">43:30.024</span> <span class="hljs-number">3</span>. 运行模式下不压缩代码且含有sourcemap，体积较大；若要正式发布，请点击发行菜单进行发布<br><span class="hljs-number">15</span>:<span class="hljs-number">43:39.028</span> 当前NODE_ENV:<br><span class="hljs-number">15</span>:<span class="hljs-number">43:39.028</span> development<br><span class="hljs-number">15</span>:<span class="hljs-number">43:42.386</span> Now using node v16.<span class="hljs-number">14</span>.<span class="hljs-number">2</span> (npm v8.<span class="hljs-number">5</span>.<span class="hljs-number">0</span>)<br><span class="hljs-number">15</span>:<span class="hljs-number">43:42.401</span> 切换后nodejs版本：<br><span class="hljs-number">15</span>:<span class="hljs-number">43:42.425</span> v16.<span class="hljs-number">14</span>.<span class="hljs-number">2</span><br><span class="hljs-number">15:43:43.144</span> &gt; tailwind:dev<br><span class="hljs-number">15:43:43.162</span> &gt; npx tailwindcss -i ./tailwind-input.css -o ./static/css/tailwind.css --watch<br>正在差量编译...<br><span class="hljs-number">15</span>:<span class="hljs-number">45:29.429</span> 项目 &#x27;xxx&#x27; 编译成功。前端运行日志，请另行在小程序开发工具的控制台查看。<br></code></pre></div></td></tr></table></figure><p>setTimeout大法虽好，但是不优雅，30s不保证HbuilderX编译vue能结束</p><h4 id="3-3-6-最终版本-优雅解决uview-ui的报错"><a href="#3-3-6-最终版本-优雅解决uview-ui的报错" class="headerlink" title="3.3.6 最终版本-优雅解决uview-ui的报错"></a>3.3.6 最终版本-优雅解决<code>uview-ui</code>的报错</h4><blockquote><ul><li>这里还是用到了<code>child_process.exec</code>子进程执行，境泽真香定律！</li><li>child_process.exec执行shell可能会遇上<code>Permission denied</code>无权限执行, <code>chmod(u+x, /xx.sh)</code>解决</li></ul></blockquote><p><img src="/assets/img/hbuilderx-tailwindcss/641.png"></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> shell = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;shelljs&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123;exec&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;process.env.UNI_SCRIPT:&quot;</span>, process.<span class="hljs-property">env</span>.<span class="hljs-property">UNI_SCRIPT</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;process.env.NODE_ENV:&quot;</span>, process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span>);<br><br><span class="hljs-keyword">const</span> isDev = process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;development&#x27;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;isDev:&quot;</span>, isDev);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;当前nodejs版本&quot;</span>, process.<span class="hljs-property">version</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">executeTailWindCssSh</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// https://nodejs.org/api/child_process.html#child_processexeccommand-options-callback</span><br><span class="hljs-title function_">exec</span>(<br>isDev ? <span class="hljs-string">&#x27;&quot;./tailwindcss.sh&quot; development&#x27;</span> : <span class="hljs-string">&#x27;&quot;./tailwindcss.sh&quot; production&#x27;</span>,<br>&#123; <span class="hljs-attr">cwd</span>: __dirname, <span class="hljs-attr">shell</span>: <span class="hljs-string">&quot;/bin/bash&quot;</span>, &#125;,<br><span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (error) &#123;  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;[tailwindcss error]&#x27;</span>, error);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;error.stderr:&quot;</span>, stderr);<br><br><span class="hljs-keyword">if</span>(stderr &amp;&amp; stderr.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;Permission denied&quot;</span>)) &#123;<br><span class="hljs-comment">// 给当前user增加运行文件权限</span><br>shell.<span class="hljs-title function_">chmod</span>(<span class="hljs-string">&quot;u+x&quot;</span>, path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./tailwindcss.sh&#x27;</span>));<br><br><span class="hljs-title function_">executeTailWindCssSh</span>();<br>&#125;<br>&#125; <br><br>isDev ? <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`[tailwindcss stdout]: <span class="hljs-subst">$&#123;stdout&#125;</span>`</span>)<br>: <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;[tailwindcss] 生产环境打包完成&#x27;</span>);<br>&#125;<br>);<br>&#125;<br><br><span class="hljs-title function_">executeTailWindCssSh</span>();<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="4-关于小程序中部分class名称转义字符报错"><a href="#4-关于小程序中部分class名称转义字符报错" class="headerlink" title="4. 关于小程序中部分class名称转义字符报错"></a>4. 关于小程序中部分class名称转义字符报错</h2><p>报错如下图：</p><p><img src="/assets/img/hbuilderx-tailwindcss/642.png"></p><p>解决：使用<a href="https://www.craft.me/s/Wx2f9cjGwyZYOx/b/8FAEAC64-E760-4915-9582-C0560E2972D9/%E2%9A%99%EF%B8%8F-%E5%B8%B8%E8%A7%84-Webpack-%E7%B1%BB%E5%B0%8F%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%BB%A5-MPX-%E4%B8%BA%E4%BE%8B%EF%BC%89">@dcasia&#x2F;mini-program-tailwind-webpack-plugin</a> webpack 插件解决</p><ol><li><p>安装</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i @dcasia/mini-program-tailwind-webpack-plugin -D<br></code></pre></div></td></tr></table></figure></li><li><p>配置</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// vue.config.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MiniProgramTailwindWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@dcasia/mini-program-tailwind-webpack-plugin&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-attr">configureWebpack</span>: &#123;<br><span class="hljs-attr">plugins</span>: [<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniProgramTailwindWebpackPlugin</span>(&#123;&#125;)<br>]<br>&#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>这样就ok了，如果需要深入自定义些，可以引入<a href="https://github.com/dcasia/mini-program-tailwind/blob/development/src/index.ts">mini-program-tailwind</a>的<code>handleTemplate</code>和<code>handleStyle</code>方法，自定义一个webpacka plugin</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; handleTemplate, handleStyle &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@dcasia/mini-program-tailwind-webpack-plugin/universal-handler&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isStyleFile</span> (filename) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-regexp">/.+\.(?:wx|ac|jx|tt|q|c)ss$/</span>.<span class="hljs-title function_">test</span>(filename);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isTemplateFile</span>(<span class="hljs-params">filename</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-regexp">/.+\.(wx|ax|jx|ks|tt|q)ml$/</span>.<span class="hljs-title function_">test</span>(filename);<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TailwindCssClassRenamePlugin</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = &#123; <br><span class="hljs-attr">enableRpx</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">designWidth</span>: <span class="hljs-number">375</span>,<br>&#125;<br>&#125;<br><br>  <span class="hljs-title function_">apply</span>(<span class="hljs-params">compiler</span>) &#123;<br>  <span class="hljs-comment">// const isWebpackV5 = compiler.webpack &amp;&amp; compiler.webpack.version &gt;= 5;</span><br>  <br>    <span class="hljs-comment">// 指定一个挂载到 compilation 的钩子，回调函数的参数为 compilation 。</span><br>    compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">thisCompilation</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&#x27;tailwind-css-class-rename-plugin&#x27;</span>,<span class="hljs-function"><span class="hljs-params">compilation</span> =&gt;</span> &#123;<br>            compilation.<span class="hljs-property">hooks</span>.<span class="hljs-property">afterOptimizeAssets</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&#x27;tailwind-css-class-rename-plugin&#x27;</span>, <span class="hljs-function"><span class="hljs-params">assets</span> =&gt;</span> &#123;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> pathname <span class="hljs-keyword">in</span> assets) &#123;<br><span class="hljs-keyword">const</span> originalSource = assets[ pathname ]<br><span class="hljs-keyword">const</span> rawSource = originalSource.<span class="hljs-title function_">source</span>().<span class="hljs-title function_">toString</span>()<br><br><span class="hljs-keyword">let</span> handledSource = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_">isStyleFile</span>(pathname)) &#123;<br><span class="hljs-comment">// 处理样式文件</span><br>                <span class="hljs-comment">// ...添加自己额外的处理</span><br>handledSource = <span class="hljs-title function_">handleStyle</span>(rawSource, <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isTemplateFile</span>(pathname)) &#123;<br><span class="hljs-comment">// 处理模板文件</span><br><span class="hljs-comment">// ...添加自己额外的处理</span><br><br>handledSource = <span class="hljs-title function_">handleTemplate</span>(rawSource, <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (handledSource) &#123;<br><br><span class="hljs-keyword">const</span> source = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcatSource</span>(handledSource)<br><br>compilation.<span class="hljs-title function_">updateAsset</span>(pathname, source)<br><br>&#125;<br>    <br>                    &#125;<br>    <br>                &#125;<br>    <br>            )<br>    <br>        &#125;<br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-attr">configureWebpack</span>: &#123;<br><span class="hljs-attr">plugins</span>: [<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">TailwindCssClassRenamePlugin</span>()<br>]<br>&#125;<br>&#125;;<br><br></code></pre></div></td></tr></table></figure><h2 id="5-关于rem转rpx"><a href="#5-关于rem转rpx" class="headerlink" title="5. 关于rem转rpx"></a>5. 关于rem转rpx</h2><ol><li><p>其实上面的<code>@dcasia/mini-program-tailwind-webpack-plugin/universal-handler</code>插件中的<code>handleStyle</code>方法已经自动帮我们处理了rem转rpx</p></li><li><p>也可以使用<a href="https://weapp-tw.icebreaker.top/docs/quick-start/rem2rpx#2-tailwindcss-rem2px-preset">tailwindcss-rem2px-preset</a>插件，或者<a href="https://weapp-tw.icebreaker.top/docs/quick-start/rem2rpx#1-postcss-rem-to-responsive-pixel-%E6%8E%A8%E8%8D%90">postcss-rem-to-responsive-pixel</a>插件，<br>它们的区别就是<code>tailwindcss-rem2px-preset</code>只是把tailwindcss那些样式class从rem转为rpx，而<code>postcss-rem-to-responsive-pixel</code>是把项目中所有的rem都转为rpx，根据自己的项目进行选择</p></li><li><p>因为这里是使用的<code>HbuilderX</code>方式创建的项目，所以选择了<code>tailwindcss-rem2px-preset</code>，而<code>postcss-rem-to-responsive-pixel</code>是在<code>postcss.config.js</code>配置文件里配置的</p></li></ol><p>4 <code>tailwindcss-rem2px-preset</code>的安装和使用</p><ul><li><p>安装</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">npm <span class="hljs-selector-tag">i</span> -D postcss-rem-<span class="hljs-selector-tag">to</span>-responsive-pixel<br></code></pre></div></td></tr></table></figure></li><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// tailwind.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">presets</span>: [<br>    <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;tailwindcss-rem2px-preset&#x27;</span>).<span class="hljs-title function_">createPreset</span>(&#123;<br>      <span class="hljs-comment">// 32 意味着 1rem = 32rpx</span><br>      <span class="hljs-attr">fontSize</span>: <span class="hljs-number">32</span>,<br>      <span class="hljs-comment">// 转化的单位,可以变成 px / rpx</span><br>      <span class="hljs-attr">unit</span>: <span class="hljs-string">&#x27;rpx&#x27;</span><br>    &#125;)<br>  ]<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="6-关于部分tailwindcss未生效"><a href="#6-关于部分tailwindcss未生效" class="headerlink" title="6. 关于部分tailwindcss未生效"></a>6. 关于部分tailwindcss未生效</h2><p>如果没有在<code>tailwind.config.js</code>中配置<code>tailwindcss-rem2px-preset</code>这个预设，会发现页面中所有的tailwindcss都未生效，报错是没有了，但是有一部分class样式都没有被引入到项目中，只是在wxml上写了一个空样式</p><p><img src="/assets/img/hbuilderx-tailwindcss/643.png"></p><p>解决：这个时候只要在<code>tailwind.config.js</code>中配置<code>tailwindcss-rem2px-preset</code>这个预设，就ok了</p><h2 id="7-参考资料"><a href="#7-参考资料" class="headerlink" title="7.参考资料"></a>7.参考资料</h2><ol><li><p><a href="https://ask.dcloud.net.cn/article/40098">Hbuilder创建的uniapp工程，使用tailwindcss最优雅的方式</a></p></li><li><p><a href="https://www.npmjs.com/package/shelljs">shelljs</a></p></li><li><p><a href="https://nodejs.org/api/child_process.html#child_processexeccommand-options-callback">child_process.exec</a></p></li><li><p><a href="https://www.tailwindcss.cn/docs/installation">Tailwind CLI</a></p></li><li><p><a href="https://weapp-tw.icebreaker.top/">weapp-tailwindcss</a></p></li><li><p><a href="https://www.craft.me/s/Wx2f9cjGwyZYOx">Tailwind &amp; Windi CSS Webpack plugin</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>uniapp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uniapp</tag>
      
      <tag>微信小程序</tag>
      
      <tag>HBuilderX</tag>
      
      <tag>tailwindcss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Native Android 端Headless JS后台 GPS 持续定位</title>
    <link href="/2023/07/11/react-native-headless-js/"/>
    <url>/2023/07/11/react-native-headless-js/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://github.com/sRect/reactNativeBlogApp/commit/f328f51c9686da68d04c24bdaa43ef0ffe73b332">本文github 仓库</a></li><li><a href="https://juejin.cn/post/7254811625055944762">本文掘金链接</a></li></ul><h2 id="1-写在前面"><a href="#1-写在前面" class="headerlink" title="1. 写在前面"></a>1. 写在前面</h2><p>有J友在掘金私信我，react native android中，app在后台如何持续获取位置信息，还有headless js中setTimeout没有按预期执行两个问题。问我有什么解决方法，当时我就懵逼了，这不是触及到我装X盲区了吗，况且我只是js菜鸡，不会android，难受！</p><h2 id="2-本文主要-package-version"><a href="#2-本文主要-package-version" class="headerlink" title="2. 本文主要 package version"></a>2. 本文主要 package version</h2><table><thead><tr><th>package</th><th align="center">version</th></tr></thead><tbody><tr><td>react</td><td align="center">18.2.0</td></tr><tr><td>react-native</td><td align="center">0.71.2</td></tr><tr><td>@react-native-community&#x2F;geolocation</td><td align="center">^3.0.5</td></tr></tbody></table><ul><li>当前react native最新版本是v0.72</li></ul><h2 id="3-前置基础"><a href="#3-前置基础" class="headerlink" title="3. 前置基础"></a>3. 前置基础</h2><ol><li>React 基础</li><li><a href="https://www.reactnative.cn/docs/native-modules-android">React Native Android 原生模块</a>，已经跟着文档，在js中调用android暴露的方法</li></ol><h2 id="4-初步了解Headless-JS"><a href="#4-初步了解Headless-JS" class="headerlink" title="4. 初步了解Headless JS"></a>4. 初步了解Headless JS</h2><blockquote><p><a href="https://www.reactnative.cn/docs/headless-js-android">Headless JS文档</a></p></blockquote><ol><li><p>Headless JS 是一种使用 js 在后台执行任务的方法。它可以用来在后台同步数据、处理推送通知或是播放音乐等等。</p></li><li><p>可以在任务中处理任何事情（网络请求、定时器等），但**<code>不要涉及UI界面</code>**</p></li><li><p><code>The function passed to setTimeout does not always behave as expected. Instead the function is called only when the application is launched again. If you just need to wait, use the retry functionality</code>，文档这里已经说明，headless js中<code>setTimeout</code>不会按预期执行，而是会在app再次启动的时候才执行(就是app切到后台时，不会执行，切回前台的时候才执行)，那用什么代替setTimout呢？下面会讲到。</p></li><li><p>Headless JS中发起网络请求，经过实际测试，完全没问题的</p></li><li><p>还有，<strong>app进程被杀掉(人为主动杀掉和系统资源优化掉)，Headless JS后台任务也会停止</strong>，这里不讨论进程被杀掉还能继续执行后台任务</p></li></ol><h2 id="5-使用Headless-JS的姿势"><a href="#5-使用Headless-JS的姿势" class="headerlink" title="5. 使用Headless JS的姿势"></a>5. 使用Headless JS的姿势</h2><blockquote><p>在<a href="https://juejin.cn/post/7234407587118530597#heading-25">React Native 练习时长 2 月半，踩坑总结</a>文章中有涉及到使用Headless JS后台播放raw本地音频文件，那里是使用<code>AppRegistry.startHeadlessTask(taskId, taskKey, data)</code>api开始后台任务的，在官方文档中有提到在<code>service</code>中启动，但是步骤都不是非常详细</p></blockquote><h3 id="5-1-使用AppRegistry-startHeadlessTask-api启动Headless-js后台任务"><a href="#5-1-使用AppRegistry-startHeadlessTask-api启动Headless-js后台任务" class="headerlink" title="5.1 使用AppRegistry.startHeadlessTask api启动Headless js后台任务"></a>5.1 使用<code>AppRegistry.startHeadlessTask</code> api启动Headless js后台任务</h3><p>具体步骤，详见<a href="https://juejin.cn/post/7234407587118530597#heading-29">这篇文章-7.4章节app后台播放音频示例步骤</a>，每一步都很详细，对着步骤来。</p><h3 id="5-2-通过android-WorkManager中调用services，启动Headless-js后台任务"><a href="#5-2-通过android-WorkManager中调用services，启动Headless-js后台任务" class="headerlink" title="5.2 通过android WorkManager中调用services，启动Headless js后台任务"></a>5.2 通过<code>android WorkManager</code>中调用<code>services</code>，启动Headless js后台任务</h3><blockquote><p>怎么突然又冒出来<code>WorkManager</code>了？没办法啊，按着文档那种方式来，Headless JS中代码不执行，下面步骤1代码中会提到</p></blockquote><p><code>WokerManager</code>是什么？</p><p><a href="https://blog.logrocket.com/run-react-native-background-tasks-headless-js/"><code>WorkManager is the recommended way to perform background tasks in Android. WorkManager can schedule one-time or periodic tasks in a simple, reliable way.</code></a></p><p>意思就是说，WorkManager是android中推荐执行后台任务的方式，可以执行一次性任务和定时任务。</p><ol><li><code>android/app/src/main/java/com/your-app-name/BackgroundPosition.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.your-app-name;<br><br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactApplicationContext;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactContext;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactContextBaseJavaModule;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactMethod;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.Promise;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.WritableMap;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.Arguments;<br><span class="hljs-keyword">import</span> com.facebook.react.modules.core.DeviceEventManagerModule;<br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.app.ActivityManager;<br><br><span class="hljs-keyword">import</span> androidx.work.ExistingPeriodicWorkPolicy; <br><span class="hljs-keyword">import</span> androidx.work.PeriodicWorkRequest;<br><span class="hljs-keyword">import</span> androidx.work.WorkManager;<br><br><span class="hljs-keyword">import</span> java.util.Timer;<br><span class="hljs-keyword">import</span> java.util.TimerTask;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> javax.annotation.Nullable;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BackgroundPosition</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ReactContextBaseJavaModule</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ReactApplicationContext reactContext;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">Timer</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//计时器</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">TimerTask</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// private LocationManager locationManager; </span><br>  <span class="hljs-comment">// private LocationListener locationListener; </span><br>  <span class="hljs-keyword">private</span> PeriodicWorkRequest workRequest;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAGERROR</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;START_BACKGROUND_TASK_ERROR&quot;</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">BackgroundPosition</span><span class="hljs-params">(ReactApplicationContext context)</span> &#123;<br>    <span class="hljs-built_in">super</span>(context);<br>    reactContext = context;<br><br>    workRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PeriodicWorkRequest</span>.Builder(BackgroundPositionWorker.class, <span class="hljs-number">15</span>, TimeUnit.MINUTES).build();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;BackgroundPosition&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendEvent</span><span class="hljs-params">(ReactContext reactContext, String eventName, <span class="hljs-meta">@Nullable</span> WritableMap params)</span> &#123;<br>    reactContext<br>        .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)<br>        .emit(eventName, params);<br>  &#125;<br><br>  <span class="hljs-meta">@ReactMethod</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addListener</span><span class="hljs-params">(String eventName)</span> &#123;<br>    <span class="hljs-comment">// Set up any upstream listeners or background tasks as necessary</span><br>  &#125;<br>  <span class="hljs-meta">@ReactMethod</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeListeners</span><span class="hljs-params">(Integer count)</span> &#123;<br>    <span class="hljs-comment">// Remove upstream listeners, stop unnecessary background tasks</span><br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAppOnForeground</span><span class="hljs-params">(Context context)</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">      我们需要先检查应用当前是否在前台运行，否则应用会崩溃。</span><br><span class="hljs-comment">      http://stackoverflow.com/questions/8489993/check-android-application-is-in-foreground-or-not</span><br><span class="hljs-comment">    **/</span><br>    <span class="hljs-type">ActivityManager</span> <span class="hljs-variable">activityManager</span> <span class="hljs-operator">=</span> (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);<br>    List&lt;ActivityManager.RunningAppProcessInfo&gt; appProcesses =<br>    activityManager.getRunningAppProcesses();<br>    <span class="hljs-keyword">if</span> (appProcesses == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">packageName</span> <span class="hljs-operator">=</span> context.getPackageName();<br>    <span class="hljs-keyword">for</span> (ActivityManager.RunningAppProcessInfo appProcess : appProcesses) &#123;<br>        <span class="hljs-keyword">if</span> (appProcess.importance ==<br>        ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND &amp;&amp;<br>          appProcess.processName.equals(packageName)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@ReactMethod</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startBackgroudTask</span><span class="hljs-params">(Promise promise)</span> &#123;<br>    <span class="hljs-keyword">if</span>(timer!=<span class="hljs-literal">null</span>) &#123;<br>      timer.cancel();<br>      timer=<span class="hljs-literal">null</span>;<br>    &#125;<br><br>    timer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br>    task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-keyword">if</span>(!isAppOnForeground(reactContext)) &#123;<br>            <span class="hljs-type">WritableMap</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> Arguments.createMap();<br>            params.putString(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;app已经在后台了，准备启动BackgroundPostionWorker&quot;</span>);<br>            sendEvent(reactContext, <span class="hljs-string">&quot;backgroundTask&quot;</span>, params);<br><br>            <span class="hljs-comment">// 上面讲到为什么要冒出来WorkManager，就是因为这里</span><br>            <span class="hljs-comment">// 直接在js中调用startBackgroudTask，执行reactContext.startService(service)</span><br>            <span class="hljs-comment">// 但是headless js中的任务不执行</span><br>            <span class="hljs-comment">// 所以这里通过WorkManager开始一个work任务，然后在work中启动startService</span><br><br>            <span class="hljs-comment">// Intent service = new Intent(reactContext, BackgroundPositionServices.class);</span><br>            <span class="hljs-comment">// // service.putExtra(&quot;backgroundTask&quot;, &quot;123&quot;);</span><br>            <span class="hljs-comment">// // reactContext.startService(service);</span><br><br>            <span class="hljs-comment">// Bundle bundle = new Bundle();</span><br>            <span class="hljs-comment">// bundle.putString(&quot;foo&quot;, &quot;bar&quot;);</span><br>            <span class="hljs-comment">// service.putExtras(bundle);</span><br><br>            <span class="hljs-comment">// // if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br>            <span class="hljs-comment">// //   reactContext.startForegroundService(service);</span><br>            <span class="hljs-comment">// // &#125; else &#123;</span><br>            <span class="hljs-comment">// //   reactContext.startService(service);</span><br>            <span class="hljs-comment">// // &#125;</span><br><br>            <span class="hljs-comment">// reactContext.startService(service);</span><br>            <span class="hljs-comment">// // HeadlessJsTaskService.acquireWakeLockNow(reactContext);</span><br><br>            WorkManager.getInstance().enqueueUniquePeriodicWork(<span class="hljs-string">&quot;BackgroundPositionWorker&quot;</span>, ExistingPeriodicWorkPolicy.KEEP, workRequest);<br><br>            <span class="hljs-type">WritableMap</span> <span class="hljs-variable">params2</span> <span class="hljs-operator">=</span> Arguments.createMap();<br>            params2.putString(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;BackgroundPostionWorker started&quot;</span>);<br>            promise.resolve(params2);<br>          &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          e.printStackTrace();<br>          promise.reject(TAGERROR, e);<br>        &#125;<br>      &#125;<br>    &#125;;<br>    <span class="hljs-comment">// 3s后执行1次</span><br>    timer.schedule(task, <span class="hljs-number">3000</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@ReactMethod</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stopBackgroudTask</span><span class="hljs-params">(Promise promise)</span> &#123;<br>    <span class="hljs-keyword">if</span>(timer!=<span class="hljs-literal">null</span>) &#123;<br>      timer.cancel();<br>      timer=<span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// if(locationManager != null &amp;&amp; locationListener != null) &#123;</span><br>    <span class="hljs-comment">//   locationManager.removeUpdates(locationListener);</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-type">WritableMap</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> Arguments.createMap();<br>    params.putString(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;BackgroundPostionWorker stop successed&quot;</span>);<br><br>    WorkManager.getInstance().cancelUniqueWork(<span class="hljs-string">&quot;BackgroundPositionWorker&quot;</span>);<br>    promise.resolve(params);<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="2"><li><code>android/app/src/main/java/com/your-app-name/BackgroundPositionPackage.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.your-app-name;<br><br><span class="hljs-keyword">import</span> com.facebook.react.ReactPackage;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.NativeModule;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactApplicationContext;<br><span class="hljs-keyword">import</span> com.facebook.react.uimanager.ViewManager;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BackgroundPositionPackage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ReactPackage</span> &#123;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> List&lt;ViewManager&gt; <span class="hljs-title function_">createViewManagers</span><span class="hljs-params">(ReactApplicationContext reactContext)</span> &#123;<br>    <span class="hljs-keyword">return</span> Collections.emptyList();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> List&lt;NativeModule&gt; <span class="hljs-title function_">createNativeModules</span><span class="hljs-params">(ReactApplicationContext reactContext)</span> &#123;<br>    List&lt;NativeModule&gt; modules = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    modules.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BackgroundPosition</span>(reactContext));<br><br>    <span class="hljs-keyword">return</span> modules;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="3"><li><code>android/app/src/main/java/com/your-app-name/MainApplication.java</code></li></ol><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-addition">+ import com.your-app-name.BackgroundPositionPackage;</span><br><br>public class MainApplication extends Application implements ReactApplication &#123;<br>    ...<br>    @Override<br>    protected List&lt;ReactPackage&gt; getPackages() &#123;<br>      @SuppressWarnings(&quot;UnnecessaryLocalVariable&quot;)<br>      List&lt;ReactPackage&gt; packages = new PackageList(this).getPackages();<br><br><span class="hljs-addition">+     packages.add(new BackgroundPositionPackage());// &lt;-- 添加这一行，类名替换成你的Package类的名字 name.</span><br>      return packages;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="4"><li><code>android/app/src/main/java/com/your-app-name/BackgroundPositionServices.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.your-app-name;<br><br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> com.facebook.react.HeadlessJsTaskService;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.Arguments;<br><span class="hljs-keyword">import</span> com.facebook.react.jstasks.HeadlessJsTaskConfig;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.WritableMap;<br><span class="hljs-keyword">import</span> com.facebook.react.jstasks.HeadlessJsTaskRetryPolicy;<br><span class="hljs-keyword">import</span> com.facebook.react.jstasks.LinearCountingRetryPolicy;<br><br><span class="hljs-keyword">import</span> javax.annotation.Nullable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BackgroundPositionServices</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HeadlessJsTaskService</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-meta">@Nullable</span> HeadlessJsTaskConfig <span class="hljs-title function_">getTaskConfig</span><span class="hljs-params">(Intent intent)</span> &#123;<br>    <span class="hljs-type">Bundle</span> <span class="hljs-variable">extras</span> <span class="hljs-operator">=</span> intent.getExtras();<br>    <span class="hljs-type">WritableMap</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> extras != <span class="hljs-literal">null</span> ? Arguments.fromBundle(extras) : Arguments.createMap();<br>    <span class="hljs-comment">// https://github.com/eduardomota/smsgate/blob/803f775ae419db2aea63aeac5def15eb0ec28542/smsrelay2/android/app/src/main/java/com/smsrelay2/SmsEventService.java</span><br>    <span class="hljs-type">LinearCountingRetryPolicy</span> <span class="hljs-variable">retryPolicy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinearCountingRetryPolicy</span>(<br>      <span class="hljs-number">3</span>, <span class="hljs-comment">// Max number of retry attempts</span><br>      <span class="hljs-number">1000</span> <span class="hljs-comment">// Delay between each retry attempt</span><br>    );<br><br>    <span class="hljs-comment">// if (extras != null) &#123;</span><br>    <span class="hljs-comment">//   return new HeadlessJsTaskConfig(</span><br>    <span class="hljs-comment">//       &quot;BackgroundTask&quot;,</span><br>    <span class="hljs-comment">//       Arguments.fromBundle(extras),</span><br>    <span class="hljs-comment">//       5000, // 任务的超时时间</span><br>    <span class="hljs-comment">//       false // 可选参数：是否允许任务在前台运行，默认为false</span><br>    <span class="hljs-comment">//     );</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeadlessJsTaskConfig</span>(<br>      <span class="hljs-string">&quot;BackgroundPosition&quot;</span>,<br>      data,<br>      <span class="hljs-number">10000</span>, <span class="hljs-comment">// 任务的超时时间</span><br>      <span class="hljs-literal">false</span>, <span class="hljs-comment">// 可选参数：是否允许任务在前台运行，默认为false</span><br>      retryPolicy<br>    );<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="5"><li><code>android/app/src/main/java/com/your-app-name/BackgroundPositionWorker.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.your-app-name;<br><br><span class="hljs-keyword">import</span> androidx.annotation.NonNull;<br><span class="hljs-keyword">import</span> androidx.work.Worker; <br><span class="hljs-keyword">import</span> androidx.work.WorkerParameters;<br><br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.content.Context;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BackgroundPositionWorker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Worker</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BackgroundPositionWorker</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@NonNull</span> Context context, </span><br><span class="hljs-params">        <span class="hljs-meta">@NonNull</span> WorkerParameters workerParams)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, workerParams);<br>    &#125;<br><br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">doWork</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(getApplicationContext(), BackgroundPositionServices.class);<br>        <span class="hljs-type">Bundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bundle</span>();<br>        bundle.putString(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;backgroundPosition start&quot;</span>);<br>        service.putExtras(bundle);<br>        getApplicationContext().startService(service);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="6"><li><code>android/app/src/main/AndroidManifest.xml</code>中添加权限</li></ol><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">...<br>+ <span class="hljs-comment">&lt;!-- 精确定位 --&gt;</span><br>+ <span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span>/&gt;</span><br>+ <span class="hljs-comment">&lt;!-- 模糊定位 --&gt;</span><br>+ <span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_COARSE_LOCATION&quot;</span> /&gt;</span><br>+ <span class="hljs-comment">&lt;!-- 后台定位 --&gt;</span><br>+ <span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_BACKGROUND_LOCATION&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">application</span>&gt;</span> <br>    ... <br>    + <span class="hljs-tag">&lt;<span class="hljs-name">service</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.your-app-name.BackgroundPositionServices&quot;</span> /&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="7"><li><code>index.js</code>中注册后台任务</li></ol><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff">import &#123;AppRegistry&#125; from &#x27;react-native&#x27;;<br>import App from &#x27;./App&#x27;;<br>import &#123;name as appName&#125; from &#x27;./app.json&#x27;;<br><span class="hljs-addition">+ import &#123;backgroundPosition&#125; from &#x27;./src/utils&#x27;;</span><br><br>AppRegistry.registerComponent(appName, () =&gt; App);<br><span class="hljs-addition">+ AppRegistry.registerHeadlessTask(&#x27;BackgroundPosition&#x27;, () =&gt; backgroundPosition);</span><br></code></pre></div></td></tr></table></figure><ol start="8"><li><code>src/utils/backgroundPosition.js</code>后台任务具体代码</li></ol><ul><li><p>这里使用<code>@react-native-async-storage/async-storage</code>的<code>Geolocation.watchPosition</code>来监测位置变化，您也可以在android中开启一个定时任务，然后发送位置给js端</p></li><li><p>刚开始没注意到有<code>watchPosition</code>这个api，定时执行<code>Geolocation.getCurrentPosition</code>这个api来获取，当app切换到后台时，没看到手机顶部位置有定位图标，而<code>watchPosition</code>这个api执行的时候，app在后台的时候，手机顶部有定位图标，就和使用百度地图时一样。</p></li><li><p>这里将gps位置通过<a href="https://react-native-async-storage.github.io/async-storage/docs/api/#clear"><code>@react-native-async-storage/async-storage</code></a>存储在本地</p></li><li><p>gps位置坐标google地图可以直接使用，而要在高德或者百度地图中使用要转换，怎么转换，可以使用<a href="https://link.juejin.cn/?target=https://lbs.amap.com/api/webservice/guide/api/convert">高德坐标转换</a>，或者<a href="https://www.jianshu.com/p/dd0c017250e4">GPS坐标转高德地标（火星坐标&#x2F;国测坐标）脚本转换</a></p></li><li><p>或者这里干脆就使用其他模块，直接获取高德或者百度地图坐标，例如<a href="https://www.npmjs.com/package/react-native-amap-geolocation"><code>react-native-amap-geolocation</code></a>，但这个库我没测试使用过</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">InteractionManager</span>, <span class="hljs-title class_">AppState</span>, <span class="hljs-title class_">NativeModules</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-native&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Geolocation</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@react-native-community/geolocation&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AsyncStorage</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@react-native-async-storage/async-storage&#x27;</span>;<br><span class="hljs-keyword">import</span> dayjs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dayjs&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">BackgroundPosition</span> = <span class="hljs-title class_">NativeModules</span>.<span class="hljs-property">BackgroundPosition</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleListenerAppState</span>(<span class="hljs-params">watchId = <span class="hljs-number">0</span></span>) &#123;<br>  <span class="hljs-keyword">const</span> subscription = <span class="hljs-title class_">AppState</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-function"><span class="hljs-params">nextAppState</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;nextAppState&#x27;</span>, nextAppState);<br>    <span class="hljs-keyword">if</span> (nextAppState === <span class="hljs-string">&#x27;active&#x27;</span>) &#123;<br>      flag = <span class="hljs-literal">false</span>;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;app回到前台，后台任务停止&#x27;</span>);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;watchId:&#x27;</span>, watchId);<br>      <span class="hljs-title class_">BackgroundPosition</span>.<span class="hljs-title function_">stopBackgroudTask</span>();<br>      <span class="hljs-title class_">Geolocation</span>.<span class="hljs-title function_">clearWatch</span>(watchId);<br>      subscription.<span class="hljs-title function_">remove</span>();<br>    &#125;<br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">backgroundPosition</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title class_">AsyncStorage</span>.<span class="hljs-title function_">clear</span>();<br><br>  <span class="hljs-keyword">const</span> handle = <span class="hljs-title class_">InteractionManager</span>.<span class="hljs-title function_">createInteractionHandle</span>();<br>  <span class="hljs-title class_">InteractionManager</span>.<span class="hljs-title function_">runAfterInteractions</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// ...需要长时间同步执行的任务...</span><br>    <span class="hljs-comment">// getCurrentPosition();</span><br>    <span class="hljs-keyword">let</span> watchPositionId = <span class="hljs-title class_">Geolocation</span>.<span class="hljs-title function_">watchPosition</span>(<br>      <span class="hljs-keyword">async</span> info =&gt; &#123;<br>        <span class="hljs-keyword">const</span> &#123;<br>          <span class="hljs-attr">coords</span>: &#123;latitude, longitude&#125;,<br>        &#125; = info;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;当前位置：&#x27;</span>, latitude, longitude);<br><br>        <span class="hljs-keyword">let</span> locationListStr = <span class="hljs-keyword">await</span> <span class="hljs-title class_">AsyncStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;location&#x27;</span>);<br>        <span class="hljs-keyword">let</span> locationObj =<br>          locationListStr === <span class="hljs-literal">null</span> ? &#123;<span class="hljs-attr">list</span>: []&#125; : <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(locationListStr);<br>        locationObj.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(&#123;<br>          latitude,<br>          longitude,<br>          <span class="hljs-attr">date</span>: <span class="hljs-title function_">dayjs</span>().<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>),<br>        &#125;);<br><br>        <span class="hljs-keyword">await</span> <span class="hljs-title class_">AsyncStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;location&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(locationObj));<br>      &#125;,<br>      <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&#x27;获取定位失败==&gt;&#x27;</span>, err);<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">interval</span>: <span class="hljs-number">5000</span>, <span class="hljs-comment">// 每5s更新一次位置</span><br>        <span class="hljs-attr">timeout</span>: <span class="hljs-number">10000</span>, <span class="hljs-comment">// 获取一个位置，10s钟超时</span><br>        <span class="hljs-attr">maximumAge</span>: <span class="hljs-number">15000</span>, <span class="hljs-comment">// 可能缓存位置的最长时间(以毫秒为单位)</span><br>        <span class="hljs-attr">enableHighAccuracy</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 使用GPS</span><br>        <span class="hljs-attr">distanceFilter</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 返回一个新位置之前，与前一个位置的最小距离。设置为0表示不过滤位置。默认为100m。</span><br>        <span class="hljs-comment">// useSignificantChanges?: boolean; // 只有当设备检测到一个重要的距离已经被突破时，才会返回位置。默认为FALSE。</span><br>      &#125;,<br>    );<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;watchPositionId:&#x27;</span>, watchPositionId);<br>    <span class="hljs-title function_">handleListenerAppState</span>(watchPositionId);<br>  &#125;);<br><br>  <span class="hljs-title class_">InteractionManager</span>.<span class="hljs-title function_">clearInteractionHandle</span>(handle);<br>  <span class="hljs-comment">// return await Promise.resolve();</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="9"><li>页面UI中点击某按钮执行后台任务</li></ol><ul><li><p>Android 10（API 级别 29）中，新增了ACCESS_BACKGROUND_LOCATION后台权限</p></li><li><p>在android 11级以上版本需要先申请ACCESS_COARSE_LOCATIO和ACCESS_FINE_LOCATION后, 再申请ACCESS_BACKGROUND_LOCATION权限，才能确保前台访问位置权限和后台访问位置权限正常</p></li><li><p>如果同时申请这三个权限时不会弹窗，系统会忽略权限请求，不会授予其中的任一权限。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">BackgroundPosition</span> = <span class="hljs-title class_">NativeModules</span>.<span class="hljs-property">BackgroundPosition</span>;<br><span class="hljs-comment">// 申请定位权限</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleAndroidPositionPermission</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// https://juejin.cn/post/7058265721540706311</span><br>    <span class="hljs-comment">// android 11及以上版本申请权限时系统对话框不存在始终允许的选项，并且只能够在系统设置页面打开后台权限。</span><br><br>    <span class="hljs-keyword">const</span> granted1 = <span class="hljs-keyword">await</span> <span class="hljs-title class_">PermissionsAndroid</span>.<span class="hljs-title function_">requestMultiple</span>([<br>      <span class="hljs-title class_">PermissionsAndroid</span>.<span class="hljs-property">PERMISSIONS</span>.<span class="hljs-property">ACCESS_FINE_LOCATION</span>,<br>      <span class="hljs-title class_">PermissionsAndroid</span>.<span class="hljs-property">PERMISSIONS</span>.<span class="hljs-property">ACCESS_COARSE_LOCATION</span>,<br>    ]);<br><br>    <span class="hljs-keyword">const</span> granted2 = <span class="hljs-keyword">await</span> <span class="hljs-title class_">PermissionsAndroid</span>.<span class="hljs-title function_">request</span>(<br>      <span class="hljs-title class_">PermissionsAndroid</span>.<span class="hljs-property">PERMISSIONS</span>.<span class="hljs-property">ACCESS_BACKGROUND_LOCATION</span>,<br>    );<br><br>    <span class="hljs-keyword">if</span> (<br>      granted1[<span class="hljs-string">&#x27;android.permission.ACCESS_FINE_LOCATION&#x27;</span>] ===<br>        <span class="hljs-title class_">PermissionsAndroid</span>.<span class="hljs-property">RESULTS</span>.<span class="hljs-property">GRANTED</span> &amp;&amp;<br>      granted1[<span class="hljs-string">&#x27;android.permission.ACCESS_COARSE_LOCATION&#x27;</span>] ===<br>        <span class="hljs-title class_">PermissionsAndroid</span>.<span class="hljs-property">RESULTS</span>.<span class="hljs-property">GRANTED</span> &amp;&amp;<br>      granted2 === <span class="hljs-title class_">PermissionsAndroid</span>.<span class="hljs-property">RESULTS</span>.<span class="hljs-property">GRANTED</span><br>    ) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;可以定位了&#x27;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;拒绝获取定位权限&#x27;</span>);<br>      <span class="hljs-title class_">Toast</span>.<span class="hljs-title function_">fail</span>(&#123;<br>        <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;拒绝获取定位权限&quot;</span>,<br>        <span class="hljs-attr">duration</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">stackable</span>: <span class="hljs-literal">true</span>,<br>      &#125;);<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(&#123;<span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;拒绝获取定位权限&#x27;</span>&#125;);<br>    &#125;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(error);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>();<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleBackgroundTask</span> = <span class="hljs-keyword">async</span> type =&gt; &#123;<br>  <span class="hljs-comment">// 点击按钮后，将app切换到后台，即可执行后台任务，</span><br>  <span class="hljs-comment">// 或者这里通过AppState监听，app在后台，自动执行后台任务</span><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;start&#x27;</span>) &#123;<br>      <span class="hljs-comment">// 申请定位权限</span><br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">handleAndroidPositionPermission</span>();<br>      <span class="hljs-comment">// 开始后台任务</span><br>      <span class="hljs-keyword">await</span> <span class="hljs-title class_">BackgroundPosition</span>.<span class="hljs-title function_">startBackgroudTask</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 结束后台任务</span><br>      <span class="hljs-keyword">await</span> <span class="hljs-title class_">BackgroundPosition</span>.<span class="hljs-title function_">stopBackgroudTask</span>();<br>    &#125;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;handleBackgroundTask error&#x27;</span>, error);<br>  &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="6-实际测试结果和存在的问题"><a href="#6-实际测试结果和存在的问题" class="headerlink" title="6. 实际测试结果和存在的问题"></a>6. 实际测试结果和存在的问题</h2><blockquote><p>测试机型小米10，android13</p></blockquote><ol><li>开启后台任务后，手机锁屏，执行20分钟后，app被系统自己杀掉了，如果是在持续玩手机，app没被系统杀掉，可能和手机的省电策略有关；</li><li>坐标保存不是很多，甚至出现中途有20分钟没保存坐标，不知道什么原因；</li><li>保存的gps坐标，在google地图上和活动轨迹大概吻合，但是误差有点大；</li><li>可能是<code>@react-native-async-storage/async-storage</code>的<code>watchPosition</code>有问题，需要自定义一个实时获取坐标的安卓原生模块对比测试下</li></ol><h2 id="7-关于在Headless-JS中如何执行setTimeout"><a href="#7-关于在Headless-JS中如何执行setTimeout" class="headerlink" title="7. 关于在Headless JS中如何执行setTimeout?"></a>7. 关于在Headless JS中如何执行<code>setTimeout</code>?</h2><p>ISSUE里搜了下，也没什么关键信息，甚至显示有人已经提交过PR了</p><p><img src="/assets/img/react-native-headless-js/setTimeout.png" alt="setTimeout.png"></p><ol><li><p>那使用<code>requestAnimationFrame</code>呢？经过实际测试，有时候执行，有时候不执行</p></li><li><p><code>setInterval</code>和<code>setImmediate</code>也不行</p></li><li><p>使用while循环，自己实现一个setTimeout，配合递归，就是一个setInterval了,经过实际测试，可行</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> sleep = <span class="hljs-keyword">function</span> (<span class="hljs-params">startTime, delay</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> cur = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();<br>    <span class="hljs-keyword">while</span> (cur &lt; startTime + delay) &#123;<br>      cur = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();<br>    &#125;<br>  &#125;;<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-title function_">sleep</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>(), <span class="hljs-number">3000</span>)(); <span class="hljs-comment">// 3S后递归执行下面fun方法</span><br>  <span class="hljs-title function_">fun</span>();<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="8-参考资料"><a href="#8-参考资料" class="headerlink" title="8. 参考资料"></a>8. 参考资料</h2><ol><li><a href="https://www.reactnative.cn/docs/headless-js-android">headless-js中文文档</a></li><li><a href="https://blog.logrocket.com/run-react-native-background-tasks-headless-js/">Run React Native background tasks with Headless JS</a></li><li><a href="https://www.qiniu.com/qfans/qnso-65547466">使用android WorkManager的React Native HeadlessJs任务调用</a></li><li><a href="https://medium.com/the-sixt-india-blog/how-to-run-a-background-task-in-react-native-cd4d36e40bf">How to Run a Background Task in React Native ?</a></li><li><a href="https://juejin.cn/post/7058265721540706311">android位置权限的变更史</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>react native</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
      <tag>react native</tag>
      
      <tag>持续定位</tag>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Native 练习时长 2 月半，踩坑总结</title>
    <link href="/2023/05/23/react-native/"/>
    <url>/2023/05/23/react-native/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://github.com/sRect/reactNativeBlogApp">本文 github 仓库链接</a></li><li><a href="https://juejin.cn/post/7234407587118530597">本文掘金链接</a></li></ul><blockquote><p>本文用 react native 做的 app 很简单，首页 + 列表页 + 详情页 + 关于页。总的感觉，涉及到原生方面，对于不会 android 和 ios 的 js 菜鸡，比较棘手，要折腾。</p></blockquote><p><img src="/assets/img/react-native/1.gif"></p><blockquote><p>关于Headless JS后台任务，可以参考《React Native Android 端Headless JS后台 GPS 持续定位》这篇文章</p></blockquote><h2 id="1-前置基础"><a href="#1-前置基础" class="headerlink" title="1. 前置基础"></a>1. 前置基础</h2><ol><li>React 基础</li><li><a href="https://www.reactnative.cn/">React Native 文档</a></li></ol><h2 id="2-本文主要-package-version"><a href="#2-本文主要-package-version" class="headerlink" title="2. 本文主要 package version"></a>2. 本文主要 package version</h2><blockquote><ol><li>这里页面路由应该使用 <a href="https://reactnavigation.org/docs/getting-started"><code>react-navigation</code></a> 更方便些，react-router-native6.x 版本感觉对 react native 支持不是很好</li><li>对于 UI 库，没找到合适的，找了一个老掉牙的<a href="https://rn.mobile.ant.design/docs/react/introduce-cn"><code>ant-design-react-native</code></a></li></ol></blockquote><table><thead><tr><th>package</th><th align="center">version</th></tr></thead><tbody><tr><td>react</td><td align="center">18.2.0</td></tr><tr><td>react-native</td><td align="center">0.71.2</td></tr><tr><td>react-router-native</td><td align="center">^6.8.0</td></tr><tr><td>react-native-webview</td><td align="center">^11.26.1</td></tr><tr><td>@ant-design&#x2F;react-native</td><td align="center">^5.0.3</td></tr></tbody></table><h2 id="3-关于-React-Native-的一些疑问"><a href="#3-关于-React-Native-的一些疑问" class="headerlink" title="3. 关于 React Native 的一些疑问"></a>3. 关于 React Native 的一些疑问</h2><h3 id="3-1-React-Native-和-Flutter-优缺点对比"><a href="#3-1-React-Native-和-Flutter-优缺点对比" class="headerlink" title="3.1 React Native 和 Flutter 优缺点对比"></a>3.1 React Native 和 Flutter 优缺点对比</h3><blockquote><p>来自 chat gpt 的回答，感觉有些落后啊</p></blockquote><table><thead><tr><th></th><th align="center">优点</th><th>缺点</th></tr></thead><tbody><tr><td>React Native</td><td align="center">1. 拥有大量第三方库和社区支持；<br>2. 可以复用 React 的开发经验,语法上非常接近 React；<br> 3. 支持热重载,开发效率高</td><td>1. 部署和打包过程较复杂；<br>2. 动画和性能体验略逊色于原生；<br>3. 升级过程可能会比较痛苦</td></tr><tr><td>Flutter</td><td align="center">1. 组件丰富,UI 体验接近原；<br>2. 性能很高,特别是动画方面；<br> 3. 打包简单,可以编译成原生代码；<br>4. 升级过程比较顺畅</td><td>1. 第三方库和社区还在发展,不如 React Native 成熟 ；<br>2. 对 Dart 语言的依赖,有一定学习成本；<br> 3. 热重载不能像 React Native 一样方便</td></tr></tbody></table><h3 id="3-2-如何看待-react-native-到目前为止，还没出-1-0-版本？"><a href="#3-2-如何看待-react-native-到目前为止，还没出-1-0-版本？" class="headerlink" title="3.2 如何看待 react native 到目前为止，还没出 1.0 版本？"></a>3.2 如何看待 react native 到目前为止，还没出 1.0 版本？</h3><blockquote><p>同样来自 chat gpt 的回答</p></blockquote><p>React Native 虽然至今还没发布 1.0 版本,但这不意味着它不成熟或不可用。</p><ol><li>Facebook 的版本发布策略是非常慢慢的,要达到 1.0 需要非常稳定和完善,这需要长期的迭代和磨合。</li><li>React Native 生态庞大,涉及的平台和版本组合非常多,要保证在所有环境下 100% 稳定并不容易。</li><li>React Native 的升级过程中,会涉及到原生代码的迁移,这也增加了版本发布的难度。</li><li>社区提供的第三方库也需要跟上版本迭代,这需要协调和校准,也是版本发布的阻碍。</li></ol><h3 id="3-3-react-native-使用的是原生-view-还是-webview"><a href="#3-3-react-native-使用的是原生-view-还是-webview" class="headerlink" title="3.3 react native 使用的是原生 view 还是 webview?"></a>3.3 react native 使用的是原生 view 还是 webview?</h3><blockquote><p>同样来自 chat gpt 的回答</p></blockquote><ul><li>React Native 使用的是原生 View 而不是 WebView</li><li>React Native 的核心思想是使用 JavaScript 来开发移动应用,而不是 Web 应用。它允许你使用 React 来开发原生移动应用,最终编译成真实的原生 UI 元素</li><li>具体来说,React Native 将 React 组件映射到原生 View 和 Text 组件上,而不是 WebView。所以当你在 JavaScript 中构建一个 Button 时,在本质上它会变成 Android 的 Button 或 iOS 的 UIButton。</li></ul><h2 id="4-开发环境准备"><a href="#4-开发环境准备" class="headerlink" title="4. 开发环境准备"></a>4. 开发环境准备</h2><blockquote><p>本文选择了本地搭建环境，没有选择依赖线上的 expo 沙盒环境</p></blockquote><p><a href="https://www.reactnative.cn/docs/environment-setup">本地环境搭建文档</a>，对着文档一步步来即可</p><ol><li>创建项目</li></ol><figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript">npx react-<span class="hljs-keyword">native</span> init AwesomeProject<br></code></pre></div></td></tr></table></figure><ol start="2"><li>使用安卓手机调试</li></ol><blockquote><p>也可以使用模拟器，由于我手机是安卓的，就用了安卓手机。还有就是安卓模拟器上的显示和真机有些差距，问题没及时暴露。</p></blockquote><p>手机打开开发者模式，并打开 usb 调试，数据线连接电脑即可，运行项目的时候，会自动在你的手机上安卓 debug 安装包</p><h2 id="5-开发时遇到的一些问题总结"><a href="#5-开发时遇到的一些问题总结" class="headerlink" title="5. 开发时遇到的一些问题总结"></a>5. 开发时遇到的一些问题总结</h2><h3 id="5-1-安装第三方-ui-库，link-字体时报错"><a href="#5-1-安装第三方-ui-库，link-字体时报错" class="headerlink" title="5.1 安装第三方 ui 库，link 字体时报错"></a>5.1 安装第三方 ui 库，link 字体时报错</h3><blockquote><p>根据 Ant Design Mobile RN of React 文档<a href="https://rn.mobile.ant.design/docs/react/introduce-cn">链接字体图标</a>，安装完<code>@ant-design/icons-react-native</code>库后，需要执行<code>npx react-native link @ant-design/icons-react-native</code>，然后出现如下报错</p></blockquote><p><img src="/assets/img/react-native/2.png"></p><p><strong>解决：</strong></p><ol><li>安装 <code>react-native-asset</code></li></ol><figure class="highlight processing"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs processing">yarn <span class="hljs-built_in">add</span> react-<span class="hljs-keyword">native</span>-asset --<span class="hljs-built_in">save</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>根目录 react-native.config.js，assets 添加字体图标文件的路径</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>  assets: [<span class="hljs-string">&#x27;node_modules/@ant-design/icons-react-native/fonts&#x27;</span>]<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>执行 yarn react-native-asset</li></ol><figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript">yarn react-<span class="hljs-keyword">native</span>-asset<br></code></pre></div></td></tr></table></figure><ol start="4"><li>检查是否链接成功，android\app\src\main\assets 下是否有 fonts 文件夹</li></ol><p><img src="/assets/img/react-native/3.png"></p><ol start="5"><li>关于项目中使用了<a href="https://github.com/birdofpreyru/react-native-static-server#bundling-in-server-assets-into-an-app-statically">@dr.pogodin&#x2F;react-native-static-server</a></li></ol><p>感谢 @小白菜 大佬的提供，<code>react-native-static-server</code>是一款可以在react native中，本地启动静态服务的库，文档中有提到<code>android/app/build.gradle</code>配置：</p><figure class="highlight smali"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smali">android &#123;<br>  sourceSets &#123;<br>    main &#123;<br>      assets.srcDirs = [<br>        &#x27;../../assets&#x27;<br>        // This<span class="hljs-built_in"> array </span>may contain additional asset folders to bundle-in.<br>        // Paths in this<span class="hljs-built_in"> array </span>are relative to <span class="hljs-string">&quot;build.gradle&quot;</span> file,<span class="hljs-built_in"> and</span><br><span class="hljs-built_in"></span>        // should be comma-separated.<br>      ]<br>    &#125;<br>  &#125;<br>  // ... Other stuff.<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这样配置过后，会导致<code>@ant-design/icons-react-native</code>字体无法正确加载。如果app内有其它静态资源，在配置assets.srcDirs的时候需要把 <code>=</code> 换成 <code>+=</code>，这样就可以加载字体图标了：</p><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff">android &#123;<br>  sourceSets &#123;<br>    main &#123;<br><span class="hljs-deletion">-      assets.srcDirs = [</span><br><span class="hljs-addition">+      assets.srcDirs += [</span><br>        &#x27;../../assets&#x27;<br>        // This array may contain additional asset folders to bundle-in.<br>        // Paths in this array are relative to &quot;build.gradle&quot; file, and<br>        // should be comma-separated.<br>      ]<br>    &#125;<br>  &#125;<br>  // ... Other stuff.<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="5-2-如何像-web-项目一样使用-env-环境变量？"><a href="#5-2-如何像-web-项目一样使用-env-环境变量？" class="headerlink" title="5.2 如何像 web 项目一样使用 env 环境变量？"></a>5.2 如何像 web 项目一样使用 env 环境变量？</h3><blockquote><p>如何像 web 项目一样，本地开发使用<code>.env.development</code>文件，生产打包的时候使用<code>.env.production</code>文件，<code>.env.local</code>文件只在本地生效？</p></blockquote><ol><li>安装<a href="https://github.com/luggit/react-native-config"><code>react-native-config</code></a>及配置步骤</li></ol><ul><li>安装</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">yarn <span class="hljs-keyword">add </span>react-native-<span class="hljs-built_in">config</span><br></code></pre></div></td></tr></table></figure><ul><li>android&#x2F;settings.gradle</li></ul><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-addition">+ include &#x27;:react-native-config&#x27;</span><br><span class="hljs-addition">+ project(&#x27;:react-native-config&#x27;).projectDir = new File(rootProject.projectDir, &#x27;../node_modules/react-native-config/android&#x27;)</span><br></code></pre></div></td></tr></table></figure><ul><li>android&#x2F;app&#x2F;build.gradle</li></ul><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff">android &#123;<br>    // project.ext.defaultEnvFile = &quot;path/to/.env.file&quot;<br>    // 写在 apply from: project(&#x27;:react-native-config&#x27;).projectDir.getPath() + &quot;/dotenv.gradle&quot; 这行之前<br><span class="hljs-addition">+    project.ext.envConfigFiles = [</span><br><span class="hljs-addition">+      debug: &quot;.env.development&quot;,</span><br><span class="hljs-addition">+      release: &quot;.env.production&quot;</span><br><span class="hljs-addition">+    ]</span><br><br>    defaultConfig &#123;<br>        applicationId &quot;com.xxx.xxx&quot;<br>        minSdkVersion rootProject.ext.minSdkVersion<br>        targetSdkVersion rootProject.ext.targetSdkVersion<br>        versionCode 2<br>        versionName &quot;0.0.2&quot;<br>        // for react-native-config<br><span class="hljs-addition">+        resValue &quot;string&quot;, &quot;build_config_package&quot;, &quot;com.xxx.xxx&quot;</span><br>    &#125;<br>&#125;<br><br>dependencies &#123;<br>    implementation &quot;com.facebook.react:react-native:+&quot;  // From node_modules<br><span class="hljs-addition">+    implementation project(&#x27;:react-native-config&#x27;)</span><br>&#125;<br><br>// 最后一行添加<br><span class="hljs-addition">+ apply from: project(&#x27;:react-native-config&#x27;).projectDir.getPath() + &quot;/dotenv.gradle&quot;</span><br></code></pre></div></td></tr></table></figure><ul><li>android&#x2F;app&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;your-app-name&#x2F;MainApplication.java</li></ul><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-addition">+ import com.lugg.RNCConfig.RNCConfigPackage;</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>package.json 中 添加 scripts 脚本命令</li></ol><p><code>.env.local</code>加入到<code>.gitignore</code>文件中忽略，文件中可以放入一些私有敏感变量，不会被提交到仓库里；</p><p>本地开发和生产打包时将<code>.env.local</code>文件里的变量复制到<code>.env.development</code>或<code>.env.production</code>文件里，启动项目完成或者打包完后，再将新复制进来的变量删除；</p><p>这样就解决了 debug 和 release 变量区分，而本地私有变量也不会直接暴露出去。</p><ul><li>新建.env.local 文件</li></ul><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-comment"># 高德地图key</span><br><span class="hljs-comment"># android</span><br><span class="hljs-attr">AMP_ANDROID_API_KEY</span>=xxx<br></code></pre></div></td></tr></table></figure><ul><li>新建.env.development 文件</li></ul><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">NODE_ENV</span>=development<br><span class="hljs-attr">BASE_URL</span>=https://xxx.dev.api.com<br><span class="hljs-attr">MY_VARIABLE_ENV</span>=<span class="hljs-number">123</span>dev<br></code></pre></div></td></tr></table></figure><ul><li>新建.env.production 文件</li></ul><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">NODE_ENV</span>=production<br><span class="hljs-attr">BASE_URL</span>=https://xxx.prod.api.com<br><span class="hljs-attr">MY_VARIABLE_ENV</span>=<span class="hljs-number">123</span>prod<br></code></pre></div></td></tr></table></figure><ul><li>package.json</li></ul><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;preandroid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node ./scripts/checkEnvAmapKey .env.local &amp;&amp; cat .env.local &gt;&gt; .env.development&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;android&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ENVFILE=.env.development react-native run-android&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;postandroid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node ./scripts/revertEnvFile .env.development .env.local&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;prebuild:android&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node ./scripts/checkEnvAmapKey .env.local &amp;&amp; cat .env.local &gt;&gt; .env.production&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build:android&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd android &amp;&amp; ENVFILE=.env.production ./gradlew assembleRelease&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;postbuild:android&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node ./scripts/revertEnvFile .env.production .env.local&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;prebuild:android:aab&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node ./scripts/checkEnvAmapKey .env.local &amp;&amp; cat .env.local &gt;&gt; .env.production&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build:android:aab&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd android &amp;&amp; ENVFILE=.env.production ./gradlew bundleRelease&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;postbuild:android:aab&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node ./scripts/revertEnvFile .env.production .env.local&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure><ul><li>scripts&#x2F;checkEnvAmapKey.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Buffer</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;buffer&quot;</span>);<br><span class="hljs-keyword">const</span> argv = process.<span class="hljs-property">argv</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>);<br><span class="hljs-keyword">const</span> rootDir = process.<span class="hljs-title function_">cwd</span>();<br><span class="hljs-keyword">const</span> fsPromise = fs.<span class="hljs-property">promises</span>;<br><span class="hljs-keyword">const</span> chalk = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;chalk&quot;</span>);<br><span class="hljs-comment">// const shell = require(&#x27;shelljs&#x27;);</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;argv:&quot;</span>, argv); <span class="hljs-comment">// [ &#x27;.env.development&#x27;, &#x27;.env.local&#x27; ]</span><br><br><span class="hljs-keyword">const</span> envLocalFilePath = path.<span class="hljs-title function_">resolve</span>(rootDir, <span class="hljs-string">`./<span class="hljs-subst">$&#123;argv[<span class="hljs-number">0</span>]&#125;</span>`</span>);<br><span class="hljs-keyword">const</span> envLocalFileTemplate = <span class="hljs-string">`</span><br><span class="hljs-string"># 高德地图key</span><br><span class="hljs-string"># android</span><br><span class="hljs-string">AMP_ANDROID_API_KEY=请输入您的android api key</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleWrite</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// https://nodejs.org/docs/latest-v16.x/api/fs.html#fspromiseswritefilefile-data-options</span><br>    <span class="hljs-keyword">const</span> controller = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbortController</span>();<br>    <span class="hljs-keyword">const</span> &#123; signal &#125; = controller;<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(envLocalFileTemplate));<br><br>    <span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">await</span> fsPromise.<span class="hljs-title function_">writeFile</span>(envLocalFilePath, data, &#123;<br>      signal,<br>      <span class="hljs-attr">encoding</span>: <span class="hljs-string">&quot;utf8&quot;</span>,<br>      <span class="hljs-attr">flags</span>: <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-comment">// 以写入模式打开文件，如果文件不存在则创建</span><br>    &#125;);<br><br>    <span class="hljs-comment">// Abort the request before the promise settles.</span><br>    controller.<span class="hljs-title function_">abort</span>();<br><br>    <span class="hljs-keyword">await</span> promise;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chalk.<span class="hljs-title function_">red</span>(<span class="hljs-string">&quot;写入文件失败&quot;</span>), error);<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    process.<span class="hljs-title function_">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">writeEnvAmapKeyFile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// https://nodejs.org/docs/latest-v16.x/api/fs.html#fsexistspath-callback</span><br>  fs.<span class="hljs-title function_">open</span>(envLocalFilePath, <span class="hljs-string">&quot;wx&quot;</span>, <span class="hljs-keyword">async</span> (err, fd) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">if</span> (err.<span class="hljs-property">code</span> === <span class="hljs-string">&quot;EEXIST&quot;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;envLocalFilePath&#125;</span>文件已存在`</span>);<br>      &#125;<br>      process.<span class="hljs-title function_">exit</span>(<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">handleWrite</span>();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      fs.<span class="hljs-title function_">close</span>(fd, <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (error) &#123;<br>          <span class="hljs-keyword">throw</span> error;<br>        &#125;<br>      &#125;);<br>      process.<span class="hljs-title function_">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;);<br>&#125;<br><br><span class="hljs-comment">// 检查本地根目录是否存在`.env.local`文件</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">checkEnvAmapKeyFile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">await</span> fsPromise.<span class="hljs-title function_">stat</span>(envLocalFilePath);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;chalk.green(<span class="hljs-string">&quot;项目根目录已存在 `.env.local` 文件&quot;</span>)&#125;</span>;`</span>);<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`</span><br><span class="hljs-string">      <span class="hljs-subst">$&#123;chalk.red.bgYellow(<span class="hljs-string">&quot;项目根目录不存在 `.env.local` 文件，将进行创建&quot;</span>)&#125;</span>;</span><br><span class="hljs-string">      <span class="hljs-subst">$&#123;chalk.yellow(</span></span><br><span class="hljs-subst"><span class="hljs-string">        <span class="hljs-string">&quot;请在生成的`.env.local`文件中填入高德地图API KEY，未申请的请前往高德地图 https://console.amap.com/dev/key/app 中申请创建，申请成功后，请复制key到 `.env.local`文件相应位置，然后重新启动项目&quot;</span></span></span><br><span class="hljs-subst"><span class="hljs-string">      )&#125;</span></span><br><span class="hljs-string">    `</span>);<br><br>    <span class="hljs-comment">// shell.exec(&#x27;touch \\.env.local&#x27;);</span><br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">writeEnvAmapKeyFile</span>();<br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">checkEnvAmapKeyFile</span>();<br></code></pre></div></td></tr></table></figure><ul><li>scripts&#x2F;revertEnvFile.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Buffer</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;buffer&quot;</span>);<br><span class="hljs-keyword">const</span> argv = process.<span class="hljs-property">argv</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>);<br><span class="hljs-keyword">const</span> rootDir = process.<span class="hljs-title function_">cwd</span>();<br><span class="hljs-keyword">const</span> fsPromise = fs.<span class="hljs-property">promises</span>;<br><span class="hljs-keyword">const</span> chalk = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;chalk&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;argv:&quot;</span>, argv); <span class="hljs-comment">// [ &#x27;.env.development&#x27;, &#x27;.env.local&#x27; ]</span><br><br><span class="hljs-keyword">const</span> envLocalFilePath = path.<span class="hljs-title function_">resolve</span>(rootDir, <span class="hljs-string">`./<span class="hljs-subst">$&#123;argv[<span class="hljs-number">1</span>]&#125;</span>`</span>);<br><span class="hljs-keyword">const</span> envFilePath = path.<span class="hljs-title function_">resolve</span>(rootDir, <span class="hljs-string">`./<span class="hljs-subst">$&#123;argv[<span class="hljs-number">0</span>]&#125;</span>`</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleWrite</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">filePath, data</span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// https://nodejs.org/docs/latest-v16.x/api/fs.html#fspromiseswritefilefile-data-options</span><br>    <span class="hljs-keyword">const</span> controller = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbortController</span>();<br>    <span class="hljs-keyword">const</span> &#123; signal &#125; = controller;<br>    <span class="hljs-keyword">const</span> str = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(data));<br>    <span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">await</span> fsPromise.<span class="hljs-title function_">writeFile</span>(filePath, str, &#123;<br>      signal,<br>      <span class="hljs-attr">encoding</span>: <span class="hljs-string">&quot;utf8&quot;</span>,<br>      <span class="hljs-attr">flags</span>: <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-comment">// 以写入模式打开文件，如果文件不存在则创建</span><br>    &#125;);<br><br>    <span class="hljs-comment">// Abort the request before the promise settles.</span><br>    controller.<span class="hljs-title function_">abort</span>();<br><br>    <span class="hljs-keyword">await</span> promise;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chalk.<span class="hljs-title function_">red</span>(<span class="hljs-string">&quot;写入文件失败&quot;</span>), error);<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    process.<span class="hljs-title function_">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">writeEnvAmapKeyFile</span>(<span class="hljs-params">filePath, data</span>) &#123;<br>  <span class="hljs-comment">// https://nodejs.org/docs/latest-v16.x/api/fs.html#fsexistspath-callback</span><br>  fs.<span class="hljs-title function_">open</span>(filePath, <span class="hljs-string">&quot;wx&quot;</span>, <span class="hljs-keyword">async</span> (err, fd) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">if</span> (err.<span class="hljs-property">code</span> === <span class="hljs-string">&quot;EEXIST&quot;</span>) &#123;<br>        <span class="hljs-keyword">await</span> <span class="hljs-title function_">handleWrite</span>(filePath, data);<br>      &#125;<br>      process.<span class="hljs-title function_">exit</span>(<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">handleWrite</span>(filePath, data);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      fs.<span class="hljs-title function_">close</span>(fd, <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (error) &#123;<br>          <span class="hljs-keyword">throw</span> error;<br>        &#125;<br>      &#125;);<br>      process.<span class="hljs-title function_">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;);<br>&#125;<br><br><span class="hljs-comment">// 读取文件内容</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleReadFile</span>(<span class="hljs-params">fileName</span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> promise = fsPromise.<span class="hljs-title function_">readFile</span>(fileName, &#123; <span class="hljs-attr">encoding</span>: <span class="hljs-string">&quot;utf8&quot;</span> &#125;);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> promise;<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-comment">// When a request is aborted - err is an AbortError</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 检查本地根目录是否存在`.env.local`文件</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleRevertEnvFile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">await</span> fsPromise.<span class="hljs-title function_">stat</span>(envLocalFilePath);<br><br>    <span class="hljs-keyword">const</span> envAmapFileContent = <span class="hljs-keyword">await</span> <span class="hljs-title function_">handleReadFile</span>(envLocalFilePath);<br>    <span class="hljs-keyword">const</span> envFileContent = <span class="hljs-keyword">await</span> <span class="hljs-title function_">handleReadFile</span>(envFilePath);<br><br>    <span class="hljs-keyword">if</span> (envAmapFileContent === <span class="hljs-string">&quot;&quot;</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> replaceStr = envFileContent.<span class="hljs-title function_">replace</span>(envAmapFileContent, <span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">writeEnvAmapKeyFile</span>(envFilePath, replaceStr);<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>      <span class="hljs-string">`<span class="hljs-subst">$&#123;chalk.red.bgYellow(</span></span><br><span class="hljs-subst"><span class="hljs-string">        <span class="hljs-string">&quot;请检查 `.env.[development|production]` 文件，若有新增加的高德地图 API KEY，请撤回更改，勿提交到远程仓库&quot;</span></span></span><br><span class="hljs-subst"><span class="hljs-string">      )&#125;</span>`</span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">handleRevertEnvFile</span>();<br></code></pre></div></td></tr></table></figure><ol start="3"><li>关于打 release 生产包时获取不到自定义 env 变量</li></ol><blockquote><p><a href="https://github.com/luggit/react-native-config/issues/640">https://github.com/luggit/react-native-config/issues/640</a></p></blockquote><p><img src="/assets/img/react-native/1.png"></p><p>android&#x2F;app&#x2F;proguard-rules.pro 添加下面这行：</p><figure class="highlight axapta"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs axapta">-keep <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.mypackage.BuildConfig &#123; *; &#125;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>遗留的小问题</li></ol><p>本地开发时，执行<code>npm run android</code>，npm scripts 钩子执行不了<code>postandroid</code>，导致复制到<code>.env.development</code>文件里的变量删除不了。<code>npm run build:android</code>打包的时候不存在这个问题。</p><h3 id="5-3-优雅的修改包的版本号"><a href="#5-3-优雅的修改包的版本号" class="headerlink" title="5.3 优雅的修改包的版本号"></a>5.3 优雅的修改包的版本号</h3><blockquote><p><a href="https://github.com/stovmascript/react-native-version">https://github.com/stovmascript/react-native-version</a></p></blockquote><ul><li>安装</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">yarn <span class="hljs-built_in">add</span> react-native-<span class="hljs-built_in">version</span> <span class="hljs-comment">--dev</span><br></code></pre></div></td></tr></table></figure><ul><li>package.json 中添加 scripts 脚本</li></ul><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff">&#123;<br>  &quot;name&quot;: &quot;AwesomeProject&quot;,<br>  &quot;version&quot;: &quot;0.0.1&quot;,<br>  &quot;scripts&quot;: &#123;<br>    &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;,<br><span class="hljs-addition">+   &quot;postversion&quot;: &quot;react-native-version&quot;</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>使用</li></ul><p>每次打包发布前，先执行<code>npm version x.x.x</code>它会自动把新的版本号更新到 android 和 ios 中，然后再执行打包命令即可</p><h3 id="5-4-修改包的名称"><a href="#5-4-修改包的名称" class="headerlink" title="5.4 修改包的名称"></a>5.4 修改包的名称</h3><p>修改 android&#x2F;app&#x2F;src&#x2F;main&#x2F;res&#x2F;values&#x2F;strings.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;app_name&quot;</span>&gt;</span>修改成你想要的包名<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-5-打包图片报错-mergeReleaseResources-FAILED"><a href="#5-5-打包图片报错-mergeReleaseResources-FAILED" class="headerlink" title="5.5 打包图片报错 mergeReleaseResources FAILED"></a>5.5 打包图片报错 mergeReleaseResources FAILED</h3><ul><li>代码中使用图片的地方</li></ul><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ImageBackground</span>, useWindowDimensions &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-native&quot;</span>;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ImageBackground</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">source</span>=<span class="hljs-string">&#123;require(</span>&quot;<span class="hljs-attr">..</span>/<span class="hljs-attr">..</span>/<span class="hljs-attr">assets</span>/<span class="hljs-attr">img</span>/<span class="hljs-attr">mybg.png</span>&quot;)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">resizeMode</span>=<span class="hljs-string">&quot;cover&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">...styles.backgroundImg</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">height:</span> <span class="hljs-attr">useWindowDimensions</span>()<span class="hljs-attr">.height</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">  &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">/&gt;</span></span>;<br></code></pre></div></td></tr></table></figure><ul><li>报错如下</li></ul><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">* What went wrong:<br>Execution failed <span class="hljs-keyword">for</span> <span class="hljs-keyword">task</span> <span class="hljs-string">&#x27;:app:mergeReleaseResources&#x27;</span>.<br>&gt; A failure occurred <span class="hljs-keyword">while</span> executing com.android.build.gradle.internal.res.Aapt2CompileRunnable<br>   &gt; Android resource compilation failed<br>     ERROR:<span class="hljs-regexp">/android/</span>app<span class="hljs-regexp">/build/g</span>enerated<span class="hljs-regexp">/res/</span>react<span class="hljs-regexp">/release/</span>drawable-mdpi/src_assets_img_bg.png: AAPT: error: <span class="hljs-keyword">file</span> failed to <span class="hljs-keyword">compile</span>.<br></code></pre></div></td></tr></table></figure><ul><li>解决：</li></ul><p>android\app 下的 build.gradle 文件中添加如下代码</p><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff">android &#123;<br>    ...<br><span class="hljs-addition">+    // 解决打包png图片报错</span><br><span class="hljs-addition">+    aaptOptions.cruncherEnabled = false</span><br><span class="hljs-addition">+    aaptOptions.useNewCruncher = false</span><br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-6-本地开发-http-请求失败"><a href="#5-6-本地开发-http-请求失败" class="headerlink" title="5.6 本地开发 http 请求失败"></a>5.6 本地开发 http 请求失败</h3><p>两种方式，推荐第一种</p><ol><li><p>使用 https 请求</p></li><li><p>修改配置</p></li></ol><ul><li>在 res 下新增加一个 xml 目录，然后创建一个名为 network_security_config.xml 文件，文件内容</li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">network-security-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">base-config</span> <span class="hljs-attr">cleartextTrafficPermitted</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">network-security-config</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>在 android&#x2F;app&#x2F;src&#x2F;main&#x2F;AndroidManifest.xml 文件中添加：</li></ul><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff">&lt;application&gt;<br><span class="hljs-addition">+ android:networkSecurityConfig=&quot;@xml/network_security_config&quot;</span><br>&lt;/application&gt;<br></code></pre></div></td></tr></table></figure><h3 id="5-7-安卓-Text-组件文字显示不全"><a href="#5-7-安卓-Text-组件文字显示不全" class="headerlink" title="5.7 安卓 Text 组件文字显示不全"></a>5.7 安卓 Text 组件文字显示不全</h3><p>设置 fontFamily 为 lucida grande，或者为空</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">fontfamily: <span class="hljs-string">&quot;lucida grande&quot;</span>;<br></code></pre></div></td></tr></table></figure><h3 id="5-8-android-绝对定位时点击事件失效"><a href="#5-8-android-绝对定位时点击事件失效" class="headerlink" title="5.8 android 绝对定位时点击事件失效"></a>5.8 android 绝对定位时点击事件失效</h3><blockquote><p><a href="https://segmentfault.com/q/1010000022868789">https://segmentfault.com/q/1010000022868789</a></p></blockquote><p><strong>解决：</strong> 在最外面在加一个 View，固定高度，点击就可以触发</p><h3 id="5-9-android-侧滑退出应用问题"><a href="#5-9-android-侧滑退出应用问题" class="headerlink" title="5.9 android 侧滑退出应用问题"></a>5.9 android 侧滑退出应用问题</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect, useCallback, memo, <span class="hljs-title class_">Fragment</span>, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;<br>  <span class="hljs-title class_">Platform</span>,<br>  <span class="hljs-title class_">BackHandler</span>,<br>  <span class="hljs-title class_">Text</span>,<br>  <span class="hljs-title class_">StyleSheet</span>,<br>  <span class="hljs-title class_">AppState</span>,<br>  <span class="hljs-title class_">ToastAndroid</span>,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-native&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useNavigate, useLocation &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-native&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Toast</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@ant-design/react-native&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">ResetBack</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br>  <span class="hljs-keyword">const</span> location = <span class="hljs-title function_">useLocation</span>();<br><br>  <span class="hljs-keyword">const</span> numRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-number">1</span>);<br><br>  <span class="hljs-keyword">const</span> _handleAppStateChange = <span class="hljs-keyword">function</span> (<span class="hljs-params">nextAppState</span>) &#123;<br>    <span class="hljs-comment">// console.log(appState);</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;nextAppState==&gt;&quot;</span>, nextAppState);<br><br>    <span class="hljs-keyword">if</span> (nextAppState &amp;&amp; nextAppState === <span class="hljs-string">&quot;background&quot;</span> &amp;&amp; numRef.<span class="hljs-property">current</span> &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;numRef.current==&gt;&quot;</span>, numRef.<span class="hljs-property">current</span>);<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Platform</span>.<span class="hljs-property">OS</span> === <span class="hljs-string">&quot;android&quot;</span>) &#123;<br>        <span class="hljs-title class_">ToastAndroid</span>.<span class="hljs-title function_">showWithGravity</span>(<br>          <span class="hljs-string">&quot;已切到后台&quot;</span>,<br>          <span class="hljs-title class_">ToastAndroid</span>.<span class="hljs-property">SHORT</span>,<br>          <span class="hljs-title class_">ToastAndroid</span>.<span class="hljs-property">BOTTOM</span><br>        );<br>      &#125;<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> handleHardwareBackPress = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (location.<span class="hljs-property">pathname</span> === <span class="hljs-string">&quot;/&quot;</span>) &#123;<br>      numRef.<span class="hljs-property">current</span>--;<br><br>      <span class="hljs-keyword">if</span> (numRef.<span class="hljs-property">current</span> === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-title class_">Toast</span>.<span class="hljs-title function_">info</span>(&#123;<br>          <span class="hljs-attr">content</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;styles.txt&#125;</span>&gt;</span>在滑一次退出<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span>,<br>        &#125;);<br><br>        <span class="hljs-title class_">BackHandler</span>.<span class="hljs-title function_">removeEventListener</span>(<br>          <span class="hljs-string">&quot;hardwareBackPress&quot;</span>,<br>          handleHardwareBackPress<br>        );<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-title function_">navigate</span>(-<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;, [navigate, location]);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// AppState.addEventListener(&#x27;change&#x27;, _handleAppStateChange);</span><br>    <span class="hljs-comment">// https://github.com/facebook/react-native/issues/34644#issuecomment-1245026317</span><br>    <span class="hljs-keyword">const</span> listener = <span class="hljs-title class_">AppState</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;change&quot;</span>, _handleAppStateChange);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// AppState.removeEventListener(&#x27;change&#x27;, _handleAppStateChange);</span><br>      listener.<span class="hljs-title function_">remove</span>();<br>    &#125;;<br>  &#125;, []);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 禁用 Android 上的返回按钮(侧滑返回)</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Platform</span>.<span class="hljs-property">OS</span> === <span class="hljs-string">&quot;android&quot;</span>) &#123;<br>      <span class="hljs-title class_">BackHandler</span>.<span class="hljs-title function_">addEventListener</span>(<br>        <span class="hljs-string">&quot;hardwareBackPress&quot;</span>,<br>        handleHardwareBackPress<br>      );<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Platform</span>.<span class="hljs-property">OS</span> === <span class="hljs-string">&quot;android&quot;</span>) &#123;<br>        <span class="hljs-title class_">BackHandler</span>.<span class="hljs-title function_">removeEventListener</span>(<br>          <span class="hljs-string">&quot;hardwareBackPress&quot;</span>,<br>          handleHardwareBackPress<br>        );<br><br>        numRef.<span class="hljs-property">current</span> = <span class="hljs-number">1</span>;<br>      &#125;<br>    &#125;;<br>  &#125;, [handleHardwareBackPress]);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Fragment</span> /&gt;</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">const</span> styles = <span class="hljs-title class_">StyleSheet</span>.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">txt</span>: &#123;<br>    <span class="hljs-attr">fontFamily</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#ffffff&quot;</span>,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">memo</span>(<span class="hljs-title class_">ResetBack</span>);<br></code></pre></div></td></tr></table></figure><h3 id="5-10-自定义双击事件-Button-组件"><a href="#5-10-自定义双击事件-Button-组件" class="headerlink" title="5.10 自定义双击事件 Button 组件"></a>5.10 自定义双击事件 Button 组件</h3><blockquote><p>chatgpt 给我的答案</p></blockquote><p>在 rn 0.71 及更高版本中，可以使用 TouchableWithoutFeedback 组件来捕获双击事件。</p><p>TouchableWithoutFeedback 提供了 onPress 和 onLongPress 回调函数以及 delayPressIn 和 delayPressOut 属性，这些属性可以用于检测双击事件</p><p>您可以根据需要调整 delayPressIn 和 delayPressOut 属性的值。例如，如果您希望用户必须在 500 毫秒内双击按钮，则可以将 DOUBLE_PRESS_DELAY 常量设置为 500。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TouchableWithoutFeedback</span>, <span class="hljs-title class_">Text</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-native&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">MyDoubleClickButton</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-comment">// doubleClickTime为双击完成的时间</span><br>  <span class="hljs-keyword">const</span> &#123; onPress, title, doubleClickTime, textStyle &#125; = props;<br>  <span class="hljs-keyword">const</span> lastPress = <span class="hljs-title function_">useRef</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handlePress</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DOUBLE_PRESS_DELAY</span> = doubleClickTime;<br>    <span class="hljs-keyword">if</span> (now - lastPress.<span class="hljs-property">current</span> &lt; <span class="hljs-variable constant_">DOUBLE_PRESS_DELAY</span>) &#123;<br>      <span class="hljs-title function_">onPress</span>();<br>    &#125;<br>    lastPress.<span class="hljs-property">current</span> = now;<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TouchableWithoutFeedback</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onPress</span>=<span class="hljs-string">&#123;handlePress&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">delayPressIn</span>=<span class="hljs-string">&#123;doubleClickTime</span> / <span class="hljs-attr">2</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">delayPressOut</span>=<span class="hljs-string">&#123;doubleClickTime</span> / <span class="hljs-attr">2</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;textStyle&#125;</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">TouchableWithoutFeedback</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">MyDoubleClickButton</span>;<br></code></pre></div></td></tr></table></figure><h3 id="5-11-设置剪切板"><a href="#5-11-设置剪切板" class="headerlink" title="5.11 设置剪切板"></a>5.11 设置剪切板</h3><blockquote><p><a href="https://github.com/react-native-clipboard/clipboard">https://github.com/react-native-clipboard/clipboard</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Clipboard</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@react-native-clipboard/clipboard&quot;</span>;<br><br><span class="hljs-comment">// 设置值：</span><br><span class="hljs-title class_">Clipboard</span>.<span class="hljs-title function_">setString</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-comment">// 取值：</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">fetchCopiedText</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> text = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Clipboard</span>.<span class="hljs-title function_">getString</span>();<br>  <span class="hljs-title function_">setCopiedText</span>(text);<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="5-12-关于使用react-native-webview"><a href="#5-12-关于使用react-native-webview" class="headerlink" title="5.12 关于使用react-native-webview"></a>5.12 关于使用<code>react-native-webview</code></h3><blockquote><p><a href="https://github.com/react-native-webview/react-native-webview/blob/HEAD/docs/Reference.md">https://github.com/react-native-webview/react-native-webview/blob/HEAD/docs/Reference.md</a></p></blockquote><ol><li>安装</li></ol><figure class="highlight processing"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs processing">yarn <span class="hljs-built_in">add</span>  react-<span class="hljs-keyword">native</span>-webview<br></code></pre></div></td></tr></table></figure><p><strong>注意：</strong> 一定要在安装完 react-native-webview 之后，然后重新启动，才会生效，不然会报错<br>（重启后，会重新下载依赖，这个过程，视网络情况而定，可能有点慢）</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">TypeError: Cannot <span class="hljs-keyword">read</span> <span class="hljs-keyword">property</span><span class="hljs-title"> </span>&#x27;isFileUploadSupported&#x27; of null, js engine: hermes<br></code></pre></div></td></tr></table></figure><ol start="2"><li>网页 js 和原生进行通信</li></ol><p>如下示例，给网页插入一段脚本，获取网页上的图片点击事件，并且拿到图片的 src 链接</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">View</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-native&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">WebView</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-native-webview&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">INJECTED_JAVASCRIPT</span> = <span class="hljs-string">`</span><br><span class="hljs-string">  var imgList = document.querySelectorAll(&quot;img&quot;);</span><br><span class="hljs-string"></span><br><span class="hljs-string">  Array.from(imgList).forEach(el =&gt; &#123;</span><br><span class="hljs-string">    el.addEventListener(&quot;click&quot;, function () &#123;</span><br><span class="hljs-string">      window.ReactNativeWebView.postMessage(JSON.stringify(&#123;type: &#x27;previewimg&#x27;, data: this.src&#125;));</span><br><span class="hljs-string">    &#125;);</span><br><span class="hljs-string">  &#125;);</span><br><span class="hljs-string">  </span><br><span class="hljs-string">  // 注意：这行是必须添加的，否则添加失败</span><br><span class="hljs-string">  true; // note: this is required, or you&#x27;ll sometimes get silent failures</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">MyWebView</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">WebView</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">source</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">uri:</span> `<span class="hljs-attr">http:</span>//<span class="hljs-attr">xxx</span>/<span class="hljs-attr">posts</span>/<span class="hljs-attr">detail</span>/<span class="hljs-attr">123</span>` &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">injectedJavaScript</span>=<span class="hljs-string">&#123;INJECTED_JAVASCRIPT&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onMessage</span>=<span class="hljs-string">&#123;(event)</span> =&gt;</span> &#123;</span><br><span class="language-xml">        alert(event.nativeEvent.data);</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">    /&gt;</span><br>  );<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>IOS 报错 RNCWebView 未找到 UIManager</li></ol><p>报错如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">Invariant Violation: requireNativeComponent: <span class="hljs-string">&quot;RNCWebView&quot;</span> was <span class="hljs-keyword">not</span> found <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> UIManager<br></code></pre></div></td></tr></table></figure><p><strong>解决：</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ios<br><br>pod install<br></code></pre></div></td></tr></table></figure><p>然后重启项目即可</p><ol start="4"><li>WebView 页面不显示</li></ol><p>关键原因是，WebView 的父组件没有设置高度，导致 WebView 页面不显示</p><p><strong>解决：</strong> 给 WebView 父组件设置一个高度即可</p><h3 id="5-13-关于使用高德地图"><a href="#5-13-关于使用高德地图" class="headerlink" title="5.13 关于使用高德地图"></a>5.13 关于使用高德地图</h3><blockquote><p><a href="https://github.com/qiuxiang/react-native-amap3d">https://github.com/qiuxiang/react-native-amap3d</a></p></blockquote><p><strong>定位模块</strong>：<code>@react-native-community/geolocation</code>获取的坐标是 gps 坐标，高德地图使用时要转换， <code>react-native-amap-geolocation</code>可以直接获取到位置信息，无需再进行转换</p><ol><li>安装</li></ol><figure class="highlight processing"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs processing">yarn <span class="hljs-built_in">add</span> react-<span class="hljs-keyword">native</span>-amap3d<br></code></pre></div></td></tr></table></figure><ol start="2"><li><code>android/app/src/main/AndroidManifest.xml</code>添加权限</li></ol><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 精确定位 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 模糊定位 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_COARSE_LOCATION&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="3"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AMapSdk</span>, <span class="hljs-title class_">MapView</span>, <span class="hljs-title class_">MapType</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-native-amap3d&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Platform</span>, <span class="hljs-title class_">PermissionsAndroid</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-native&quot;</span>;<br><br><span class="hljs-comment">// 申请定位权限</span><br><span class="hljs-keyword">const</span> handleAndroidPermissin = <span class="hljs-title function_">useCallback</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> granted = <span class="hljs-keyword">await</span> <span class="hljs-title class_">PermissionsAndroid</span>.<span class="hljs-title function_">requestMultiple</span>(<br>      [<br>        <span class="hljs-title class_">PermissionsAndroid</span>.<span class="hljs-property">PERMISSIONS</span>.<span class="hljs-property">ACCESS_FINE_LOCATION</span>,<br>        <span class="hljs-title class_">PermissionsAndroid</span>.<span class="hljs-property">PERMISSIONS</span>.<span class="hljs-property">ACCESS_COARSE_LOCATION</span>,<br>      ],<br>      &#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;位置信息授权&quot;</span>,<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;获取当前位置信息测试&quot;</span>,<br>        <span class="hljs-attr">buttonNeutral</span>: <span class="hljs-string">&quot;跳过&quot;</span>,<br>        <span class="hljs-attr">buttonNegative</span>: <span class="hljs-string">&quot;取消&quot;</span>,<br>        <span class="hljs-attr">buttonPositive</span>: <span class="hljs-string">&quot;同意&quot;</span>,<br>      &#125;<br>    );<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;granted==&gt;&quot;</span>, granted);<br><br>    <span class="hljs-keyword">if</span> (<br>      granted[<span class="hljs-string">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span>] ===<br>      <span class="hljs-title class_">PermissionsAndroid</span>.<span class="hljs-property">RESULTS</span>.<span class="hljs-property">GRANTED</span><br>    ) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;可以定位了&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<br>      granted[<span class="hljs-string">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span>] ===<br>      <span class="hljs-title class_">PermissionsAndroid</span>.<span class="hljs-property">RESULTS</span>.<span class="hljs-property">DENIED</span><br>    ) &#123;<br>      <span class="hljs-title class_">Toast</span>.<span class="hljs-title function_">fail</span>(&#123;<br>        <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;已拒绝获取位置信息&quot;</span>,<br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title class_">Toast</span>.<span class="hljs-title function_">fail</span>(&#123;<br>        <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;用户已拒绝，且不愿被再次询问&quot;</span>,<br>      &#125;);<br>    &#125;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(error);<br>  &#125;<br>&#125;, []);<br><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title class_">AMapSdk</span>.<span class="hljs-title function_">init</span>(<br>    <span class="hljs-title class_">Platform</span>.<span class="hljs-title function_">select</span>(&#123;<br>      <span class="hljs-attr">android</span>: <span class="hljs-title class_">Config</span>.<span class="hljs-property">AMP_ANDROID_API_KEY</span>,<br>    &#125;)<br>  );<br>&#125;, []);<br><br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MapView</span> <span class="hljs-attr">mapType</span>=<span class="hljs-string">&#123;MapType.Satellite&#125;</span> /&gt;</span></span>;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>关于 GPS 坐标转高德坐标</li></ol><blockquote><p><a href="https://www.jianshu.com/p/dd0c017250e4">https://www.jianshu.com/p/dd0c017250e4</a></p></blockquote><p>推荐使用<a href="https://lbs.amap.com/api/webservice/guide/api/convert">高德坐标转换</a></p><ol start="5"><li>高德地图逆地理编码服务</li></ol><blockquote><p><a href="https://lbs.amap.com/api/javascript-api-v2/guide/services/geocoder#t2">https://lbs.amap.com/api/javascript-api-v2/guide/services/geocoder#t2</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">AMap</span>.<span class="hljs-title function_">plugin</span>(<span class="hljs-string">&quot;AMap.Geocoder&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> geocoder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMap</span>.<span class="hljs-title class_">Geocoder</span>(&#123;<br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&quot;010&quot;</span>, <span class="hljs-comment">// city 指定进行编码查询的城市，支持传入城市名、adcode 和 citycode</span><br>  &#125;);<br><br>  <span class="hljs-keyword">var</span> lnglat = [<span class="hljs-number">111</span>, <span class="hljs-number">30</span>];<br><br>  geocoder.<span class="hljs-title function_">getAddress</span>(lnglat, <span class="hljs-keyword">function</span> (<span class="hljs-params">status, result</span>) &#123;<br>    <span class="hljs-keyword">if</span> (status === <span class="hljs-string">&quot;complete&quot;</span> &amp;&amp; result.<span class="hljs-property">info</span> === <span class="hljs-string">&quot;OK&quot;</span>) &#123;<br>      <span class="hljs-comment">// result为对应的地理位置详细信息</span><br>    &#125;<br>  &#125;);<br>&#125;);<br></code></pre></div></td></tr></table></figure><ol start="6"><li>安卓从地图页返回上一页 app 闪退</li></ol><blockquote><p><a href="https://github.com/qiuxiang/react-native-amap3d/issues/742">https://github.com/qiuxiang/react-native-amap3d/issues/742</a></p></blockquote><p><strong>解决</strong>：<code>android/app/src/main/AndroidManifest.xml文件application</code>添加<code>android:allowNativeHeapPointerTagging=&quot;false&quot;</code></p><ol start="7"><li>打正式 release 包闪退</li></ol><blockquote><p><a href="https://github.com/qiuxiang/react-native-amap3d/issues/762">https://github.com/qiuxiang/react-native-amap3d/issues/762</a></p></blockquote><p><strong>解决</strong>：在 <code>android/appproguard-rules.pro</code> 文件添加下面代码，重新打包</p><figure class="highlight axapta"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs axapta"><span class="hljs-meta"># 高德地图release包闪退问题</span><br><span class="hljs-meta"># 3D 地图 V5.0.0之前：</span><br>-keep   <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.amap.api.maps.**&#123;*;&#125;<br>-keep   <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.autonavi.amap.mapcore.*&#123;*;&#125;<br>-keep   <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.amap.api.trace.**&#123;*;&#125;<br><br><span class="hljs-meta"># 3D 地图 V5.0.0之后：</span><br>-keep   <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.amap.api.maps.**&#123;*;&#125;<br>-keep   <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.autonavi.**&#123;*;&#125;<br>-keep   <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.amap.api.trace.**&#123;*;&#125;<br><br><span class="hljs-meta"># 定位</span><br>-keep <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.amap.api.location.**&#123;*;&#125;<br>-keep <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.amap.api.fence.**&#123;*;&#125;<br>-keep <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.autonavi.aps.amapapi.model.**&#123;*;&#125;<br><br><span class="hljs-meta"># 搜索</span><br>-keep   <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.amap.api.services.**&#123;*;&#125;<br><br><span class="hljs-meta"># 2D地图</span><br>-keep <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.amap.api.maps2d.**&#123;*;&#125;<br>-keep <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.amap.api.mapcore2d.**&#123;*;&#125;<br><br><span class="hljs-meta"># 导航</span><br>-keep <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.amap.api.navi.**&#123;*;&#125;<br>-keep <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.autonavi.**&#123;*;&#125;<br></code></pre></div></td></tr></table></figure><h2 id="6-自定义安卓原生模块供-js-端使用"><a href="#6-自定义安卓原生模块供-js-端使用" class="headerlink" title="6. 自定义安卓原生模块供 js 端使用"></a>6. 自定义安卓原生模块供 js 端使用</h2><blockquote><p><a href="https://www.reactnative.cn/docs/native-modules-android">https://www.reactnative.cn/docs/native-modules-android</a></p></blockquote><p>基本步骤是：</p><ol><li><p>创建模块：在<code>android/app/src/main/java/com/your-app-name</code>下新建一个 java 文件，如<code>ToastModule.java</code></p></li><li><p>注册模块：在<code>android/app/src/main/java/com/your-app-name</code>下新建一个 java 文件，如<code>CustomToastPackage.java</code></p></li><li><p>在<code>android/app/src/main/java/com/your-app-name/MainApplication.java</code>中引入自己的包</p></li><li><p>js 端通过暴露出来的模块名调用原生方法</p></li></ol><h3 id="6-1-调用自定义原生安卓模块-手电筒"><a href="#6-1-调用自定义原生安卓模块-手电筒" class="headerlink" title="6.1 调用自定义原生安卓模块-手电筒"></a>6.1 调用自定义原生安卓模块-手电筒</h3><blockquote><p>自定义封装一个手电筒模块，供 js 端调用，可以打开&#x2F;关闭手机的手电筒</p></blockquote><ol><li><code>android/app/src/main/AndroidManifest.xml</code>加入如下权限</li></ol><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 摄像头,手电筒 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CAMERA&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.FLASHLIGHT&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-feature</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.hardware.camera&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li><code>android/app/src/main/java/com/your-app-name</code> 下新建 <code>FlashlightManModule.java</code> 文件</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.your-app-name;<br><br><span class="hljs-keyword">import</span> android.hardware.Camera;<br><span class="hljs-keyword">import</span> android.hardware.camera2.CameraAccessException;<br><span class="hljs-keyword">import</span> android.hardware.camera2.CameraManager;<br><span class="hljs-keyword">import</span> android.hardware.camera2.CameraCharacteristics;<br><span class="hljs-keyword">import</span> android.os.Build;<br><span class="hljs-keyword">import</span> android.content.pm.PackageManager;<br><br><span class="hljs-keyword">import</span> com.facebook.react.bridge.NativeModule;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactApplicationContext;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactContext;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactContextBaseJavaModule;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactMethod;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.Promise;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlashlightManModule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ReactContextBaseJavaModule</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ReactApplicationContext reactContext;<br>  <span class="hljs-keyword">private</span> Camera camera;<br>  <span class="hljs-keyword">private</span> Camera.Parameters mParameters;<br><br>  <span class="hljs-keyword">private</span> CameraManager mCameraManager;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">hasClosed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 定义开关状态，状态为false，打开状态，状态为true，关闭状态;</span><br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">FLASH_LIGHT_ON</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 打开手电筒</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">FLASH_LIGHT_OFF</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 关闭手电筒</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">E_LAYOUT_ERROR</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E_LAYOUT_ERROR&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">HAS_FLASH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HAS_FLASH&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NOT_HAS_FLASH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;NOT_HAS_FLASH&quot;</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">FlashlightManModule</span><span class="hljs-params">(ReactApplicationContext context)</span> &#123;<br>    <span class="hljs-built_in">super</span>(context);<br>    reactContext = context;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;FlashlightManager&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 是否支持闪光灯</span><br>  <span class="hljs-meta">@ReactMethod</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">isSuportFlashlight</span><span class="hljs-params">(Promise promise)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">PackageManager</span> <span class="hljs-variable">packageManager</span> <span class="hljs-operator">=</span> reactContext.getPackageManager();<br>      <span class="hljs-comment">//检查设备是否支持闪光灯</span><br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">hasFlash</span> <span class="hljs-operator">=</span> packageManager.hasSystemFeature(PackageManager.FEATURE_CAMERA_FLASH);<br><br>      <span class="hljs-type">String</span> <span class="hljs-variable">hasFlashStr</span> <span class="hljs-operator">=</span> hasFlash ? HAS_FLASH : NOT_HAS_FLASH;<br><br>      <span class="hljs-keyword">if</span>(!hasFlash) &#123;<br>        promise.reject(E_LAYOUT_ERROR, hasFlashStr);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br><br>      <span class="hljs-type">CameraManager</span> <span class="hljs-variable">mCameraManager</span> <span class="hljs-operator">=</span> (CameraManager) reactContext.getSystemService(ReactContext.CAMERA_SERVICE);<br>      String[] cameraIds = mCameraManager.getCameraIdList();<br>      <span class="hljs-type">String</span> <span class="hljs-variable">cameraId</span> <span class="hljs-operator">=</span> cameraIds[<span class="hljs-number">0</span>];<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> mCameraManager.getCameraCharacteristics(cameraId).get(CameraCharacteristics.FLASH_INFO_AVAILABLE);<br>      promise.resolve(r);<br>    &#125; <span class="hljs-keyword">catch</span>(CameraAccessException e) &#123;<br>      e.printStackTrace();<br>      promise.reject(E_LAYOUT_ERROR, e);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 闪光灯开、关</span><br>  <span class="hljs-meta">@ReactMethod</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toggleLight</span><span class="hljs-params">(<span class="hljs-type">int</span> lightType, Promise promise)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;<br>        <span class="hljs-comment">// Android7.x之后：</span><br>        <span class="hljs-comment">//获取CameraManager</span><br>        <span class="hljs-type">CameraManager</span> <span class="hljs-variable">mCameraManager</span> <span class="hljs-operator">=</span> (CameraManager) reactContext.getSystemService(ReactContext.CAMERA_SERVICE);<br>        String[] cameraIds = mCameraManager.getCameraIdList();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cameraId</span> <span class="hljs-operator">=</span> cameraIds[<span class="hljs-number">0</span>];<br>        hasClosed = lightType == FLASH_LIGHT_ON;<br>        mCameraManager.setTorchMode(cameraId, lightType == FLASH_LIGHT_ON);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Android7.x之前代码</span><br>        <span class="hljs-keyword">if</span>(lightType == FLASH_LIGHT_ON) &#123;<br>          camera = Camera.open();<br>          mParameters = camera.getParameters();<br>          mParameters.setFlashMode(mParameters.FLASH_MODE_TORCH);<span class="hljs-comment">// 开启</span><br>          camera.setParameters(mParameters);<br>          hasClosed = <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          mParameters.setFlashMode(mParameters.FLASH_MODE_OFF);<span class="hljs-comment">// 关闭</span><br>          camera.setParameters(mParameters);<br>          camera.release();<br>          hasClosed = <span class="hljs-literal">true</span>;<br>        &#125;<br>      &#125;<br><br><br>      promise.resolve(lightType);<br>    &#125; <span class="hljs-keyword">catch</span> (CameraAccessException e) &#123;<br>      promise.reject(E_LAYOUT_ERROR, e);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="3"><li><code>android/app/src/main/java/com/your-app-name</code> 下新建 <code>FlashlightManModulePackage.java</code> 文件</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.your-app-name;<br><br><span class="hljs-keyword">import</span> com.facebook.react.ReactPackage;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.NativeModule;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactApplicationContext;<br><span class="hljs-keyword">import</span> com.facebook.react.uimanager.ViewManager;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlashlightManModulePackage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ReactPackage</span> &#123;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> List&lt;ViewManager&gt; <span class="hljs-title function_">createViewManagers</span><span class="hljs-params">(ReactApplicationContext reactContext)</span> &#123;<br>    <span class="hljs-keyword">return</span> Collections.emptyList();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> List&lt;NativeModule&gt; <span class="hljs-title function_">createNativeModules</span><span class="hljs-params">(ReactApplicationContext reactContext)</span> &#123;<br>    List&lt;NativeModule&gt; modules = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    modules.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FlashlightManModule</span>(reactContext));<br><br>    <span class="hljs-keyword">return</span> modules;<br>  &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="4"><li><code>android/app/src/main/java/com/your-app-name/MainApplication.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">...<br><span class="hljs-keyword">import</span> com.your-app-name.FlashlightManModulePackage; <span class="hljs-comment">// &lt;-- 引入你自己的包</span><br>...<br><span class="hljs-keyword">protected</span> List&lt;ReactPackage&gt; <span class="hljs-title function_">getPackages</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-meta">@SuppressWarnings(&quot;UnnecessaryLocalVariable&quot;)</span><br>  List&lt;ReactPackage&gt; packages = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PackageList</span>(<span class="hljs-built_in">this</span>).getPackages();<br>  <span class="hljs-comment">// Packages that cannot be autolinked yet can be added manually here, for example:</span><br>  <span class="hljs-comment">// packages.add(new MyReactNativePackage());</span><br>  packages.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FlashlightManModulePackage</span>()); <span class="hljs-comment">// &lt;-- 添加这一行，类名替换成你的Package类的名字 name.</span><br>  <span class="hljs-keyword">return</span> packages;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="5"><li>js 端调用上面写的原生模块方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">NativeModules</span>, <span class="hljs-title class_">PermissionsAndroid</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-native&#x27;</span>;<br><br><span class="hljs-comment">// public String getName()中返回的字符串</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">FlashlightManager</span> = <span class="hljs-title class_">NativeModules</span>.<span class="hljs-property">FlashlightManager</span>;<br><span class="hljs-keyword">const</span> lightTypeRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">false</span>);<br><br><span class="hljs-comment">// 申请摄像机权限</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleAndroidPermissin</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> granted = <span class="hljs-keyword">await</span> <span class="hljs-title class_">PermissionsAndroid</span>.<span class="hljs-title function_">request</span>(<br>      <span class="hljs-title class_">PermissionsAndroid</span>.<span class="hljs-property">PERMISSIONS</span>.<span class="hljs-property">CAMERA</span>,<br>      &#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;闪光灯授权&#x27;</span>,<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;获取闪光灯权限&#x27;</span>,<br>        <span class="hljs-attr">buttonNeutral</span>: <span class="hljs-string">&#x27;跳过&#x27;</span>,<br>        <span class="hljs-attr">buttonNegative</span>: <span class="hljs-string">&#x27;取消&#x27;</span>,<br>        <span class="hljs-attr">buttonPositive</span>: <span class="hljs-string">&#x27;同意&#x27;</span>,<br>      &#125;,<br>    );<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;授权结果granted==&gt;&#x27;</span>, granted);<br>    <span class="hljs-keyword">if</span> (granted === <span class="hljs-title class_">PermissionsAndroid</span>.<span class="hljs-property">RESULTS</span>.<span class="hljs-property">GRANTED</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;可以打开闪光灯了&#x27;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (granted === <span class="hljs-title class_">PermissionsAndroid</span>.<span class="hljs-property">RESULTS</span>.<span class="hljs-property">DENIED</span>) &#123;<br>      <span class="hljs-title class_">Toast</span>.<span class="hljs-title function_">fail</span>(&#123;<br>        <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;已拒绝打开闪光灯&#x27;</span>,<br>      &#125;);<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title class_">Toast</span>.<span class="hljs-title function_">fail</span>(&#123;<br>        <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;用户已拒绝，且不愿被再次询问&#x27;</span>,<br>      &#125;);<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>();<br>    &#125;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// 打开、关闭手电筒</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">toggleLight</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">handleAndroidPermissin</span>();<br>    <span class="hljs-keyword">const</span>   = <span class="hljs-keyword">await</span> <span class="hljs-title class_">FlashlightManager</span>.<span class="hljs-title function_">isSuportFlashlight</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;当前手机是否支持闪光灯:&#x27;</span>, suportRes);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;准备打开/关闭手电筒:&#x27;</span>, lightTypeRef.<span class="hljs-property">current</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title class_">FlashlightManager</span>.<span class="hljs-title function_">toggleLight</span>(<br>      lightTypeRef.<span class="hljs-property">current</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>,<br>    );<br><br>    lightTypeRef.<span class="hljs-property">current</span> = res;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;手电筒打开/关闭结果:&#x27;</span>, res);<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;打开/关闭手电筒异常&#x27;</span>, error);<br>  &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="6-2-调用自定义原生安卓模块-Notification-通知"><a href="#6-2-调用自定义原生安卓模块-Notification-通知" class="headerlink" title="6.2 调用自定义原生安卓模块-Notification 通知"></a>6.2 调用自定义原生安卓模块-Notification 通知</h3><blockquote><p>点击某按钮(线上应该是收到服务端消息)，手机上出现 app 的通知(自定义通知标题和通知内容，并且携带路径参数)，用户点击通知打开 app，接收路径参数，跳转指定页面</p></blockquote><ol><li><code>android/app/src/main/java/com/your-app-name</code> 新建 <code>MyNotificationModule.java</code>文件</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.your-app-name;<br><br><span class="hljs-keyword">import</span> android.os.Build;<br><span class="hljs-keyword">import</span> android.app.Notification;<br><span class="hljs-keyword">import</span> android.app.NotificationChannel;<br><span class="hljs-keyword">import</span> android.app.NotificationManager;<br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.app.PendingIntent;<br><br><span class="hljs-keyword">import</span> com.facebook.react.bridge.NativeModule;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactApplicationContext;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactContext;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactContextBaseJavaModule;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactMethod;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNotificationModule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ReactContextBaseJavaModule</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ReactApplicationContext reactContext;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CHANNEL_ID</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;notification_channel&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CHANNEL_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;notification_channel_name&quot;</span>;<br><br>  <span class="hljs-keyword">private</span> Class <span class="hljs-title function_">getActivityClass</span><span class="hljs-params">(String activityName)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (activityName.equals(<span class="hljs-string">&quot;PageToJumpTo&quot;</span>)) &#123;<br>        <span class="hljs-keyword">return</span> Class.forName(<span class="hljs-string">&quot;com.your-app-name.MainActivity&quot;</span>);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>      e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyNotificationModule</span><span class="hljs-params">(ReactApplicationContext context)</span> &#123;<br>    <span class="hljs-built_in">super</span>(context);<br>    reactContext = context;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MyNotificationManager&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@ReactMethod</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">int</span> contextId, String title, String content, String activityName, String routePath)</span> &#123;<br>    <span class="hljs-comment">// https://juejin.cn/post/7195496297151381565</span><br>    <span class="hljs-comment">// https://blog.csdn.net/canghieever/article/details/125430116</span><br><br>    <span class="hljs-comment">// 创建一个NotificationManager对通知进行管理</span><br>    <span class="hljs-type">NotificationManager</span> <span class="hljs-variable">mNotificationManager</span> <span class="hljs-operator">=</span> (NotificationManager) reactContext.getSystemService(ReactContext.NOTIFICATION_SERVICE);<br>    <span class="hljs-type">Notification</span> <span class="hljs-variable">notification</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(reactContext, getActivityClass(activityName));<br>    <span class="hljs-comment">// Intent intent = new Intent(reactContext, PageToJumpToActivity.class);</span><br>    <span class="hljs-comment">// intent可以携带参数到指定页面</span><br>    intent.putExtra(<span class="hljs-string">&quot;pageToJumpKey&quot;</span>, routePath);<br><br>    <span class="hljs-comment">// https://blog.csdn.net/yubo_725/article/details/124413000</span><br>    <span class="hljs-comment">// Targeting S+ (version 31 and above) requires that one of FLAG_IMMUTABLE or FLAG_MUTABLE be specified</span><br>    PendingIntent pendingIntent;<br>    <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) &#123;<br>      <span class="hljs-comment">// https://blog.csdn.net/zhangxiweicaochen/article/details/14002469</span><br>      <span class="hljs-comment">// PendingIntent.getActivity(context,id, intent,PendingIntent.FLAG_UPDATE_CURRENT);</span><br>      <span class="hljs-comment">// 上面id，一定要唯一，不然Intent就是接受到的重复！</span><br>      pendingIntent = PendingIntent.getActivity(reactContext, contextId, intent, PendingIntent.FLAG_IMMUTABLE);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      pendingIntent = PendingIntent.getActivity(reactContext, contextId, intent, PendingIntent.FLAG_UPDATE_CURRENT);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;<br>      <span class="hljs-comment">// 安卓8.0之后</span><br>      <span class="hljs-comment">// 创建channel</span><br>      <span class="hljs-comment">// 参数：channel ID(ID可以随便定义，但保证全局唯一性)，channel 名称，重要等级</span><br>      <span class="hljs-type">NotificationChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationChannel</span>(CHANNEL_ID, CHANNEL_NAME, NotificationManager.IMPORTANCE_HIGH);<br>      mNotificationManager.createNotificationChannel(channel);<br><br>      notification = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Notification</span>.Builder(reactContext, CHANNEL_ID)<br>                .setContentTitle(title)<br>                .setContentText(content)<br>                .setSmallIcon(R.mipmap.ic_launcher)<br>                .setAutoCancel(<span class="hljs-literal">true</span>) <span class="hljs-comment">// 当点击通知后显示栏的通知不再显示</span><br>                .setContentIntent(pendingIntent) <span class="hljs-comment">// 点击跳到通知详情</span><br>                .build();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      notification = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Notification</span>.Builder(reactContext)<br>                .setContentTitle(title)<br>                .setContentText(content)<br>                .setSmallIcon(R.mipmap.ic_launcher)<br>                .setAutoCancel(<span class="hljs-literal">true</span>)<br>                .setContentIntent(pendingIntent)<br>                .build();<br>    &#125;<br><br>    <span class="hljs-comment">// notify(int id,Notification notification)</span><br>    <span class="hljs-comment">// 第一个参数id可以随便填，第二个参数就是我们要发送的通知</span><br>    mNotificationManager.notify(<span class="hljs-number">100</span>, notification);<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="2"><li><code>android/app/src/main/java/com/your-app-name</code> 新建 <code>MyNotificationModulePackage.java</code>文件</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.your-app-name;<br><br><span class="hljs-keyword">import</span> com.facebook.react.ReactPackage;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.NativeModule;<br><span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactApplicationContext;<br><span class="hljs-keyword">import</span> com.facebook.react.uimanager.ViewManager;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNotificationModulePackage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ReactPackage</span> &#123;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> List&lt;ViewManager&gt; <span class="hljs-title function_">createViewManagers</span><span class="hljs-params">(ReactApplicationContext reactContext)</span> &#123;<br>    <span class="hljs-keyword">return</span> Collections.emptyList();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> List&lt;NativeModule&gt; <span class="hljs-title function_">createNativeModules</span><span class="hljs-params">(ReactApplicationContext reactContext)</span> &#123;<br>    List&lt;NativeModule&gt; modules = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    modules.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyNotificationModule</span>(reactContext));<br><br>    <span class="hljs-keyword">return</span> modules;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="3"><li><code>android/app/src/main/java/com/your-app-name/MainApplication.java</code>文件中引入自己的模块</li></ol><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-addition">+ import com.your-app-name.MyNotificationModulePackage;</span><br><br>public class MainApplication extends Application implements ReactApplication &#123;<br>    ...<br>    @Override<br>    protected List&lt;ReactPackage&gt; getPackages() &#123;<br>      @SuppressWarnings(&quot;UnnecessaryLocalVariable&quot;)<br>      List&lt;ReactPackage&gt; packages = new PackageList(this).getPackages();<br><br><span class="hljs-addition">+     packages.add(new MyNotificationModulePackage());// &lt;-- 添加这一行，类名替换成你的Package类的名字 name.</span><br>      return packages;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="4"><li><code>android/app/src/main/java/com/your-app-name/MainActivity.java</code> 添加代码监听 onNewIntent 事件，获取 <code>MyNotificationModulePackage</code>文件<code>intent.putExtra</code>的参数</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">+ <span class="hljs-keyword">import</span> android.content.Intent;<br>+ <span class="hljs-keyword">import</span> com.facebook.react.bridge.WritableMap;<br>+ <span class="hljs-keyword">import</span> com.facebook.react.bridge.Arguments;<br>+ <span class="hljs-keyword">import</span> com.facebook.react.modules.core.DeviceEventManagerModule;<br>+ <span class="hljs-keyword">import</span> com.facebook.react.bridge.ReactApplicationContext;<br><span class="hljs-comment">// import com.facebook.react.bridge.ReactContext;</span><br>+ <span class="hljs-keyword">import</span> com.facebook.react.ReactInstanceManager;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ReactActivity</span> &#123;<br>    ...<br>+    <span class="hljs-meta">@Override</span><br>+    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onNewIntent</span><span class="hljs-params">(Intent intent)</span> &#123;<br>+       <span class="hljs-comment">// 监听onNewIntent事件</span><br>+       <span class="hljs-built_in">super</span>.onNewIntent(intent);<br>+       <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> intent.getStringExtra(<span class="hljs-string">&quot;pageToJumpKey&quot;</span>);<br><br>+        <span class="hljs-keyword">if</span>(data != <span class="hljs-literal">null</span>) &#123;<br>+          <span class="hljs-type">WritableMap</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> Arguments.createMap();<br>+          params.putString(<span class="hljs-string">&quot;pageToJumpKey&quot;</span>, data);<br><br>+          <span class="hljs-type">ReactInstanceManager</span> <span class="hljs-variable">mReactInstanceManager</span> <span class="hljs-operator">=</span> getReactNativeHost().getReactInstanceManager();<br>+          ReactApplicationContext context= (ReactApplicationContext) mReactInstanceManager.getCurrentReactContext();<br><br>+          context<br>+                  .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)<br>+                  .emit(<span class="hljs-string">&quot;pageToJumpKey&quot;</span>, params);<br>+        &#125;<br>+    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="5"><li>js 端调用 MyNotificationModule 模块</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NativeModules</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-native&quot;</span>;<br><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">MyNotificationManager</span> = <span class="hljs-title class_">NativeModules</span>.<span class="hljs-property">MyNotificationManager</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleNotification</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">handleNotificationPermission</span>();<br><br>    <span class="hljs-keyword">const</span> ctxId = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">10000000</span>);<br>    <span class="hljs-title class_">MyNotificationManager</span>.<span class="hljs-title function_">show</span>(<br>      ctxId, <span class="hljs-comment">// android中PendingIntent.getActivity的id,每次调用必须唯一，否则可能拿到旧数据</span><br>      <span class="hljs-string">&quot;文章更新啦！&quot;</span>, <span class="hljs-comment">// 通知标题</span><br>      <span class="hljs-string">&quot;查看新文章&quot;</span>, <span class="hljs-comment">// 通知内容</span><br>      <span class="hljs-string">&quot;PageToJumpTo&quot;</span>, <span class="hljs-comment">// 需要调用android中哪个activity名称</span><br>      <span class="hljs-string">&quot;/list&quot;</span> <span class="hljs-comment">// 点击通知时需要跳转的路径</span><br>    );<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>  &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="6"><li>js 端监听点击通知传递进来的参数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo, useEffect, <span class="hljs-title class_">Fragment</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NativeEventEmitter</span>, <span class="hljs-title class_">NativeModules</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-native&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-native&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">PageJumpTo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> eventEmitter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeEventEmitter</span>(<br>      <span class="hljs-title class_">NativeModules</span>.<span class="hljs-property">MyNotificationModule</span><br>    );<br><br>    <span class="hljs-keyword">const</span> eventListener = eventEmitter.<span class="hljs-title function_">addListener</span>(<span class="hljs-string">&quot;pageToJumpKey&quot;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// data就是MainActivity传过来的params参数</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;pageToJumpKey==&gt;&quot;</span>, data);<br>      <span class="hljs-title function_">navigate</span>(data.<span class="hljs-property">pageToJumpKey</span>);<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      eventListener &amp;&amp; eventListener.<span class="hljs-title function_">remove</span>(); <span class="hljs-comment">// 组件卸载时记得移除监听事件</span><br>    &#125;;<br>  &#125;, [navigate]);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Fragment</span> /&gt;</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">memo</span>(<span class="hljs-title class_">PageJumpTo</span>);<br></code></pre></div></td></tr></table></figure><h2 id="7-调试"><a href="#7-调试" class="headerlink" title="7. 调试"></a>7. 调试</h2><ol><li>Chrome 浏览器 的 DevTools 来调试 Hermes 上的 JS</li></ol><p><a href="https://www.reactnative.cn/docs/hermes#%E4%BD%BF%E7%94%A8-google-chrome-%E7%9A%84-devtools-%E6%9D%A5%E8%B0%83%E8%AF%95-hermes-%E4%B8%8A%E7%9A%84-js">文档</a></p><ol start="2"><li>react-devtools 调试</li></ol><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm"><span class="hljs-symbol">yarn</span> <span class="hljs-meta">global</span> <span class="hljs-keyword">add</span> react-devtools<br></code></pre></div></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">npx react-devtools</span><br></code></pre></div></td></tr></table></figure><p>如果用的是本地手机，还需要执行</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">adb</span> reverse tcp:<span class="hljs-number">8097</span> tcp:<span class="hljs-number">8097</span><br></code></pre></div></td></tr></table></figure><h2 id="8-打包发布"><a href="#8-打包发布" class="headerlink" title="8. 打包发布"></a>8. 打包发布</h2><p>跟着<a href="https://www.reactnative.cn/docs/signed-apk-android">文档</a>来即可</p><h2 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a>9. 总结</h2><p>练习时长 2 月半，远远不够，app 很粗糙，距离上架还有一段距离，况且代码里现在只兼顾到了 android，忽略了 ios。</p>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>react native</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
      <tag>react native</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>仿抖音左右歪头图片选择</title>
    <link href="/2022/11/29/face/"/>
    <url>/2022/11/29/face/</url>
    
    <content type="html"><![CDATA[<ul><li><p><a href="https://srect.github.io/face-api.js">在线移动端体验</a></p></li><li><p><a href="https://github.com/sRect/face-api.js/tree/dy">项目 github 仓库</a></p></li></ul><p><img src="/assets/img/face/gif.gif"></p><blockquote><p>前一阵子在刷抖音时，看到一个通过左右歪头选择两侧图片的视频，感觉很有趣。顿时想到了 n 年前的<a href="https://github.com/justadudewhohacks/face-api.js"><strong>face-api.js</strong></a>，那就基于这个来做吧。总体做好后，有很多细节需要改进，不够细腻丝滑。</p></blockquote><h3 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1. 需求分析"></a>1. 需求分析</h3><p>直接开搞吧！</p><ol><li>页面基本布局，左右两侧图片，而且有缩放和移动动画</li><li>需要打开摄像头，获取视频流，通过 video 展现出来</li><li>需要检测人脸是向哪一侧歪头</li></ol><h3 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2. 具体实现"></a>2. 具体实现</h3><h4 id="2-1-页面布局和-animation-动画"><a href="#2-1-页面布局和-animation-动画" class="headerlink" title="2.1 页面布局和 animation 动画"></a>2.1 页面布局和 animation 动画</h4><p>这个不难，布局好后，就是添加 css 动画，我这里写的很粗糙，不细腻，但勉强能用，例如下面 <em>leftHeartMove</em> 为中间的小爱心向左侧移动动画</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.heart</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: -<span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>) <span class="hljs-built_in">rotateZ</span>(<span class="hljs-number">0deg</span>) <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-attribute">animation</span>: leftHeartMove <span class="hljs-number">0.5s</span> linear;<br>  <span class="hljs-attribute">animation-fill-mode</span>: forwards;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> leftHeartMove &#123;<br>  <span class="hljs-selector-tag">from</span> &#123;<br>    <span class="hljs-attribute">top</span>: -<span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>) <span class="hljs-built_in">rotateZ</span>(<span class="hljs-number">0deg</span>) <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-selector-tag">to</span> &#123;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">65px</span>;<br>    <span class="hljs-attribute">left</span>: -<span class="hljs-number">13%</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>) <span class="hljs-built_in">rotateZ</span>(-<span class="hljs-number">15deg</span>) <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.2</span>);<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-2-打开摄像头并显示"><a href="#2-2-打开摄像头并显示" class="headerlink" title="2.2 打开摄像头并显示"></a>2.2 打开摄像头并显示</h4><p><strong>注意点</strong></p><ol><li>关于 h5<code>navigator.mediaDevices.getUserMedia</code> 这个 api，本地开发<code>localhost</code>是可以拉起摄像头打开提示的，线上部署必须是<code>https</code>节点才行，<code>http</code>不能唤起打开摄像头</li></ol><p><img src="/./assets/img/face/dialog.png"></p><ol start="2"><li><p>关于获取到视频流后，<code>video</code>视频播放，需要镜面翻转，这个可以通过 css 的<code>transform: rotateY(180deg)</code>来翻转</p></li><li><p>关于<code>video</code>播放不能在手机上竖屏全屏，可以给 video 设置 css<code>object-fit:cover</code>来充满屏幕</p></li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;video&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;video&quot;</span> <span class="hljs-attr">playsinline</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">muted</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.video</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">180deg</span>);<br>  <span class="hljs-attribute">object-fit</span>: cover;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>获取摄像头视频流</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-title function_">getUserMedia</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (navigator.<span class="hljs-property">mediaDevices</span> &amp;&amp; navigator.<span class="hljs-property">mediaDevices</span>.<span class="hljs-property">getUserMedia</span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#examples</span><br>      <span class="hljs-keyword">const</span> stream = <span class="hljs-keyword">await</span> navigator.<span class="hljs-property">mediaDevices</span>.<span class="hljs-title function_">getUserMedia</span>(&#123;<br>        <span class="hljs-attr">audio</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">video</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">video</span>: &#123;<br>          <span class="hljs-attr">facingMode</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-comment">// 前置摄像头</span><br>          <span class="hljs-comment">// facingMode: &#123; exact: &quot;environment&quot; &#125;，// 后置摄像头</span><br>          <span class="hljs-attr">width</span>: &#123; <span class="hljs-attr">min</span>: <span class="hljs-number">1280</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">1920</span> &#125;,<br>          <span class="hljs-attr">height</span>: &#123; <span class="hljs-attr">min</span>: <span class="hljs-number">720</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">1080</span> &#125;,<br>        &#125;,<br>      &#125;);<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(stream);<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> errorMessage =<br>    <span class="hljs-string">&quot;This browser does not support video capture, or this device does not have a camera&quot;</span>;<br>  <span class="hljs-title function_">alert</span>(errorMessage);<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>video 播放视频流</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-title function_">openCamera</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> stream = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getUserMedia</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">video</span>.<span class="hljs-property">srcObject</span> = stream;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">video</span>.<span class="hljs-property">onloadedmetadata</span> = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">video</span>.<span class="hljs-title function_">play</span>();<br>    &#125;;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;打开摄像头失败&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>关闭视频</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-title function_">closeCamera</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/stop</span><br>  <span class="hljs-keyword">const</span> tracks = <span class="hljs-variable language_">this</span>.<span class="hljs-property">video</span>.<span class="hljs-property">srcObject</span>.<span class="hljs-title function_">getTracks</span>();<br><br>  tracks.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">track</span>) =&gt;</span> &#123;<br>    track.<span class="hljs-title function_">stop</span>();<br>  &#125;);<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">video</span>.<span class="hljs-property">srcObject</span>.<span class="hljs-property">srcObject</span> = <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-3-检测人脸左右倾斜"><a href="#2-3-检测人脸左右倾斜" class="headerlink" title="2.3 检测人脸左右倾斜"></a>2.3 检测人脸左右倾斜</h4><p><img src="/assets/img/face/landmarks.png"></p><p>通过<code>face-api.js</code>拿到人脸<code>landmarks</code>特征数据后，可以直接拿到左右眼的数据，分别通过求 Y 轴方向的平均值，然后比较这个平均值，便可以简单得出人脸向左还是向右倾斜，简单吧，角度都不用求了！</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: relative;width: 100%;height: 100%;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">video</span></span><br><span class="hljs-tag">    <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;video&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;video&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">playsinline</span></span><br><span class="hljs-tag">    <span class="hljs-attr">autoplay</span></span><br><span class="hljs-tag">    <span class="hljs-attr">muted</span></span><br><span class="hljs-tag">    <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;object-fit:cover&quot;</span></span><br><span class="hljs-tag">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;overlay&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;overlay&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.video</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">180deg</span>);<br>&#125;<br><br><span class="hljs-selector-class">.overlay</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>加载模型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> faceapi <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;face-api.js&quot;</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">loadWeight</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 加载模型</span><br>  <span class="hljs-keyword">await</span> faceapi.<span class="hljs-property">nets</span>.<span class="hljs-property">ssdMobilenetv1</span>.<span class="hljs-title function_">load</span>(<br>    <span class="hljs-string">&quot;./static/weights/ssd_mobilenetv1_model-weights_manifest.json&quot;</span><br>  );<br>  <span class="hljs-comment">// 加载人脸68特征模型数据</span><br>  <span class="hljs-keyword">await</span> faceapi.<span class="hljs-property">nets</span>.<span class="hljs-property">faceLandmark68Net</span>.<span class="hljs-title function_">load</span>(<br>    <span class="hljs-string">&quot;./static/weights/face_landmark_68_model-weights_manifest.json&quot;</span><br>  );<br>  <span class="hljs-comment">// await faceapi.nets.faceExpressionNet.load(</span><br>  <span class="hljs-comment">//   &quot;/static/weights/face_expression_model-weights_manifest.json&quot;</span><br>  <span class="hljs-comment">// );</span><br>  <span class="hljs-comment">// await faceapi.nets.faceRecognitionNet.load(</span><br>  <span class="hljs-comment">//   &quot;./static/weights/face_recognition_model-weights_manifest.json&quot;</span><br>  <span class="hljs-comment">// );</span><br>  <span class="hljs-keyword">await</span> faceapi.<span class="hljs-property">nets</span>.<span class="hljs-property">ageGenderNet</span>.<span class="hljs-title function_">load</span>(<br>    <span class="hljs-string">&quot;./static/weights/age_gender_model-weights_manifest.json&quot;</span><br>  );<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;模型加载完成&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>计算人脸左右倾斜</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title function_">handleFaceLeftOrRight</span>(<span class="hljs-params">landmarks</span>) &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DIFF_NUM</span> = <span class="hljs-number">15</span>; <span class="hljs-comment">// 偏差</span><br>  <span class="hljs-keyword">let</span> leftEye = landmarks.<span class="hljs-title function_">getLeftEye</span>(); <span class="hljs-comment">// 左眼数据</span><br>  <span class="hljs-keyword">let</span> rightEye = landmarks.<span class="hljs-title function_">getRightEye</span>(); <span class="hljs-comment">// 右眼数据</span><br>  <span class="hljs-comment">// let nose = landmarks.getNose();</span><br><br>  <span class="hljs-keyword">let</span> leftEyeSumPoint = leftEye.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, cur</span>) =&gt;</span> (&#123;<br>    <span class="hljs-attr">x</span>: prev.<span class="hljs-property">x</span> + cur.<span class="hljs-property">x</span>,<br>    <span class="hljs-attr">y</span>: prev.<span class="hljs-property">y</span> + cur.<span class="hljs-property">y</span>,<br>  &#125;));<br><br>  <span class="hljs-keyword">let</span> rightEyeSumPoint = rightEye.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, cur</span>) =&gt;</span> (&#123;<br>    <span class="hljs-attr">x</span>: prev.<span class="hljs-property">x</span> + cur.<span class="hljs-property">x</span>,<br>    <span class="hljs-attr">y</span>: prev.<span class="hljs-property">y</span> + cur.<span class="hljs-property">y</span>,<br>  &#125;));<br><br>  <span class="hljs-comment">// let noseSumPoint = nose.reduce((prev, cur) =&gt; (&#123;</span><br>  <span class="hljs-comment">//   x: prev.x + cur.x,</span><br>  <span class="hljs-comment">//   y: prev.y + cur.y,</span><br>  <span class="hljs-comment">// &#125;));</span><br><br>  <span class="hljs-keyword">let</span> leftEyeAvgPoint = &#123;<br>    <span class="hljs-attr">x</span>: leftEyeSumPoint.<span class="hljs-property">x</span> / leftEye.<span class="hljs-property">length</span>,<br>    <span class="hljs-attr">y</span>: leftEyeSumPoint.<span class="hljs-property">y</span> / leftEye.<span class="hljs-property">length</span>,<br>  &#125;;<br><br>  <span class="hljs-keyword">let</span> rightEyeAvgPoint = &#123;<br>    <span class="hljs-attr">x</span>: rightEyeSumPoint.<span class="hljs-property">x</span> / leftEye.<span class="hljs-property">length</span>,<br>    <span class="hljs-attr">y</span>: rightEyeSumPoint.<span class="hljs-property">y</span> / leftEye.<span class="hljs-property">length</span>,<br>  &#125;;<br><br>  <span class="hljs-comment">// let noseAvgPoint = &#123;</span><br>  <span class="hljs-comment">//   x: noseSumPoint.x / leftEye.length,</span><br>  <span class="hljs-comment">//   y: noseSumPoint.y / leftEye.length,</span><br>  <span class="hljs-comment">// &#125;;</span><br><br>  <span class="hljs-comment">// console.log(leftEyeAvgPoint, rightEyeAvgPoint, noseAvgPoint);</span><br>  <span class="hljs-keyword">let</span> diff = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(leftEyeAvgPoint.<span class="hljs-property">y</span> - rightEyeAvgPoint.<span class="hljs-property">y</span>);<br><br>  <span class="hljs-keyword">return</span> diff &gt; <span class="hljs-variable constant_">DIFF_NUM</span><br>    ? leftEyeAvgPoint.<span class="hljs-property">y</span> &gt; rightEyeAvgPoint.<span class="hljs-property">y</span><br>      ? <span class="hljs-string">&quot;left&quot;</span><br>      : <span class="hljs-string">&quot;right&quot;</span><br>    : <span class="hljs-string">&quot;center&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>分析 video 视频流</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-title function_">handleVideoFaceTracking</span>(<span class="hljs-params">cb</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">closed</span>) &#123;<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">cancelAnimationFrame</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">raf</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> options = <span class="hljs-keyword">new</span> faceapi.<span class="hljs-title class_">SsdMobilenetv1Options</span>();<br><br>    <span class="hljs-keyword">let</span> task = faceapi.<span class="hljs-title function_">detectAllFaces</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">video</span>, options);<br>    task = task.<span class="hljs-title function_">withFaceLandmarks</span>().<span class="hljs-title function_">withAgeAndGender</span>();<br>    <span class="hljs-keyword">const</span> results = <span class="hljs-keyword">await</span> task;<br><br>    <span class="hljs-comment">// overlay为canvas元素</span><br>    <span class="hljs-comment">// video即为video元素</span><br>    <span class="hljs-keyword">const</span> dims = faceapi.<span class="hljs-title function_">matchDimensions</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">overlay</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">video</span>, <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">const</span> resizedResults = faceapi.<span class="hljs-title function_">resizeResults</span>(results, dims);<br><br>    <span class="hljs-comment">// console.log(&quot;options==&gt;&quot;, options);</span><br>    <span class="hljs-comment">// console.log(&quot;resizedResults==&gt;&quot;, resizedResults);</span><br>    cb &amp;&amp; <span class="hljs-title function_">cb</span>(resizedResults);<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">raf</span> = <span class="hljs-title function_">requestAnimationFrame</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">handleVideoFaceTracking</span>(cb));<br>  &#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h3><ol><li><p><a href="https://github.com/justadudewhohacks/face-api.js">face-api.js</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#examples">getUserMedia MDN</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>face-api.js</tag>
      
      <tag>人脸识别</tag>
      
      <tag>抖音</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uniapp 打包 h5 问题总结</title>
    <link href="/2022/08/08/uniapp/"/>
    <url>/2022/08/08/uniapp/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://juejin.cn/post/7129492032241795080">本文掘金链接</a></li></ul><p>本文对应操作系统及 hbuilderx 版本等</p><table><thead><tr><th>-</th><th>-</th></tr></thead><tbody><tr><td>操作系统</td><td>macOS</td></tr><tr><td>HbuilderX</td><td>3.4.18.20220630</td></tr><tr><td>Vue</td><td>2.x</td></tr><tr><td>uView</td><td>1.x</td></tr></tbody></table><hr><h2 id="1-项目背景"><a href="#1-项目背景" class="headerlink" title="1. 项目背景"></a>1. 项目背景</h2><p>这是一个嵌套在 flutter 里的 h5 项目，外面壳子是 app，里面大部分的页面是 h5，app 直接用 webview 显示 h5 页面</p><h2 id="2-开发-h5-为什么要用-uniapp"><a href="#2-开发-h5-为什么要用-uniapp" class="headerlink" title="2. 开发 h5 为什么要用 uniapp?"></a>2. 开发 h5 为什么要用 uniapp?</h2><p>因为还要开发微信小程序，使用 uniapp，可以跨平台，节省时间</p><h2 id="3-项目初始化"><a href="#3-项目初始化" class="headerlink" title="3. 项目初始化"></a>3. 项目初始化</h2><p>项目初始化是使用<a href="https://uniapp.dcloud.net.cn/quickstart-hx.html">HBuilderX 可视化界面</a>创建的项目，没有使用<a href="https://uniapp.dcloud.net.cn/quickstart-cli.html">vue-cli 命令行</a>的方式。</p><p>通过官方 IDE 的方式创建的项目，这给后面项目 CI&#x2F;CD 构建部署，就带来了麻烦。因为不是命令行创建的项目，没法在 linux 里执行命令，只有在本地打包完，然后上传打包完的<code>unpackage</code>目录进行部署。当然使用 HBuilderX 也有很多方便的地方。</p><h3 id="3-1-uni-app-HBuilderX-工程与-vue-cli-工程相互转换"><a href="#3-1-uni-app-HBuilderX-工程与-vue-cli-工程相互转换" class="headerlink" title="3.1 uni-app HBuilderX 工程与 vue-cli 工程相互转换"></a>3.1 uni-app HBuilderX 工程与 vue-cli 工程相互转换</h3><p><a href="https://ask.dcloud.net.cn/article/35750">HBuilderX 工程转换为 vue-cli 工程</a>，看到评论区有坑，而且项目一大，遇到坑不一定能解决掉，这样代价就大了。</p><h3 id="3-2-通过-HBuilderX-方式创建的项目，可以调用-hbuilderx-的打包命令吗？"><a href="#3-2-通过-HBuilderX-方式创建的项目，可以调用-hbuilderx-的打包命令吗？" class="headerlink" title="3.2 通过 HBuilderX 方式创建的项目，可以调用 hbuilderx 的打包命令吗？"></a>3.2 通过 HBuilderX 方式创建的项目，可以调用 hbuilderx 的打包命令吗？</h3><p>也就是通过命令行调用 hbuilderx 的打包功能</p><ul><li><a href="https://hx.dcloud.net.cn/cli/publish-h5">CLI 发行 uni-app 到 H5</a></li><li><a href="https://hx.dcloud.net.cn/cli/env">cli 配置环境变量</a></li></ul><p>但是这样还是没有一开始通过 vue-cli 命令行的方式方便，而且都是在本地 windows 或者 mac 上打包，没法在 linux 上通过 shell 脚本执行打包。最终只能是本地打包完，上传 git 仓库。这里有优雅的解决方式的，评论区分享下。</p><h3 id="3-3-通过-HBuilderX-方式创建的项目，可以使用-npm-吗？"><a href="#3-3-通过-HBuilderX-方式创建的项目，可以使用-npm-吗？" class="headerlink" title="3.3 通过 HBuilderX 方式创建的项目，可以使用 npm 吗？"></a>3.3 通过 HBuilderX 方式创建的项目，可以使用 npm 吗？</h3><p>官方文档明确说，可以的</p><h2 id="4-生产打包去除console"><a href="#4-生产打包去除console" class="headerlink" title="4. 生产打包去除console"></a>4. 生产打包去除<code>console</code></h2><p><a href="https://uniapp.dcloud.net.cn/collocation/vue-config.html">官方文档</a></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// vue.config.js</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 发行或运行时启用了压缩时会生效</span><br>    config.<span class="hljs-property">optimization</span>.<span class="hljs-title function_">minimizer</span>(<span class="hljs-string">&quot;terser&quot;</span>).<span class="hljs-title function_">tap</span>(<span class="hljs-function">(<span class="hljs-params">args</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> compress = args[<span class="hljs-number">0</span>].<span class="hljs-property">terserOptions</span>.<span class="hljs-property">compress</span>;<br>      <span class="hljs-comment">// 非 App 平台移除 console 代码(包含所有 console 方法，如 log,debug,info...)</span><br>      compress.<span class="hljs-property">drop_console</span> = <span class="hljs-literal">true</span>;<br>      compress.<span class="hljs-property">pure_funcs</span> = [<br>        <span class="hljs-string">&quot;__f__&quot;</span>, <span class="hljs-comment">// App 平台 vue 移除日志代码</span><br>        <span class="hljs-comment">// &#x27;console.debug&#x27; // 可移除指定的 console 方法</span><br>      ];<br>      <span class="hljs-keyword">return</span> args;<br>    &#125;);<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="5-HBuilderX-创建的项目打包时如何区分环境？"><a href="#5-HBuilderX-创建的项目打包时如何区分环境？" class="headerlink" title="5. HBuilderX 创建的项目打包时如何区分环境？"></a>5. HBuilderX 创建的项目打包时如何区分环境？</h2><p>意思就是，如何像执行<code>npm run build:dev</code>执行的测试环境打包，<code>npm run build:prod</code>执行的是生产环境打包。</p><p><a href="https://uniapp.dcloud.net.cn/collocation/package.html#%E6%A6%82%E8%BF%B0">官方文档</a></p><p>自定义发行-package.json 中添加配置</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;uni-app&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;h5-prod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;h5:prod&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;browser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;UNI_PLATFORM&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;h5&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;NODE_ENV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;production&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;DEPLOY_ENV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prod&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;define&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;CUSTOM-CONST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;h5-dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;h5:dev&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;browser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;UNI_PLATFORM&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;h5&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;NODE_ENV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;development&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;DEPLOY_ENV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dev&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;define&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;CUSTOM-CONST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure><p>添加后，本地开发，就可以在菜单<code>运行 - h5:dev</code>本地启动项目，<code>发行 - 自定义发行 - h5:dev</code>测试环境打包，当然点击<code>发行 - 自定义发行 - h5:prod</code>是生产环境打包。</p><h2 id="6-根目录vue-config-js中如何获取到自定义-process-变量？"><a href="#6-根目录vue-config-js中如何获取到自定义-process-变量？" class="headerlink" title="6. 根目录vue.config.js中如何获取到自定义 process 变量？"></a>6. 根目录<code>vue.config.js</code>中如何获取到自定义 <code>process</code> 变量？</h2><p>因为想在测试环境打包时保留代码中的 debugger 日志，生产环境打包的时候去除日志打印。</p><p>像上面定义的<code>process.env.DEPLOY_ENV</code>这个变量，业务代码中可以正常获取到，但是在 vue.config.js 这个配置文件中拿不到。</p><ol><li>安装<code>dotenv</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm i dotenv -D<br></code></pre></div></td></tr></table></figure><ol start="2"><li>修改<code>vue.config.js</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;dotenv&quot;</span>).<span class="hljs-title function_">config</span>();<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-title function_">chainWebpack</span>(<span class="hljs-params">config</span>) &#123;<br>    config.<span class="hljs-title function_">when</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&quot;production&quot;</span>, <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 我们可以拿到process.env.UNI_SCRIPT这个变量来进行操作</span><br>      <span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">UNI_SCRIPT</span> === <span class="hljs-string">&quot;h5-prod&quot;</span>) &#123;<br>        <span class="hljs-comment">// https://uniapp.dcloud.io/collocation/vue-config.html</span><br>        <span class="hljs-comment">// 发行或运行时启用了压缩时会生效</span><br>        config.<span class="hljs-property">optimization</span>.<span class="hljs-title function_">minimizer</span>(<span class="hljs-string">&quot;terser&quot;</span>).<span class="hljs-title function_">tap</span>(<span class="hljs-function">(<span class="hljs-params">args</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">const</span> compress = args[<span class="hljs-number">0</span>].<span class="hljs-property">terserOptions</span>.<span class="hljs-property">compress</span>;<br>          compress.<span class="hljs-property">drop_console</span> = <span class="hljs-literal">true</span>;<br>          compress.<span class="hljs-property">pure_funcs</span> = [<br>            <span class="hljs-string">&quot;__f__&quot;</span>, <span class="hljs-comment">// App 平台 vue 移除日志代码</span><br>          ];<br>          <span class="hljs-keyword">return</span> args;<br>        &#125;);<br>      &#125;<br>    &#125;);<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="7-打包-h5-过后文件名过长问题"><a href="#7-打包-h5-过后文件名过长问题" class="headerlink" title="7. 打包 h5 过后文件名过长问题"></a>7. 打包 h5 过后文件名过长问题</h2><p>项目稍微大点，页面目录嵌套深一点，打包出来的文件名称巨长，甚至达到 100 字符长度以上。文件名过长，就会带来很恶心的问题，比如被 nginx 拦截，拿不到文件内容，导致页面挂掉。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// vue.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    config.<span class="hljs-title function_">when</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&quot;production&quot;</span>, <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>      config.<span class="hljs-property">output</span><br>        .<span class="hljs-title function_">filename</span>(<span class="hljs-string">&quot;static/js/[name]-[contenthash].js&quot;</span>)<br>        .<span class="hljs-title function_">chunkFilename</span>(<span class="hljs-string">&quot;static/js/[id]-[chunkhash].js&quot;</span>);<br>    &#125;);<br><br>    config.<span class="hljs-property">optimization</span>.<span class="hljs-title function_">splitChunks</span>(&#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">module</span>, chunks, cacheGroupKey</span>) &#123;<br>        <span class="hljs-keyword">const</span> moduleFileName = <span class="hljs-variable language_">module</span><br>          .<span class="hljs-title function_">identifier</span>()<br>          .<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;/&quot;</span>)<br>          .<span class="hljs-title function_">reduceRight</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item);<br>        <span class="hljs-keyword">const</span> allChunksNames = chunks.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">name</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;~&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;moduleFileName&#125;</span>`</span>;<br>      &#125;,<br>    &#125;);<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="8-打包-h5-后chunk-vendors文件体积过大，而且页面部署后打开也很慢"><a href="#8-打包-h5-后chunk-vendors文件体积过大，而且页面部署后打开也很慢" class="headerlink" title="8. 打包 h5 后chunk-vendors文件体积过大，而且页面部署后打开也很慢"></a>8. 打包 h5 后<code>chunk-vendors</code>文件体积过大，而且页面部署后打开也很慢</h2><p>庆幸的是，暴露了<code>vue.config.js</code>这个文件交给开发者，不然处理起来真的头大。</p><h3 id="8-1-首先启用manifest-json配置文件中的tree-shaking配置，“摇掉”那些冗余代码"><a href="#8-1-首先启用manifest-json配置文件中的tree-shaking配置，“摇掉”那些冗余代码" class="headerlink" title="8.1 首先启用manifest.json配置文件中的tree-shaking配置，“摇掉”那些冗余代码"></a>8.1 首先启用<code>manifest.json</code>配置文件中的<code>tree-shaking</code>配置，“摇掉”那些冗余代码</h3><h3 id="8-2-移除-prefetch-插件"><a href="#8-2-移除-prefetch-插件" class="headerlink" title="8.2 移除 prefetch 插件"></a>8.2 移除 prefetch 插件</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 这个视自己的项目而定</span><br><span class="hljs-comment">// vue.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 移除 prefetch 插件</span><br>    <span class="hljs-comment">// https://cli.vuejs.org/zh/guide/html-and-static-assets.html#prefetch</span><br>    config.<span class="hljs-property">plugins</span>.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&quot;prefetch&quot;</span>);<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="8-3-打包进行-gz-或-br-压缩"><a href="#8-3-打包进行-gz-或-br-压缩" class="headerlink" title="8.3 打包进行 gz 或 br 压缩"></a>8.3 打包进行 gz 或 br 压缩</h3><ol><li>安装<code>compression-webpack-plugin</code></li></ol><blockquote><p>这里有一个问题，7.x 版本后只支持 webpack5.x 版本，这里是 webpack4.x，只能使用 6.x 版本<br><a href="https://github.com/webpack-contrib/compression-webpack-plugin/releases?page=2">https://github.com/webpack-contrib/compression-webpack-plugin/releases?page=2</a></p></blockquote><figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt">7.0.0 (2020-12-02)<br><br>BREAKING CHANGES<br>  minimum supported webpack version is ^5.1.0<br></code></pre></div></td></tr></table></figure><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm i compression-webpack-plugin@6.1.1 -D<br></code></pre></div></td></tr></table></figure><ol start="2"><li>修改 vue.config.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// vue.config.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CompressionPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;compression-webpack-plugin&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">configureWebpack</span>: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&quot;production&quot;</span>) &#123;<br>      config.<span class="hljs-property">plugins</span>.<span class="hljs-title function_">push</span>(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompressionPlugin</span>(&#123;<br>          <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;[path][base].gz&quot;</span>,<br>          <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&quot;gzip&quot;</span>,<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(js|css|html)$/</span>,<br>          <span class="hljs-attr">threshold</span>: <span class="hljs-number">10240</span>,<br>          <span class="hljs-attr">minRatio</span>: <span class="hljs-number">0.8</span>,<br>          <span class="hljs-attr">deleteOriginalAssets</span>: <span class="hljs-literal">false</span>,<br>        &#125;)<br>      );<br>    &#125;<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>同时 nginx 开启 gzip</li></ol><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>  <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>; <span class="hljs-comment">#开启gzip</span><br>  <span class="hljs-comment"># gzip_buffers 32 4k; #设置压缩所需要的缓冲区大小，以4k为单位，如果文件为32k则申请32*4k的缓冲区</span><br>  <span class="hljs-attribute">gzip_comp_level</span> <span class="hljs-number">6</span>; <span class="hljs-comment">#gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间</span><br>  <span class="hljs-attribute">gzip_min_length</span> <span class="hljs-number">4000</span>; <span class="hljs-comment">#gizp压缩起点，文件大于4k才进行压缩</span><br>  <span class="hljs-attribute">gzip_vary</span> <span class="hljs-literal">on</span>; <span class="hljs-comment"># 是否在http header中添加Vary: Accept-Encoding，建议开启</span><br>  <span class="hljs-attribute">gzip_static</span> <span class="hljs-literal">on</span>; <span class="hljs-comment">#nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩，如果找不到则不进行压缩</span><br>  <span class="hljs-comment"># gzip_types text/xml text/javascript application/javascript text/css text/plain application/json application/x-javascript; # 进行压缩的文件类型</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="8-4-结合webpack-bundle-analyzer生成的模块分析图来拆分-chunk-vendors"><a href="#8-4-结合webpack-bundle-analyzer生成的模块分析图来拆分-chunk-vendors" class="headerlink" title="8.4 结合webpack-bundle-analyzer生成的模块分析图来拆分 chunk-vendors"></a>8.4 结合<code>webpack-bundle-analyzer</code>生成的模块分析图来拆分 chunk-vendors</h3><h4 id="8-4-1-安装webpack-bundle-analyzer"><a href="#8-4-1-安装webpack-bundle-analyzer" class="headerlink" title="8.4.1 安装webpack-bundle-analyzer"></a>8.4.1 安装<code>webpack-bundle-analyzer</code></h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm i webpack-bundle-analyzer -D<br></code></pre></div></td></tr></table></figure><h4 id="8-4-2-引入webpack-bundle-analyzer"><a href="#8-4-2-引入webpack-bundle-analyzer" class="headerlink" title="8.4.2 引入webpack-bundle-analyzer"></a>8.4.2 引入<code>webpack-bundle-analyzer</code></h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">BundleAnalyzerPlugin</span> =<br>  <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack-bundle-analyzer&quot;</span>).<span class="hljs-property">BundleAnalyzerPlugin</span>;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">configureWebpack</span>: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    config.<span class="hljs-property">plugins</span>.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BundleAnalyzerPlugin</span>());<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>如下图所示,chunk-vendors 的组成，是把那些公共的依赖全部都打包在一起了，文件大小达到 1M 以上，严重影响页面加载速度，生成环境上 gzip 压缩后，首页加载也需要将近 10s 左右，令人汗颜。(这里的拆分视具体项目而定)</p><p><img src="/assets/img/uniapp/old-chunk-vendors.png" alt="old-chunk-vendors.png"></p><ul><li>需要将<code>@dcloudio</code>(658kb)拆分为”uni-h5”部分和”vue-cli-plugin-uni”部分</li><li>将<code>core-js</code>(282kb)单独拆出来</li><li>将<code>node-rsa</code>(112kb)单独拆出来</li><li>将<code>bn.js</code>(88kb)单独拆出来</li><li>…</li></ul><p>入口 index 文件也达到了几乎 350kb，里面有一个大的 pages.json 文件</p><p><img src="/assets/img/uniapp/old-index.png" alt="old-chunk-vendors.png"></p><ul><li>将<code>pages.json</code>(290kb)单独拆出来</li></ul><p>在浏览器上看 chunk-vendors，还有一个<code>buffer</code>模块</p><p><img src="/assets/img/uniapp/old-chunk-vendors-js.png" alt="old-chunk-vendors.png"></p><ul><li>将<code>buffer</code>模块单独拆出来</li></ul><h4 id="8-4-3-optimization-splitChunks拆分模块"><a href="#8-4-3-optimization-splitChunks拆分模块" class="headerlink" title="8.4.3 optimization.splitChunks拆分模块"></a>8.4.3 <code>optimization.splitChunks</code>拆分模块</h4><blockquote><p>这里是 webpack4</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// vue.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    config.<span class="hljs-property">optimization</span>.<span class="hljs-title function_">splitChunks</span>(&#123;<br>      <span class="hljs-attr">chunks</span>: <span class="hljs-string">&quot;all&quot;</span>, <span class="hljs-comment">// 必须三选一： &quot;initial&quot;(同步包) | &quot;all&quot;(推荐，同步或异步包) | &quot;async&quot; (默认就是async，异步包)</span><br>      <span class="hljs-attr">automaticNameDelimiter</span>: <span class="hljs-string">&quot;~&quot;</span>, <span class="hljs-comment">// 打包分隔符</span><br>      <span class="hljs-attr">name</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">module</span>, chunks, cacheGroupKey</span>) &#123;<br>        <span class="hljs-keyword">const</span> moduleFileName = <span class="hljs-variable language_">module</span><br>          .<span class="hljs-title function_">identifier</span>()<br>          .<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;/&quot;</span>)<br>          .<span class="hljs-title function_">reduceRight</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item);<br>        <span class="hljs-keyword">const</span> allChunksNames = chunks.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">name</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;~&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;moduleFileName&#125;</span>`</span>;<br>      &#125;,<br>      <span class="hljs-attr">cacheGroups</span>: &#123;<br>        <span class="hljs-attr">vendors</span>: &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;chunk-vendors&quot;</span>,<br>          <span class="hljs-attr">chunks</span>: <span class="hljs-string">&quot;initial&quot;</span>,<br>          <span class="hljs-attr">reuseExistingChunk</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">enforce</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 遇到重复包直接引用，不重新打包</span><br>          <span class="hljs-attr">priority</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 打包优先级权重值</span><br>          <span class="hljs-comment">// minChunks: 1,  // 引用超过一次直接打包到chunk中</span><br>          <span class="hljs-attr">minSize</span>: <span class="hljs-number">30000</span>,<br>        &#125;,<br>        <span class="hljs-attr">pages</span>: &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;chunk-pages&quot;</span>,<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/pages\.json$/</span>,<br>          <span class="hljs-attr">chunks</span>: <span class="hljs-string">&quot;all&quot;</span>,<br>          <span class="hljs-attr">reuseExistingChunk</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">enforce</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">priority</span>: <span class="hljs-number">90</span>,<br>          <span class="hljs-attr">minChunks</span>: <span class="hljs-number">1</span>,<br>          <span class="hljs-attr">minSize</span>: <span class="hljs-number">10000</span>,<br>        &#125;,<br>        <span class="hljs-string">&quot;node-rsa&quot;</span>: &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;chunk-node-rsa&quot;</span>,<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/node-rsa/</span>,<br>          <span class="hljs-attr">chunks</span>: <span class="hljs-string">&quot;all&quot;</span>,<br>          <span class="hljs-attr">reuseExistingChunk</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">enforce</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">priority</span>: <span class="hljs-number">70</span>,<br>        &#125;,<br>        <span class="hljs-attr">buffer</span>: &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;chunk-buffer&quot;</span>,<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/buffer|is-buffer/</span>,<br>          <span class="hljs-attr">chunks</span>: <span class="hljs-string">&quot;all&quot;</span>,<br>          <span class="hljs-attr">reuseExistingChunk</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">priority</span>: <span class="hljs-number">90</span>,<br>          <span class="hljs-attr">minChunks</span>: <span class="hljs-number">1</span>,<br>          <span class="hljs-attr">minSize</span>: <span class="hljs-number">15000</span>,<br>          <span class="hljs-attr">enforce</span>: <span class="hljs-literal">true</span>,<br>        &#125;,<br>        <span class="hljs-string">&quot;core-js&quot;</span>: &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;chunk-core-js&quot;</span>,<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/core-js/</span>,<br>          <span class="hljs-attr">chunks</span>: <span class="hljs-string">&quot;initial&quot;</span>,<br>          <span class="hljs-attr">reuseExistingChunk</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">enforce</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">priority</span>: <span class="hljs-number">70</span>,<br>        &#125;,<br>        <span class="hljs-string">&quot;uni-h5&quot;</span>: &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;chunk-uni-h5&quot;</span>,<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/uni-h5/</span>,<br>          <span class="hljs-attr">chunks</span>: <span class="hljs-string">&quot;initial&quot;</span>,<br>          <span class="hljs-attr">reuseExistingChunk</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">enforce</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">priority</span>: <span class="hljs-number">80</span>,<br>        &#125;,<br>        <span class="hljs-attr">vue</span>: &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;chunk-vue&quot;</span>,<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/vue-cli-plugin-uni/</span>,<br>          <span class="hljs-attr">chunks</span>: <span class="hljs-string">&quot;initial&quot;</span>,<br>          <span class="hljs-attr">reuseExistingChunk</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">enforce</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">priority</span>: <span class="hljs-number">85</span>,<br>        &#125;,<br>        <span class="hljs-attr">bn</span>: &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;chunk-bn&quot;</span>,<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/bn/</span>,<br>          <span class="hljs-attr">chunks</span>: <span class="hljs-string">&quot;initial&quot;</span>,<br>          <span class="hljs-attr">reuseExistingChunk</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">enforce</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">priority</span>: <span class="hljs-number">70</span>,<br>        &#125;,<br>      &#125;,<br>    &#125;);<br><br>    <span class="hljs-comment">// 提取公共的runtime</span><br>    config.<span class="hljs-property">optimization</span>.<span class="hljs-title function_">runtimeChunk</span>(<span class="hljs-string">&quot;single&quot;</span>);<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><h4 id="8-4-4-拆分的-chunk-没有在index-html中自动引入"><a href="#8-4-4-拆分的-chunk-没有在index-html中自动引入" class="headerlink" title="8.4.4 拆分的 chunk 没有在index.html中自动引入"></a>8.4.4 拆分的 chunk 没有在<code>index.html</code>中自动引入</h4><blockquote><p>打包很成功，没任何报错，但是在运行项目的时候，页面一片空白，没任何 ui 展示。<strong>问题就出在，拆分出来的各个小 chunk，没有自动在 index.html 中引入</strong>，我们可以在打包出来的 unpackage 目录，本地启动一个静态服务，把那些 chunk 手动引入，刷新页面，页面 ui 显示出来了</p></blockquote><p><strong>所以我们需要找到<a href="https://www.npmjs.com/package/html-webpack-plugin">html-webpack-plugin</a>的配置，把我们单独拆分出来的 chunk，添加到<code>chunks</code>配置中</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// vue.config.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">changeHtmlWebpackPluginChunks</span>(<span class="hljs-params">config</span>) &#123;<br>  <span class="hljs-keyword">const</span> plugins = config.<span class="hljs-property">plugins</span>;<br>  <span class="hljs-keyword">const</span> chunkArr = [<br>    <span class="hljs-string">&quot;runtime&quot;</span>,<br>    <span class="hljs-string">&quot;chunk-vue&quot;</span>,<br>    <span class="hljs-string">&quot;chunk-uni-h5&quot;</span>,<br>    <span class="hljs-string">&quot;chunk-core-js&quot;</span>,<br>    <span class="hljs-string">&quot;chunk-node-rsa&quot;</span>,<br>    <span class="hljs-string">&quot;chunk-buffer&quot;</span>,<br>    <span class="hljs-string">&quot;chunk-bn&quot;</span>,<br>    <span class="hljs-string">&quot;chunk-pages&quot;</span>,<br>  ];<br><br>  plugins.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 为HtmlWebpackPlugin</span><br>    <span class="hljs-keyword">if</span> (<br>      item.<span class="hljs-property">options</span> &amp;&amp;<br>      <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(item.<span class="hljs-property">options</span>) === <span class="hljs-string">&quot;[object Object]&quot;</span> &amp;&amp;<br>      <span class="hljs-title class_">Object</span>.<span class="hljs-property">hasOwnProperty</span>.<span class="hljs-title function_">call</span>(item.<span class="hljs-property">options</span>, <span class="hljs-string">&quot;filename&quot;</span>) &amp;&amp;<br>      <span class="hljs-title class_">Object</span>.<span class="hljs-property">hasOwnProperty</span>.<span class="hljs-title function_">call</span>(item.<span class="hljs-property">options</span>, <span class="hljs-string">&quot;chunks&quot;</span>) &amp;&amp;<br>      item.<span class="hljs-property">options</span>.<span class="hljs-property">filename</span> === <span class="hljs-string">&quot;index.html&quot;</span><br>    ) &#123;<br>      <span class="hljs-keyword">const</span> oldChunks = item.<span class="hljs-property">options</span>.<span class="hljs-property">chunks</span> || [];<br>      <span class="hljs-comment">// 修改chunks引入</span><br>      item.<span class="hljs-property">options</span>.<span class="hljs-property">chunks</span> = [...chunkArr, ...oldChunks];<br>    &#125;<br>  &#125;);<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">configureWebpack</span>: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&quot;production&quot;</span>) &#123;<br>      <span class="hljs-title function_">changeHtmlWebpackPluginChunks</span>(config);<br>    &#125;<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>下图是拆分后 chunk-vendors，和之前对比，那些大模块都被拆分出去了，文件体积也从 1M 多变成了 320kb，首页加载也从 10s 多变成了 3s 左右。</p><p><img src="/assets/img/uniapp/new-chunk-vendors.png" alt="old-chunk-vendors.png"></p><h4 id="8-4-5-关于拆分-vendors-后，uview-ui部分组件报错"><a href="#8-4-5-关于拆分-vendors-后，uview-ui部分组件报错" class="headerlink" title="8.4.5 关于拆分 vendors 后，uview-ui部分组件报错"></a>8.4.5 关于拆分 vendors 后，<code>uview-ui</code>部分组件报错</h4><blockquote><p>项目中使用到了<code>uview-ui</code>ui 框架</p></blockquote><p>重新打包，本地再次启动项目，浏览器控制台发现如下报错</p><p><img src="/assets/img/uniapp/console.png" alt="old-chunk-vendors.png"></p><p>再到 unpackage 目录一看，居然还有<code>u-icon.vue</code>和<code>u-line.vue</code>未打包！</p><p>那单独提取这两个文件为 chunk 进行打包，再次打包后启动项目，这两个组件没报错，其他组件报错了，unpackage 目录里出现了更多的”u-xx.vue”组件，这是什么情况？</p><p>猜测是引入 uview-ui 框架时的<a href="https://v1.uviewui.com/components/npmSetting.html">easycom 组件模式</a>惹得鬼，我尝试着在 easycom 里添加自定义<code>custom</code>配置，把这两个组件写在里面，但是不管用。页面不报错，但是样式出问题了。。。</p><p>或者直接删除 easycom 配置进行，启动项目，页面样式出问题了。。。</p><p>最终还是在<code>splitChunks</code>里单独提取 uview-ui 为 chunk，这样问题是解决了，但是这样在入口的时候，就要加载一个提取出来的 uview-ui(项目中使用到的所有 uview-ui 组件，并非整个 uview-ui)。未拆分前，每个页面只需加载自己所需的组件，现在把所有页面的组件都提取出来了，等于是每个页面都加载了冗余的 uview-ui 组件。好在是最终页面加载速度是比之前快了。</p><p>这里有知道怎么处理的，或者有遇到相同问题的，分享下怎么处理。</p><h4 id="8-4-6-拆分为各个小-chunk-后，页面-js-请求变多了"><a href="#8-4-6-拆分为各个小-chunk-后，页面-js-请求变多了" class="headerlink" title="8.4.6 拆分为各个小 chunk 后，页面 js 请求变多了"></a>8.4.6 拆分为各个小 chunk 后，页面 js 请求变多了</h4><p><img src="/assets/img/uniapp/new-console.png" alt="old-chunk-vendors.png"></p><p>页面 js 请求变多，对页面性能也有一定影响，所以这里拆分，视具体项目而定。</p><h2 id="9-hbuilderx-创建的项目-h5-持续部署"><a href="#9-hbuilderx-创建的项目-h5-持续部署" class="headerlink" title="9. hbuilderx 创建的项目,h5 持续部署"></a>9. hbuilderx 创建的项目,h5 持续部署</h2><blockquote><p>这里视公司内部情况而定，我这是服务器上有现成的 nginx,也无需自己打包 docker 镜像</p></blockquote><ol><li><code>.gitlab.yml</code></li></ol><blockquote><p>SSH_USERNAME,SSH_HOST,SSH_PASSWORD 这 3 个变量写在项目<code>Setting-&gt;CI/CD-&gt;Variables</code>里</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">stages:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">build</span><br><br><span class="hljs-attr">job_build:</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">build</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-comment"># - sudo docker image build -t demo_h5 .</span><br>    <span class="hljs-comment"># - sudo docker tag demo_h5 registry.cn-hangzhou.aliyuncs.com/test-blog/demo_h5:latest</span><br>    <span class="hljs-comment"># - sudo docker login --username=$ALIYUN_DOCKER_NAME registry.cn-hangzhou.aliyuncs.com --password=$ALIYUN_DOCKER_PASSWORD</span><br>    <span class="hljs-comment"># - sudo docker push registry.cn-hangzhou.aliyuncs.com/test-blog/demo_h5:latest</span><br>    <span class="hljs-comment"># - sudo docker logout</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">yum</span> <span class="hljs-string">list</span> <span class="hljs-string">installed</span> <span class="hljs-string">|</span> <span class="hljs-string">grep</span> <span class="hljs-string">&#x27;sshpass&#x27;</span><span class="hljs-string">;</span> <span class="hljs-string">then</span> <span class="hljs-string">echo</span> <span class="hljs-literal">yes</span><span class="hljs-string">;</span> <span class="hljs-string">else</span> <span class="hljs-string">yum</span> <span class="hljs-string">-y</span> <span class="hljs-string">install</span> <span class="hljs-string">sshpass;fi</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sh</span> <span class="hljs-string">deploy.sh</span> <span class="hljs-string">$SSH_USERNAME</span> <span class="hljs-string">$SSH_HOST</span> <span class="hljs-string">$SSH_PASSWORD</span><br>  <span class="hljs-attr">tags:</span><br>    <span class="hljs-comment"># 公司内部gitlab注册一个runner,或者写一个公共runner</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">xxxx</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li><code>deploy.sh</code></li></ol><blockquote><p>将打包出来的文件，上传到服务器指定目录，然后页面就可以访问了</p><p>为什么要将打包出来的代码进行压缩，因为打包出来的文件数量很多，如果一个个传输，会非常慢，所以要进行压缩后变成 1 个文件进行传输</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ssh deploy start==&gt;&quot;</span><br><span class="hljs-comment"># echo &quot;$3&quot; ssh &quot;$1&quot;@&quot;$2&quot; --password-stdin</span><br><br>username=<span class="hljs-variable">$1</span><br>host=<span class="hljs-variable">$2</span><br>password=<span class="hljs-variable">$3</span><br><span class="hljs-comment"># 打包目录</span><br><span class="hljs-built_in">dir</span>=<span class="hljs-string">&quot;./unpackage/dist/build/h5&quot;</span><br><span class="hljs-comment"># 服务器目录</span><br>target=<span class="hljs-string">&quot;/home/demo_h5/nginx/html/app-web&quot;</span><br><br><span class="hljs-comment"># 上传本地文件到服务器</span><br><span class="hljs-comment"># scp /path/filename username@servername:/path</span><br><span class="hljs-comment"># 上传目录到服务器</span><br><span class="hljs-comment"># scp -r local_dir username@servername:remote_dir</span><br><br><span class="hljs-comment"># sshpass -p $&#123;password&#125; scp $&#123;dir&#125;/index.html $&#123;username&#125;@$&#123;host&#125;:/home/demo_h5/nginx/html/app-web</span><br><span class="hljs-comment"># sshpass -p $&#123;password&#125; scp -r $&#123;dir&#125;/static $&#123;username&#125;@$&#123;host&#125;:/home/demo_h5/nginx/html/app-web</span><br><br><span class="hljs-comment"># cd到指定目录</span><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$&#123;dir&#125;</span><br><span class="hljs-comment"># 压缩所有文件并重命名</span><br>zip -r -q -o build.zip ./<br><span class="hljs-comment"># 通过sshpass上传压缩文件到指定目录</span><br>sshpass -p <span class="hljs-variable">$&#123;password&#125;</span> scp ./build.zip <span class="hljs-variable">$&#123;username&#125;</span>@<span class="hljs-variable">$&#123;host&#125;</span>:<span class="hljs-variable">$&#123;target&#125;</span><br><span class="hljs-built_in">sleep</span> 2<br><br><span class="hljs-comment"># 登录远程服务器</span><br><span class="hljs-comment"># cd 到指定目录</span><br><span class="hljs-comment"># unzip 解压到指定目录</span><br><span class="hljs-comment">#   -o 不必先询问用户，unzip执行后覆盖原有文件。</span><br><span class="hljs-comment">#   -d 解压到指定目录</span><br><span class="hljs-comment"># 删除压缩文件</span><br><br>sshpass -p <span class="hljs-variable">$&#123;password&#125;</span> ssh <span class="hljs-variable">$&#123;username&#125;</span>@<span class="hljs-variable">$&#123;host&#125;</span> <span class="hljs-string">&quot;cd /home/demo_h5/nginx/html/app-web &amp;&amp; pwd &amp;&amp; unzip -o -q ./build.zip -d ./ &amp;&amp; rm -rf ./build.zip&quot;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ssh deploy end==&gt;&quot;</span><br></code></pre></div></td></tr></table></figure><ol start="3"><li>git 提交代码</li></ol><p>不出意外，代码自动部署到相应位置，浏览器可以访问了</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs log">$ if yum list installed | grep &#x27;sshpass&#x27;; then echo yes; else yum -y install sshpass;fi<br>Repository base is listed more than once in the configuration<br>Repository updates is listed more than once in the configuration<br>Repository extras is listed more than once in the configuration<br>Repository centosplus is listed more than once in the configuration<br>Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast<br>sshpass.x86_64                              1.06-2.el7                 @extras<br>yes<br>$ sh deploy.sh $SSH_USERNAME $SSH_HOST $SSH_PASSWORD<br>ssh deploy start==&gt;<br>/home/demo_h5/nginx/html/app-web<br>ssh deploy end==&gt;<br>Job succeeded<br></code></pre></div></td></tr></table></figure><h2 id="10-参考资料"><a href="#10-参考资料" class="headerlink" title="10. 参考资料"></a>10. 参考资料</h2><ol><li><a href="https://uniapp.dcloud.net.cn/">uniapp 官方文档</a></li><li><a href="https://v4.webpack.docschina.org/concepts/">webpack4 官方文档</a></li><li><a href="https://cli.vuejs.org/zh/guide/">vue-cli 官方文档</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>uniapp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uniapp</tag>
      
      <tag>webpack4.x</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Taro与微信小程序原生组件之间的事件通信</title>
    <link href="/2022/04/04/taro-wemark/"/>
    <url>/2022/04/04/taro-wemark/</url>
    
    <content type="html"><![CDATA[<ul><li><p><a href="https://github.com/sRect/wechat-blog">小程序博客 github 仓库</a></p></li><li><p><a href="#%E5%B0%8F%E7%A8%8B%E5%BA%8F://sRect%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/sRect%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Z1MPSUtT7bnfPFd">本小程序链接</a></p></li></ul><h2 id="1-需求背景"><a href="#1-需求背景" class="headerlink" title="1. 需求背景"></a>1. 需求背景</h2><p>最近在做一个微信小程序版的简易博客，原本是准备自己解析<code>markdown</code>并渲染，最后还是使用了<a href="https://github.com/TooBug/wemark"><code>wemark</code></a>第三方组件来渲染，因为自己解析渲染的很难看。</p><p>因为小程序内打开第三方链接，需要在项目配置里设置域名才能打开，对于第三方网站链接很无奈，所以干脆直接进行复制，然后可以自行通过浏览器打开。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Detail</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> mdStr = <span class="hljs-string">`...`</span>;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;md&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;markdown-body&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">wemark</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;wemark&quot;</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&#123;mdStr&#125;</span> <span class="hljs-attr">link</span> <span class="hljs-attr">highlight</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;wemark&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></div></td></tr></table></figure><p><img src="/assets/img/taro-wemark/link.png"></p><p>如上图显示，就是想在点击的时候，拿到链接里的 url。</p><p>其实熟悉微信小程序的开发，这是一个很简单的需求，但我等彩笔不熟悉。😄</p><p>原本还想拿到 dom，然后自己绑定事件，最后发现这样错的离谱。</p><h2 id="2-彩笔的错误之路"><a href="#2-彩笔的错误之路" class="headerlink" title="2. 彩笔的错误之路"></a>2. 彩笔的错误之路</h2><blockquote><p><strong>注意</strong>： 以下几种方式都没成功</p></blockquote><h3 id="2-1-使用createSelectorQueryapi"><a href="#2-1-使用createSelectorQueryapi" class="headerlink" title="2.1 使用createSelectorQueryapi"></a>2.1 使用<code>createSelectorQuery</code>api</h3><blockquote><p>打印出来，都没有想要的结果，没法继续下去</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Taro</span>, &#123; useReady &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@tarojs/taro&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Detail</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">useReady</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">createSelectorQuery</span>()<br>      .<span class="hljs-title function_">select</span>(<span class="hljs-string">&quot;#md&quot;</span>)<br>      .<span class="hljs-title function_">node</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;==&gt;&quot;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>      &#125;)<br>      .<span class="hljs-title function_">exec</span>();<br>  &#125;);<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>或者</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title function_">useReady</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> query = <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">createSelectorQuery</span>().<span class="hljs-title function_">in</span>(<span class="hljs-variable language_">this</span>);<br><br>  query<br>    .<span class="hljs-title function_">select</span>(<span class="hljs-string">&quot;#md&quot;</span>)<br>    .<span class="hljs-title function_">node</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">node</span>);<br>    &#125;)<br>    .<span class="hljs-title function_">exec</span>();<br>&#125;);<br></code></pre></div></td></tr></table></figure><h3 id="2-2-使用getCurrentInstanceapi"><a href="#2-2-使用getCurrentInstanceapi" class="headerlink" title="2.2 使用getCurrentInstanceapi"></a>2.2 使用<code>getCurrentInstance</code>api</h3><blockquote><p>打印出来，也没有想要的，无法继续下去</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; getCurrentInstance &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@tarojs/taro&quot;</span>;<br><br><span class="hljs-keyword">const</span> &#123; page &#125; = <span class="hljs-title function_">getCurrentInstance</span>();<br><span class="hljs-keyword">const</span> md = page.<span class="hljs-title function_">selectComponent</span>(<span class="hljs-string">&quot;#md&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(md);<br></code></pre></div></td></tr></table></figure><h3 id="2-3-直接在最外面绑定事件"><a href="#2-3-直接在最外面绑定事件" class="headerlink" title="2.3 直接在最外面绑定事件"></a>2.3 直接在最外面绑定事件</h3><blockquote><p>打印出来，无法区分是否点击在链接上，也无法继续下去</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Detail</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> mdStr = <span class="hljs-string">`...`</span>;<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> el = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;md&quot;</span>);<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params">event</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);<br>    &#125;<br>    el.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;tap&quot;</span>, handleClick);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      el.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&quot;tap&quot;</span>, handleClick);<br>    &#125;;<br>  &#125;, []);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;md&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;markdown-body&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">wemark</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;wemark&quot;</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&#123;mdStr&#125;</span> <span class="hljs-attr">link</span> <span class="hljs-attr">highlight</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;wemark&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="3-解决"><a href="#3-解决" class="headerlink" title="3. 解决"></a>3. 解决</h2><blockquote><p>还是得到<code>wemark</code>组件里去修改</p></blockquote><ul><li><code>wemark/wemark.js</code>添加如下代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">Component</span>(&#123;<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-attr">onTap</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;onTap==&gt;&quot;</span>, e);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">triggerEvent</span>(<span class="hljs-string">&quot;myevent&quot;</span>, e);<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><ul><li><code>wemark/wemark.wxml</code>中添加<code>data-url</code>和添加事件绑定</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">navigator</span></span><br><span class="hljs-tag">  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wemark_inline_link&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;&#123;&#123;renderInline.data.href&#125;&#125;&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;renderInline.type === &#x27;link&#x27;&#125;&#125;&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">data-url</span>=<span class="hljs-string">&quot;&#123;&#123;renderInline.data.href&#125;&#125;&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;onTap&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>  &#123;&#123;renderInline.content&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">navigator</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>回到自己代码中修改</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Detail</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> mdStr = <span class="hljs-string">`...`</span>;<br><br>  <span class="hljs-comment">// 链接复制</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">onMyEvent</span> = (<span class="hljs-params">e</span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br><br>    <span class="hljs-keyword">const</span> str = e?.<span class="hljs-property">detail</span>?.<span class="hljs-property">currentTarget</span>?.<span class="hljs-property">dataset</span>?.<span class="hljs-property">url</span>;<br><br>    <span class="hljs-keyword">if</span> (!str) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">setClipboardData</span>(&#123;<br>      <span class="hljs-attr">data</span>: str,<br>      <span class="hljs-title function_">success</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">showToast</span>(&#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;链接复制成功&quot;</span>,<br>          <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>        &#125;);<br>      &#125;,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;md&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;markdown-body&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">wemark</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;wemark&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">md</span>=<span class="hljs-string">&#123;mdStr&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">link</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">highlight</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;wemark&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onMyevent</span>=<span class="hljs-string">&#123;onMyevent&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></div></td></tr></table></figure><p><img src="/assets/img/taro-wemark/dataset.png"></p><ul><li>至此，解决了这个小需求</li></ul><h2 id="4-参考链接"><a href="#4-参考链接" class="headerlink" title="4. 参考链接"></a>4. 参考链接</h2><ol><li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/events.html">组件间通信与事件</a></p></li><li><p><a href="https://taro-docs.jd.com/taro/docs/taro-in-miniapp/#%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B8%8E%E4%BA%8B%E4%BB%B6">原生项目使用 Taro</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>taro</category>
      
    </categories>
    
    
    <tags>
      
      <tag>taro</tag>
      
      <tag>wemark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3分钟使用Hexo搭建自己的博客</title>
    <link href="/2022/03/24/hexo-blog/"/>
    <url>/2022/03/24/hexo-blog/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://github.com/sRect/sRect.github.io">本文 github 仓库</a></li><li><a href="https://gitee.com/srect/hexo-blog">本文 gitee 仓库</a></li><li><a href="https://srect.github.io/">博客预览</a></li></ul><h2 id="1-Hexo-是什么？"><a href="#1-Hexo-是什么？" class="headerlink" title="1. Hexo 是什么？"></a>1. Hexo 是什么？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。可以使用 Markdown 写文章，方便高效，无需后台服务，静态资源即可展示。搭配 github pages 或者个人云服务器都可以部署。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></div></td></tr></table></figure><h2 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3. 初始化"></a>3. 初始化</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo init &lt;project-name&gt;<br><span class="hljs-built_in">cd</span> &lt;project-name&gt;<br>npm install<br></code></pre></div></td></tr></table></figure><h2 id="4-主要-api"><a href="#4-主要-api" class="headerlink" title="4. 主要 api"></a>4. 主要 api</h2><ol><li>创建新文章</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo new &lt;title&gt;<br></code></pre></div></td></tr></table></figure><ul><li>在<code>source/_posts/</code>下新建</li></ul><p>例如创建 foo 页，在<code>source/_posts/</code>目录下就会多出一个<code>foo.md</code>文件，就在那里面写文章</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo new foo<br></code></pre></div></td></tr></table></figure><ul><li>在<code>source</code>下新建其它的目录</li></ul><p>例如在<code>source/about/</code>下创建<code>bar.md</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo new page --path about/bar <span class="hljs-string">&quot;bar&quot;</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>生成静态文件</li></ol><p>项目根目录会多出一个<code>public</code>文件夹，就是编译过后的<code>html</code>静态文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo generate<br></code></pre></div></td></tr></table></figure><ol start="3"><li>清除缓存</li></ol><p>把上面生成的<code>public</code>文件夹删掉</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo clean<br></code></pre></div></td></tr></table></figure><ol start="4"><li>启动服务</li></ol><p>默认情况下，<code>http://localhost:4000</code>访问</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo server<br></code></pre></div></td></tr></table></figure><h2 id="5-安装心仪的主题"><a href="#5-安装心仪的主题" class="headerlink" title="5. 安装心仪的主题"></a>5. 安装心仪的主题</h2><ol><li><a href="https://hexo.io/themes/">hexo themes</a></li></ol><p>这么多主题，总有一款适合你</p><ol start="2"><li>本文选择的主题<a href="https://github.com/fluid-dev/hexo-theme-fluid"><code>hexo-theme-fluid</code></a></li></ol><ul><li>主题安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></div></td></tr></table></figure><p>然后在博客目录下创建 _config.fluid.yml，将主题的 _config.yml 内容复制进去</p><ul><li>配置主题</li></ul><p>修改 Hexo 博客目录中的 _config.yml:</p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN  <span class="hljs-meta"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></div></td></tr></table></figure><h2 id="6-部署"><a href="#6-部署" class="headerlink" title="6. 部署"></a>6. 部署</h2><h3 id="6-1-github-pages-部署"><a href="#6-1-github-pages-部署" class="headerlink" title="6.1 github pages 部署"></a>6.1 github pages 部署</h3><ol><li><p>在你的 github 上创建一个名为<code>&lt;你的github用户名&gt;.github.io</code>的仓库</p></li><li><p>本地生成 ssh 密钥对</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;用户名@example.com &quot;</span><br></code></pre></div></td></tr></table></figure><ol start="3"><li><p>在仓库<code>Settings &gt; Deploy Keys</code>中添加公钥内容，并勾选访问权限，最后确定</p></li><li><p>在仓库<code>Settings &gt; Secrets</code>中添加私钥，key 为<code>DEPLOY_KEY</code>，内容为私钥内容</p></li><li><p>项目<code>_config.yml</code>配置文件和主题配置文件配置<code>deploy</code>字段</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;你的github仓库</span> <span class="hljs-string">SSH下载链接&gt;</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br></code></pre></div></td></tr></table></figure><ol start="6"><li><code>.github/workflows/deploy.yml</code></li></ol><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Github</span> <span class="hljs-string">Pages</span> <span class="hljs-string">Deploy</span><br><br><span class="hljs-comment"># https://github.com/marketplace/actions/hexo-action?version=v1.0.4</span><br><br><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>]<br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">A</span> <span class="hljs-string">job</span> <span class="hljs-string">to</span> <span class="hljs-string">deploy</span> <span class="hljs-string">blog.</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">submodules:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Checkout private submodules(themes or something else).</span><br><br>      <span class="hljs-comment"># Caching dependencies to speed up workflows. (GitHub will remove any cache entries that have not been accessed in over 7 days.)</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Cache</span> <span class="hljs-string">node</span> <span class="hljs-string">modules</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v1</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">cache</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">node_modules</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.os</span> <span class="hljs-string">&#125;&#125;-node-$&#123;&#123;</span> <span class="hljs-string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br><span class="hljs-string">            $&#123;&#123; runner.os &#125;&#125;-node-</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Dependencies</span><br>        <span class="hljs-attr">if:</span> <span class="hljs-string">steps.cache.outputs.cache-hit</span> <span class="hljs-type">!=</span> <span class="hljs-string">&#x27;true&#x27;</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">ci</span><br><br>      <span class="hljs-comment"># Deploy hexo blog website.</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">deploy</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">sma11black/hexo-action@v1.0.3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">deploy_key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DEPLOY_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">user_name:</span> <span class="hljs-string">&lt;你的github用户名&gt;</span> <span class="hljs-comment"># (or delete this input setting to use bot account)</span><br>          <span class="hljs-attr">user_email:</span> <span class="hljs-string">&lt;你的github邮箱&gt;</span> <span class="hljs-comment"># (or delete this input setting to use bot account)</span><br>          <span class="hljs-attr">commit_msg:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.event.head_commit.message</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-comment"># (or delete this input setting to use hexo default settings)</span><br>      <span class="hljs-comment"># Use the output from the `deploy` step(use for test action)</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Get</span> <span class="hljs-string">the</span> <span class="hljs-string">output</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">echo</span> <span class="hljs-string">&quot;$<span class="hljs-template-variable">&#123;&#123; steps.deploy.outputs.notify &#125;&#125;</span>&quot;</span><br></code></pre></div></td></tr></table></figure><ol start="7"><li>使用<code>git</code>提交代码，在仓库<code>Actions</code>里可以看到 yml 配置文件的自动执行日志，执行结束后，不出意外的话，浏览器里访问<code>https://&lt;你的github用户名&gt;.github.io</code>，可以看到你的博客了！</li></ol><h3 id="6-2-docker-容器部署在个人云服务器"><a href="#6-2-docker-容器部署在个人云服务器" class="headerlink" title="6.2 docker 容器部署在个人云服务器"></a>6.2 docker 容器部署在个人云服务器</h3><ol><li><p>在 github 仓库<code>Settings &gt; Secrets</code>中添加你的阿里云镜像容器服务账号，key 为<code>ALIYUN_DOCKER_USERNAME</code>，dockerhub 等也可以，这里以阿里云镜像容器服务为例</p></li><li><p>在 github 仓库<code>Settings &gt; Secrets</code>中添加你的阿里云镜像容器服务密码，key 为<code>ALIYUN_DOCKER_PASSWORD</code></p></li><li><p>Dockerfile</p></li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Dockerfile"><span class="hljs-comment"># 1. 基础镜像安装</span><br><span class="hljs-keyword">FROM</span> alpine:<span class="hljs-number">3.15</span> AS base<br><br><span class="hljs-keyword">ENV</span> NODE_ENV=production \<br>  APP_PATH=/usr/share/nginx/hexo<br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-variable">$APP_PATH</span></span><br><br><span class="hljs-comment"># 使用国内镜像，加速下面 apk add安装</span><br><span class="hljs-comment"># 如果是在github上打包镜像，无需使用内内镜像，注释掉即可</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27;</span> /etc/apk/repositories</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apk add --no-cache --update nodejs=16.14.0-r0 yarn=1.22.17-r0</span><br><br><span class="hljs-comment"># 2. 基于基础镜像安装项目依赖和打包</span><br><span class="hljs-keyword">FROM</span> base AS install<br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . ./</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yarn install</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yarn run build</span><br><br><span class="hljs-keyword">FROM</span> base AS result<br><br><span class="hljs-comment"># 将public目录下的文件全部复制到/usr/share/nginx/hexo下面</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=install <span class="hljs-variable">$APP_PATH</span>/public .</span><br><br><span class="hljs-comment"># 3. 最终基于nginx进行构建</span><br><span class="hljs-keyword">FROM</span> nginx:alpine<br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /usr/share/nginx/hexo</span><br><br><span class="hljs-comment"># 添加自己的配置 default.conf 在下面</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> nginx.conf /etc/nginx/conf.d/default.conf</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=result /usr/share/nginx/hexo .</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br></code></pre></div></td></tr></table></figure><ol start="4"><li><code>.github/workflows/deploy.yml</code></li></ol><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">deploy</span> <span class="hljs-string">ci</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span> <span class="hljs-comment"># push 时触发ci</span><br>    <span class="hljs-attr">branches:</span> [<span class="hljs-string">main</span>] <span class="hljs-comment"># 作用于main分支</span><br>  <span class="hljs-comment"># pull_request:</span><br>  <span class="hljs-comment">#   branches: [main]</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><br>    <span class="hljs-comment"># strategy:</span><br>    <span class="hljs-comment">#   matrix:</span><br>    <span class="hljs-comment">#     node-version: [14.x]</span><br>    <span class="hljs-comment">#     # See supported Node.js release schedule at https://nodejs.org/en/about/releases/</span><br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-comment"># 拉取main分支代码</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br><br>      <span class="hljs-comment"># # 指定nodejs版本</span><br>      <span class="hljs-comment"># - name: Use Node.js $&#123;&#123; matrix.node-version &#125;&#125;</span><br>      <span class="hljs-comment">#   uses: actions/setup-node@v2</span><br>      <span class="hljs-comment">#   with:</span><br>      <span class="hljs-comment">#     node-version: $&#123;&#123; matrix.node-version &#125;&#125;</span><br>      <span class="hljs-comment">#     cache: &quot;yarn&quot;</span><br><br>      <span class="hljs-comment"># # 安装依赖</span><br>      <span class="hljs-comment"># - name: install</span><br>      <span class="hljs-comment">#   run: sudo yarn install</span><br><br>      <span class="hljs-comment"># # 打包</span><br>      <span class="hljs-comment"># - name: build</span><br>      <span class="hljs-comment">#   run: sudo yarn run build</span><br><br>      <span class="hljs-comment"># 制作docker镜像并推送到阿里云容器镜像服务</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">build</span> <span class="hljs-string">and</span> <span class="hljs-string">push</span> <span class="hljs-string">docker</span> <span class="hljs-string">image</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          echo $&#123;&#123; secrets.ALIYUN_DOCKER_PASSWORD &#125;&#125; | docker login registry.cn-hangzhou.aliyuncs.com --username $&#123;&#123; secrets.ALIYUN_DOCKER_USERNAME &#125;&#125; --password-stdin</span><br><span class="hljs-string">          docker image build -t hexo-blog .</span><br><span class="hljs-string">          docker tag hexo-blog registry.cn-hangzhou.aliyuncs.com/&lt;命名空间&gt;/&lt;镜像仓库名&gt;:latest</span><br><span class="hljs-string">          docker push registry.cn-hangzhou.aliyuncs.com/&lt;命名空间&gt;/&lt;镜像仓库名&gt;:latest</span><br><span class="hljs-string">          docker logout</span><br></code></pre></div></td></tr></table></figure><ol start="5"><li>使用 docker 容器可视化管理，比如<code>portainer</code>等，拉取刚才制作的镜像，然后运行容器。或者登录云服务器，手动拉取镜像再运行容器</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 拉取镜像</span><br>docker pull registry.cn-hangzhou.aliyuncs.com/&lt;命名空间&gt;/&lt;镜像仓库名&gt;:latest<br><br><span class="hljs-comment"># 运行容器</span><br>docker container run -d -p &lt;你的服务器宿主机向外暴露的端口&gt;:80 --name hexo-blog registry.cn-hangzhou.aliyuncs.com/&lt;命名空间&gt;/&lt;镜像仓库名&gt;:latest<br></code></pre></div></td></tr></table></figure><ol start="6"><li>不出意外，浏览器里访问<code>http:&lt;你的ip或者配好的域名&gt;:&lt;端口&gt;</code>，可以看到你的博客了！</li></ol><h2 id="7-参考资料"><a href="#7-参考资料" class="headerlink" title="7. 参考资料"></a>7. 参考资料</h2><ol><li><a href="https://hexo.io/zh-cn/docs">Hexo 官方文档</a></li><li><a href="https://hexo.fluid-dev.com/docs/guide">Hexo Fluid 主题用户手册</a></li><li><a href="https://github.com/marketplace/actions/hexo-action?version=v1.0.4">Hexo Github Action</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>github actions</tag>
      
      <tag>CI</tag>
      
      <tag>CD</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mermaid使用</title>
    <link href="/2022/03/11/mermaid/"/>
    <url>/2022/03/11/mermaid/</url>
    
    <content type="html"><![CDATA[<p>这里是文章摘要…</p><span id="more"></span><p>mermaid 流程图 + 饼图使用<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="mermaid">[1]</span></a></sup></p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><pre><code class=" mermaid">flowchart TBA[Hard] --&gt;|Text| B(Round)B --&gt; C&#123;Decision&#125;C --&gt;|One| D[Result 1]C --&gt;|Two| E(Result 2)</code></pre><h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><blockquote><p><a href="https://mermaid-js.github.io/mermaid/#/pie">https://mermaid-js.github.io/mermaid/#/pie</a></p></blockquote><pre><code class=" mermaid">pietitle Pets adopted by volunteers&quot;Dogs&quot; : 386&quot;Cats&quot; : 85&quot;Rats&quot; : 15</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md">mermaid</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>mermaid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序持续定位</title>
    <link href="/2022/03/10/wechat-location/"/>
    <url>/2022/03/10/wechat-location/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://github.com/sRect/taro_wx">github 源码仓库</a></li></ul><h3 id="1-客户端详情"><a href="#1-客户端详情" class="headerlink" title="1. 客户端详情"></a>1. 客户端详情</h3><blockquote><p>文章内使用 Tarojs 开发微信小程序</p></blockquote><ul><li>手机型号：小米 10</li><li>操作系统及版本：Android 10</li><li>客户端平台：android</li><li>SDKVersion：2.20.2</li></ul><h3 id="2-注意点"><a href="#2-注意点" class="headerlink" title="2. 注意点"></a>2. 注意点</h3><ol><li>taro 项目配置文件<code>src/app.config.js</code>中要添加以下配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">requiredBackgroundModes</span>: [<span class="hljs-string">&quot;location&quot;</span>],<br>  <span class="hljs-attr">permission</span>: &#123;<br>    <span class="hljs-string">&quot;scope.userLocation&quot;</span>: &#123;<br>      <span class="hljs-attr">desc</span>: <span class="hljs-string">&quot;如实填写实际用途&quot;</span>, <span class="hljs-comment">// 高速公路行驶持续后台定位</span><br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="2"><li>检查手机是否打开位置信息开关</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">getSystemInfoAsync</span>(&#123;<br>  <span class="hljs-title function_">success</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-property">locationEnabled</span>);<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><ol start="3"><li>检查是否给微信开了定位权限</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">getSystemInfoAsync</span>(&#123;<br>  <span class="hljs-title function_">success</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-property">locationAuthorized</span>);<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><ol start="4"><li>检查当前小程序是否开了后台定位权限</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">getSetting</span>(&#123;<br>  <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-keyword">const</span> authSetting = res.<span class="hljs-property">authSetting</span>;<br>    <span class="hljs-keyword">if</span> (<br>      !authSetting[<span class="hljs-string">&quot;scope.userLocation&quot;</span>] ||<br>      !authSetting[<span class="hljs-string">&quot;scope.userLocationBackground&quot;</span>]<br>    ) &#123;<br>      <span class="hljs-comment">// 让用户在弹出的选项中务必勾选“使用小程序期间和离开小程序之后”选项</span><br>      <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">openSetting</span>();<br>    &#125;<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><h3 id="3-完整代码"><a href="#3-完整代码" class="headerlink" title="3. 完整代码"></a>3. 完整代码</h3><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Taro</span>, &#123; useReady, useDidShow, useDidHide &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@tarojs/taro&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">View</span>, <span class="hljs-title class_">Map</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@tarojs/components&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">hasOwnProperty</span> = (<span class="hljs-params">obj, key</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hasOwnProperty</span>.<span class="hljs-title function_">call</span>(obj, key);<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">HandleLocation</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [systemSetting, setSystemSetting] = <span class="hljs-title function_">useState</span>(&#123;&#125;);<br>  <span class="hljs-keyword">const</span> [location, setLocation] = <span class="hljs-title function_">useState</span>(&#123; <span class="hljs-attr">longitude</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-attr">latitude</span>: <span class="hljs-string">&quot;&quot;</span> &#125;);<br>  <span class="hljs-keyword">const</span> [locationList, setLocationList] = <span class="hljs-title function_">useState</span>([]);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleGetLocation</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">canIUse</span>(<span class="hljs-string">&quot;startLocationUpdateBackground&quot;</span>)) &#123;<br>      <span class="hljs-comment">// https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html</span><br>      <span class="hljs-comment">// 小程序全局配置</span><br>      <span class="hljs-comment">// https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#permission</span><br>      <span class="hljs-comment">// wx.authorize(&#123;scope: &quot;scope.userInfo&quot;&#125;)，不会弹出授权窗口，请使用 &lt;button open-type=&quot;getUserInfo&quot;/&gt;</span><br>      <span class="hljs-comment">// 需要授权 scope.userLocation、scope.userLocationBackground 时必须配置地理位置用途说明</span><br><br>      <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">startLocationUpdateBackground</span>(&#123;<br>        <span class="hljs-title function_">success</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">onLocationChange</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>            <span class="hljs-title function_">setLocationList</span>(<span class="hljs-function">(<span class="hljs-params">pre</span>) =&gt;</span> [...pre, data]);<br><br>            <span class="hljs-title function_">setLocation</span>(&#123; <span class="hljs-attr">longitude</span>: data.<span class="hljs-property">longitude</span>, <span class="hljs-attr">latitude</span>: data.<span class="hljs-property">latitude</span> &#125;);<br><br>            <span class="hljs-comment">// ajax发送数据到后台</span><br>            <span class="hljs-comment">// ...</span><br>          &#125;);<br>        &#125;,<br>        <span class="hljs-title function_">fail</span>(<span class="hljs-params">err</span>) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>          <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">showToast</span>(&#123;<br>            <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;定位失败&quot;</span>,<br>          &#125;);<br><br>          <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">openSetting</span>();<br>        &#125;,<br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">showToast</span>(&#123;<br>        <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;您的设备暂不支持定位&quot;</span>,<br>      &#125;);<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-comment">// 检查手机是否打开位置信息开关</span><br>  <span class="hljs-comment">// 检查是否给微信开了定位权限</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">checkMobileLocationAuth</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">getSystemInfoAsync</span>(&#123;<br>        <span class="hljs-title function_">success</span>(<span class="hljs-params">data</span>) &#123;<br>          <span class="hljs-title function_">setSystemSetting</span>(data);<br><br>          <span class="hljs-keyword">if</span> (<br>            data &amp;&amp;<br>            <span class="hljs-title function_">hasOwnProperty</span>(data, <span class="hljs-string">&quot;locationEnabled&quot;</span>) &amp;&amp;<br>            !data.<span class="hljs-property">locationEnabled</span><br>          ) &#123;<br>            <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">showModal</span>(&#123;<br>              <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;提示&quot;</span>,<br>              <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;请打开手机设置-位置信息(GPS)开关&quot;</span>,<br>              <span class="hljs-attr">confirmText</span>: <span class="hljs-string">&quot;确定&quot;</span>,<br>              <span class="hljs-attr">showCancel</span>: <span class="hljs-literal">false</span>,<br>            &#125;);<br><br>            <span class="hljs-title function_">reject</span>();<br>          &#125;<br><br>          <span class="hljs-keyword">if</span> (<br>            data &amp;&amp;<br>            <span class="hljs-title function_">hasOwnProperty</span>(data, <span class="hljs-string">&quot;locationAuthorized&quot;</span>) &amp;&amp;<br>            !data.<span class="hljs-property">locationAuthorized</span><br>          ) &#123;<br>            <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">showModal</span>(&#123;<br>              <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;提示&quot;</span>,<br>              <span class="hljs-attr">content</span>:<br>                <span class="hljs-string">&quot;请打开手机设置-应用设置-应用管理-微信-权限管理-定位权限开关&quot;</span>,<br>              <span class="hljs-attr">confirmText</span>: <span class="hljs-string">&quot;确定&quot;</span>,<br>              <span class="hljs-attr">showCancel</span>: <span class="hljs-literal">false</span>,<br>              <span class="hljs-title function_">success</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-comment">// Taro.openSetting();</span><br>              &#125;,<br>            &#125;);<br><br>            <span class="hljs-title function_">reject</span>();<br>          &#125;<br><br>          <span class="hljs-title function_">resolve</span>();<br>        &#125;,<br>        <span class="hljs-title function_">fail</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-title function_">reject</span>();<br>        &#125;,<br>      &#125;);<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-comment">// 检查当前小程序是否开了定位权限</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">checkMiniAppLocationAuth</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">canIUse</span>(<span class="hljs-string">&quot;getSetting&quot;</span>)) <span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>();<br><br>      <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">getSetting</span>(&#123;<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>          <span class="hljs-keyword">const</span> authSetting = res.<span class="hljs-property">authSetting</span>;<br><br>          <span class="hljs-keyword">if</span> (<br>            authSetting &amp;&amp;<br>            <span class="hljs-title function_">hasOwnProperty</span>(authSetting, <span class="hljs-string">&quot;scope.userLocation&quot;</span>) &amp;&amp;<br>            <span class="hljs-title function_">hasOwnProperty</span>(authSetting, <span class="hljs-string">&quot;scope.userLocationBackground&quot;</span>) &amp;&amp;<br>            authSetting[<span class="hljs-string">&quot;scope.userLocation&quot;</span>] &amp;&amp;<br>            authSetting[<span class="hljs-string">&quot;scope.userLocationBackground&quot;</span>]<br>          ) &#123;<br>            <span class="hljs-title function_">resolve</span>();<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">canIUse</span>(<span class="hljs-string">&quot;openSetting&quot;</span>)) &#123;<br>              <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">showModal</span>(&#123;<br>                <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;提示&quot;</span>,<br>                <span class="hljs-attr">content</span>:<br>                  <span class="hljs-string">&quot;请在点击确定后，在弹出的选项中务必勾选“使用小程序期间和离开小程序之后”选项&quot;</span>,<br>                <span class="hljs-attr">confirmText</span>: <span class="hljs-string">&quot;确定&quot;</span>,<br>                <span class="hljs-attr">showCancel</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-title function_">success</span>(<span class="hljs-params"></span>) &#123;<br>                  <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">openSetting</span>();<br>                &#125;,<br>              &#125;);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">showModal</span>(&#123;<br>                <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;提示&quot;</span>,<br>                <span class="hljs-attr">content</span>:<br>                  <span class="hljs-string">&quot;请点击右上角“...”更多-设置-位置信息，在弹出的选项中务必勾选“使用小程序期间和离开小程序之后”选项&quot;</span>,<br>                <span class="hljs-attr">confirmText</span>: <span class="hljs-string">&quot;确定&quot;</span>,<br>                <span class="hljs-attr">showCancel</span>: <span class="hljs-literal">false</span>,<br>              &#125;);<br>            &#125;<br><br>            <span class="hljs-title function_">reject</span>();<br>          &#125;<br>        &#125;,<br>      &#125;);<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-title function_">useReady</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;useReady==&gt;&quot;</span>);<br>  &#125;);<br><br>  <span class="hljs-title function_">useDidShow</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;useDidShow==&gt;&quot;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">canIUse</span>(<span class="hljs-string">&quot;stopLocationUpdate&quot;</span>)) &#123;<br>      <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">stopLocationUpdate</span>(&#123;<br>        <span class="hljs-title function_">complete</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-title function_">checkMobileLocationAuth</span>()<br>            .<span class="hljs-title function_">then</span>(checkMiniAppLocationAuth)<br>            .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>              <span class="hljs-comment">// 全部ok，可以进行持续定位</span><br>              <span class="hljs-title function_">handleGetLocation</span>();<br>            &#125;)<br>            .<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;err==&gt;&quot;</span>);<br>            &#125;);<br>        &#125;,<br>      &#125;);<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-title function_">useDidHide</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;useDidHide==&gt;&quot;</span>);<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Map</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%; height: 200px;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">scale</span>=<span class="hljs-string">&#123;16&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">longitude</span>=<span class="hljs-string">&#123;location.longitude&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">latitude</span>=<span class="hljs-string">&#123;location.latitude&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><ul><li>经过本地开发实际测试，把小程序切到后台后，切换到其他 app</li><li>或者手机直接锁屏</li></ul><p>以上两种情况，1 分钟后，<code>startLocationUpdateBackground</code>api 即失效，只有重新解锁手机，重新回到微信，api 的实时位置监控才被唤醒，尚未找到解决方法 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="微信小程序授权">[1]</span></a></sup></p><h3 id="5-其他"><a href="#5-其他" class="headerlink" title="5. 其他"></a>5. 其他</h3><p>钉钉小程序<code>dd.getLocation</code>只有当前钉钉小程序当前在激活状态下可以获取到，切换到后台和手机锁屏后，即失效 <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="微信小程序全局配置">[2]</span></a></sup></p><h3 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6. 参考资料"></a>6. 参考资料</h3><!-- 1. [微信小程序授权](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html)2. [微信小程序全局配置](https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#permission) --><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html">微信小程序授权</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#permission">微信小程序全局配置</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>wechat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>微信小程序</tag>
      
      <tag>wechat</tag>
      
      <tag>tarojs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多图超详细 jenkins 容器安装并部署前端项目</title>
    <link href="/2022/03/08/jenkins/"/>
    <url>/2022/03/08/jenkins/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://github.com/sRect/myJenkins">本文 my-jenkins github 仓库</a></li><li><a href="https://github.com/sRect/myblog">本文前端 react 项目 github 仓库</a></li></ul><h3 id="1-提前准备"><a href="#1-提前准备" class="headerlink" title="1.提前准备"></a>1.提前准备</h3><ol><li>1 台 linux 云服务器或者本地虚拟机代替</li><li>在服务器宿主机上装好 docker</li><li>准备好 2 个 github 仓库(或者 gitee 仓库),1 个用于 jenkins，1 个用于前端项目(文章以 github 仓库为例)</li><li>1 个 dockerhub 仓库，用于存储 jenkins 镜像</li></ol><h3 id="2-jenkins-容器安装"><a href="#2-jenkins-容器安装" class="headerlink" title="2.jenkins 容器安装"></a>2.jenkins 容器安装</h3><h4 id="1-安装前的疑问"><a href="#1-安装前的疑问" class="headerlink" title="1. 安装前的疑问"></a>1. 安装前的疑问</h4><ol><li>为什么不直接在宿主机上安装 jenkins？</li></ol><p>答：可以直接在宿主机上安装 jenkins，并不一定非得使用容器这种形式安装，只不过本文使用了容器安装这种方式。</p><ol start="2"><li>为什么不直接拉取 dockerhub 上的 jenkins 镜像？</li></ol><p>答：可以直接拉取，但一定要拉取<code>jenkins/jenkins</code>这个镜像，<code>jenkins</code>这个镜像已经很久没维护了。<br>还有官方的 jenkins 镜像默认是没有 sudo 用户权限的，即执行<code>sudo wget http://xxxx</code>，是不识别 sudo 命令的，还有常见的<code>wget</code>、<code>vim</code>、<code>ping</code>等常用命令都是没有的，需要自己安装，所以这里选择自己构建 jenkins 镜像。</p><ol start="3"><li>如何在 jenkins 容器里执行 docker 命令？</li></ol><p>答：<a href="http://www.up4dev.com/2018/11/27/run-docker-by-jenkins-in-docker/">一番搜索，有两种方案</a>，本文使用了 <code>Docker-outside-of-Docker</code> 方案，另一种未实验成功。</p><ul><li><p><code>Docker-outside-of-Docker</code></p><p>使用外部的 docker，即容器宿主机上的 docker。将宿主机的 docker 程序映射到 jenkins 容器里。这样没安装 docker 的 jenkins 容器可以执行 docker 命令。但需要注意的是，容器里本身是没有 docker 的，是把指令发送给宿主机来执行的。</p></li><li><p><code>Docker-in-Docker</code></p><p>顾名思义，在 docker 容器里安装 docker，然后使用 docker。容器里有 docker，和宿主机上的 docker 是隔离的。</p></li></ul><h4 id="2-Dockerfile-编写"><a href="#2-Dockerfile-编写" class="headerlink" title="2. Dockerfile 编写"></a>2. Dockerfile 编写</h4><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> jenkins/jenkins:latest<br><br><span class="hljs-keyword">USER</span> root<br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update \</span><br><span class="language-bash">  <span class="hljs-comment"># 安装sudo</span></span><br>  &amp;&amp; apt-get install -y sudo \<br>  &amp;&amp; rm -rf /var/lib/apt/lists/*<br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;jenkins ALL=NOPASSWD: ALL&quot;</span> &gt;&gt; /etc/sudoers</span><br><br><span class="hljs-keyword">USER</span> jenkins<br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br></code></pre></div></td></tr></table></figure><h4 id="3-github-的-workflow-配置文件"><a href="#3-github-的-workflow-配置文件" class="headerlink" title="3. github 的 workflow 配置文件"></a>3. github 的 workflow 配置文件</h4><ul><li><p>前提需要在 github 的 jenkins 仓库里设置好 secrets</p></li><li><p>在仓库的<code>Settings -&gt; Secrets -&gt; Actions</code>，点击<code>New repository secret</code>按钮创建你的 dockerhub 账号和密码，即添加<code>DOCKERHUB_USERNAME</code>和<code>DOCKERHUB_TOKEN</code>。如下图所示操作：</p></li></ul><p><img src="/assets/img/jenkins-docker/add-secrets.jpg" alt="add secrets"></p><ul><li>&#x2F;.github&#x2F;workflows&#x2F;deploy.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">jenkins</span> <span class="hljs-string">image</span> <span class="hljs-string">build</span> <span class="hljs-string">and</span> <span class="hljs-string">push</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [<span class="hljs-string">main</span>]<br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br><br>      <span class="hljs-comment">#制作docker镜像推送到dockerhub</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">build</span> <span class="hljs-string">and</span> <span class="hljs-string">push</span> <span class="hljs-string">to</span> <span class="hljs-string">dockerhub</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          docker login -u $&#123;&#123; secrets.DOCKERHUB_USERNAME &#125;&#125; -p $&#123;&#123; secrets.DOCKERHUB_TOKEN &#125;&#125;</span><br><span class="hljs-string">          docker image build -t my-jenkins:latest .</span><br><span class="hljs-string">          docker tag my-jenkins:latest $&#123;&#123; secrets.DOCKERHUB_USERNAME &#125;&#125;/my-jenkins:latest</span><br><span class="hljs-string">          docker push $&#123;&#123; secrets.DOCKERHUB_USERNAME &#125;&#125;/my-jenkins:latest</span><br><span class="hljs-string">          docker logout</span><br></code></pre></div></td></tr></table></figure><ul><li>git 提交代码，自动打包推送镜像到 dockerhub</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;feat: init&quot;</span><br>git push -u origin main<br></code></pre></div></td></tr></table></figure><p>不出意外，<code>Actions</code>里可以看到，自动部署成功</p><p><img src="/assets/img/jenkins-docker/workflows.jpg" alt="workflows"></p><p>镜像也成功推送到 dockerhub 了</p><p><img src="/assets/img/jenkins-docker/myjebkins.jpg" alt="myjebkins"></p><h4 id="4-在服务器宿主机上拉取刚才的镜像并安装"><a href="#4-在服务器宿主机上拉取刚才的镜像并安装" class="headerlink" title="4. 在服务器宿主机上拉取刚才的镜像并安装"></a>4. 在服务器宿主机上拉取刚才的镜像并安装</h4><ol><li>拉取镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker pull [你的dockerhub名字]/my-jenkins:latest<br></code></pre></div></td></tr></table></figure><ol start="2"><li>启动容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo docker container run -d \<br>-v /var/run/docker.sock:/var/run/docker.sock \<br>-v $(which docker):/usr/bin/docker \<br>-p 8000:8080 \<br>--name my-jenkins [你的dockerhub名字]/my-jenkins:latest<br></code></pre></div></td></tr></table></figure><p>解释下参数的含义：</p><ul><li><p><code>-d</code>: 后台运行容器</p></li><li><p><code>-v</code>: 指定挂载目录卷。</p><ul><li>第 1 行表示将宿主机上的<code>/var/run/docker.sock</code>目录映射到容器中，这样我们在容器中运行的 docker 命令，就会被发送到宿主机上去执行</li><li>第 2 行表示将宿主机上的 docker 程序映射到容器中，这样容器就可以运行 docker 命令，容器本身没有安装 docker 服务。</li></ul></li><li><p><code>-p</code>: 前面是宿主机上的端口(服务器安全组中要配置好，不然浏览器里无法访问)，后面是容器端口，jenkins 默认是 8080 端口</p></li><li><p><code>-name</code>: 给容器命名，是基于<code>[你的dockerhub名字]/my-jenkins:latest</code>这个镜像创建的容器，并命名为<code>my-jenkins</code></p></li></ul><p>不出意外，容器启动成功，我们可以用浏览器进行访问了。</p><h3 id="3-jenkins-容器配置"><a href="#3-jenkins-容器配置" class="headerlink" title="3.jenkins 容器配置"></a>3.jenkins 容器配置</h3><blockquote><p><strong>注意</strong>：如果在 jenkins 里不部署 docker 项目，这一章节可以略过，这里都是为了能在 jenkins 里部署 docker 项目准备的。</p></blockquote><p>在浏览器访问前，我们还需要进入容器内部，安装常用命令工具，检验是否可以执行 docker 命令。</p><ol><li>先进入容器内部</li></ol><blockquote><p>如果你的宿主机上安装了如<code>portainer</code>、<code>rancher</code>等 docker 容器管理面板，可以直接通过可视化的方式来进入容器，就不用敲命令了。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker container <span class="hljs-built_in">exec</span> -it my-jenkins /bin/bash<br></code></pre></div></td></tr></table></figure><ol start="2"><li>查看系统信息</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/issue<br></code></pre></div></td></tr></table></figure><p>不出意外，打印出</p><figure class="highlight livescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livescript">Debian GNU/Linux <span class="hljs-number">11</span> <span class="hljs-string">\n</span> <span class="hljs-string">\l</span><br></code></pre></div></td></tr></table></figure><p>说明容器内部是<code>Debian</code>发行版，不是<code>Ubuntu</code>，也不是<code>CentOS</code>。</p><ol start="3"><li>安装常用工具</li></ol><blockquote><p>因为容器内是<code>Debian</code>，那就使用 <code>apt-get</code>。安装这些工具的目的在于后面有可能需要进入容器操作，所以这里提前安装好。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 先更新升级apt-get源</span><br>sudo apt-get update<br>sudo apt-get upgrade<br><span class="hljs-comment"># 安装systemctl</span><br>sudo apt-get install -y systemctl<br><span class="hljs-comment"># 安装vim</span><br>sudo apt-get install -y vim<br><span class="hljs-comment"># 安装wget</span><br>sudo apt-get install -y wget<br></code></pre></div></td></tr></table></figure><ol start="4"><li>检验容器内部是否可以执行 docker 命令</li></ol><ul><li><p>测试 <code>docker -v</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker -v<br></code></pre></div></td></tr></table></figure><p>不出意外，正常打印信息，比如：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Docker</span> version <span class="hljs-number">17</span>.<span class="hljs-number">12</span>.<span class="hljs-number">1</span>-ce, build <span class="hljs-number">7390</span>fc6<br></code></pre></div></td></tr></table></figure><p>如果出现报错：</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">docker: <span class="hljs-keyword">error</span> <span class="hljs-keyword">while</span> loading shared libraries: libltdl.<span class="hljs-keyword">so</span>.7: cannot <span class="hljs-keyword">open</span> shared object <span class="hljs-keyword">file</span>: <span class="hljs-keyword">No</span> such <span class="hljs-keyword">file</span> or directory<br></code></pre></div></td></tr></table></figure><p>那就再安装<code>libltdl7</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install -y libltdl7<br></code></pre></div></td></tr></table></figure></li><li><p>测试运行 <code>hello-world</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo docker run --<span class="hljs-built_in">rm</span> hello-world<br></code></pre></div></td></tr></table></figure><p>如果正常打印下面信息，说明在容器里执行 docker 命令是没问题的。</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">Hello <span class="hljs-keyword">from</span> Docker!<br>This message shows <span class="hljs-keyword">that</span> your installation appears <span class="hljs-keyword">to</span> be working correctly.<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="4-jenkins-初始化"><a href="#4-jenkins-初始化" class="headerlink" title="4.jenkins 初始化"></a>4.jenkins 初始化</h3><ol><li>浏览器里访问<code>http://[你的服务器ip]:[上面启动容器暴露的端口，我这里是8000]</code>，开始初始化，如下图：</li></ol><p><img src="/assets/img/jenkins-docker/jenkens-init.jpg"></p><ol start="2"><li>初始化结束后，需要解锁 Jenkins</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-unlock.jpg"></p><p>进入容器内部，执行下面命令，复制出那一串密码，粘贴到这里，然后点击确定</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /var/jenkins_home/secrets/initialAdminPassword<br></code></pre></div></td></tr></table></figure><ol start="3"><li>安装推荐的插件</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-plugin.jpg"></p><p>点击左侧<em>安装推荐的插件</em>，过一会，等插件安装好</p><p><img src="/assets/img/jenkins-docker/jenkins-plugins-install.jpg"></p><ol start="4"><li>注册管理员账号</li></ol><p>按着提示一步步来操作</p><p><img src="/assets/img/jenkins-docker/jenkins-admin.jpg"></p><ol start="5"><li>最终进入 jenkins 首页，表示安装成功了</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-welcome.jpg"></p><h3 id="5-jenkins-部署前端项目"><a href="#5-jenkins-部署前端项目" class="headerlink" title="5.jenkins 部署前端项目"></a>5.jenkins 部署前端项目</h3><blockquote><p>这里以 react(create-react-app 创建) 项目为例，vue 的一样的，和框架无关</p></blockquote><h4 id="5-1-Jenkins-安装-Nodejs-插件"><a href="#5-1-Jenkins-安装-Nodejs-插件" class="headerlink" title="5.1 Jenkins 安装 Nodejs 插件"></a>5.1 Jenkins 安装 Nodejs 插件</h4><blockquote><p>因为是前端项目，离不开 nodejs，所以要安装</p></blockquote><ol><li>点击左侧<code>Manage Jenkins(系统管理)</code>,在<code>System Configuration(系统配置)</code>下点击<code>Manage Plugins(插件管理)</code>，找到并安装 Nodejs 插件，点击<code>Download now and install after restart</code>,安装完成后，勾选重启，jenkins 会自动重启</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-plugin-nodejs.png"></p><ol start="2"><li>重启完成后，点击左侧<code>Manage Jenkins(系统管理)</code>,在<code>System Configuration(系统配置)</code>下点击<code>全局工具配置</code>，找到 Nodejs 选项，点击<code>新增Nodejs</code>按钮，输入别名，最后点击保存，就配置好 Nodejs 了</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-global-plugin.jpg"></p><h4 id="5-2-部署前的配置"><a href="#5-2-部署前的配置" class="headerlink" title="5.2 部署前的配置"></a>5.2 部署前的配置</h4><ol><li><p>提前准备好前端项目，提交到 github 仓库</p></li><li><p>github 生成 Personal access tokens</p><p>github 头像下拉框-&gt; <code>Settings</code> -&gt; 左侧菜单<code>Developer settings</code> -&gt; <code>Personal access tokens</code> -&gt; 点击<code>Generate new token</code>，<strong>注意：请把生成的 token 复制下来，页面刷新后就没了</strong></p></li></ol><p><img src="/assets/img/jenkins-docker/github-token.jpg"></p><ol start="3"><li>jenkins 中添加 Github 服务器</li></ol><ul><li>系统管理 -&gt; 系统配置 -&gt; 添加 Github 服务器 -&gt; 添加 Secret text 凭证 -&gt; 连接测试</li></ul><p><img src="/assets/img/jenkins-docker/jenkins-addpj.jpg"></p><ul><li>第 2 步点击后，弹出下面弹框，类型里下拉选择<code>Secret text</code>,<code>Secret</code>里填入上面生成的 token，点击确定</li></ul><p><img src="/assets/img/jenkins-docker/jenkins-pj.jpg"></p><ul><li>第 5 步点击后，勾选<code>为Github指定另一个Hook URL</code>,会自动生成一个 url，保存下这个 url</li></ul><p><img src="/assets/img/jenkins-docker/jenkins-auto-webhooks.jpg"></p><p><strong>最后，别忘记保存</strong></p><ol start="4"><li>配置 github 仓库的<code>Webhooks</code></li></ol><ul><li><p>点击<code>Settings</code>-&gt;<code>Webhooks</code>-&gt;<code>Add Webhook</code>-&gt;输入<code>Payload URL</code></p></li><li><p>这里的 Payload URL，就是上面生成的 Hook URL</p></li></ul><p><img src="/assets/img/jenkins-docker/github-webhook.jpg"></p><h4 id="5-3-正式部署前端项目"><a href="#5-3-正式部署前端项目" class="headerlink" title="5.3 正式部署前端项目"></a>5.3 正式部署前端项目</h4><ol><li>jenkins 左侧菜单点击<code>新建任务</code>，输入任务名称，选择<code>构建一个自由风格的软件项目</code>，点击确定</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-firsttask.jpg"></p><ol start="2"><li>创建</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-task-1.jpg"></p><ol start="3"><li>源码管理</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-task-2.jpg"></p><ol start="4"><li>构建触发器</li></ol><blockquote><p>这样每次在提交代码后，jenkins 就可以自动为我们构建项目</p></blockquote><p>勾选<code>GitHub hook trigger for GITScm polling</code></p><p><img src="/assets/img/jenkins-docker/jenkins-task-3.jpg"></p><ol start="5"><li>构建环境</li></ol><p>这里是选择项目需要的 nodejs 版本，nodejs 的版本就按着前面所说的添加</p><p><img src="/assets/img/jenkins-docker/jenkins-task-4.jpg"></p><ol start="6"><li>构建-执行 shell</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-task-5.jpg"></p><p>完整 shell 如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">node -v<br>npm -v<br>docker -v<br>sudo su<br><br>echo &quot;1.开始打包构建==&gt;&quot;<br>npm install -g yarn<br>yarn install<br>npm run build<br><br>&#123; # try<br>echo &quot;2.暂停旧的容器==&gt;&quot;<br>  sudo docker container stop react-app<br>&#125; || &#123; # catch<br>  echo &quot;2.旧的容器不存在==&gt;&quot;<br>    # save log for exception<br>&#125;<br><br>&#123; # try<br>echo &quot;3.删除旧的容器==&gt;&quot;<br>  sudo docker container rm react-app<br>&#125; || &#123; # catch<br>  echo &quot;3.旧的容器不存在==&gt;&quot;<br>&#125;<br><br>&#123; # try<br>echo &quot;4.删除旧的镜像==&gt;&quot;<br>  sudo docker image rm react-app:latest<br>&#125; || &#123; # catch<br>  echo &quot;4.旧的镜像不存在==&gt;&quot;<br>&#125;<br><br>echo &quot;5.开始构建==&gt;&quot;<br>sudo docker image build -t react-app:latest .<br>sudo docker tag react-app:latest srect/react-app:latest<br><br>echo &quot;6.开始启动docer容器==&gt;&quot;<br><br>sudo docker container run -d -p 8002:80 --name react-app react-app:latest<br></code></pre></div></td></tr></table></figure><ol start="7"><li>点击保存，然后<code>立即构建</code>，可以进入任务，点击控制台输出，查看具体的构建日志</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-console.jpg"></p><ol start="8"><li>我们可以随便修改下前端代码，然后提交代码，测试是否会自动构建</li></ol><p><img src="/assets/img/jenkins-docker/jenkins-github-hook-log.jpg"></p><h3 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6. 参考资料"></a>6. 参考资料</h3><ol><li><a href="http://www.up4dev.com/2018/11/27/run-docker-by-jenkins-in-docker/">用安装在 Docker 中的 jenkins 运行 Docker 任务</a></li><li><a href="https://blog.csdn.net/qq_35566908/article/details/103149181">Jenkins+Github 实现自动触发构建</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jenkins</tag>
      
      <tag>docker</tag>
      
      <tag>ci</tag>
      
      <tag>cd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打造一个保存掘金文章的 cli</title>
    <link href="/2022/02/18/mycli/"/>
    <url>/2022/02/18/mycli/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://www.npmjs.com/package/juejin-save">npm package</a></li><li><a href="https://github.com/sRect/juejin-save">github 源码仓库</a></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm i juejin-save -g<br></code></pre></div></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">juejin-<span class="hljs-keyword">save</span> <span class="hljs-keyword">save</span> https:<span class="hljs-comment">//xxx</span><br></code></pre></div></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/assets/img/mycli/GIF.gif" alt="gif"></p><hr><h3 id="1-主要-package-version"><a href="#1-主要-package-version" class="headerlink" title="1. 主要 package version"></a>1. 主要 package version</h3><blockquote><p>注意：文章重点在于打造 cli，不是 puppeteer</p></blockquote><table><thead><tr><th align="left">package</th><th align="left">version</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left"><a href="https://github.com/tj/commander.js/blob/HEAD/Readme_zh-CN.md#%E5%91%BD%E4%BB%A4">commander</a></td><td align="left">^9.0.0</td><td align="left">创建处理命令</td></tr><tr><td align="left"><a href="https://github.com/SBoudrias/Inquirer.js/#objects">inquirer</a></td><td align="left">^8.2.0</td><td align="left">处理交互</td></tr><tr><td align="left"><a href="https://www.npmjs.com/package/ora">ora</a></td><td align="left">^5.4.1</td><td align="left">处理 loading</td></tr><tr><td align="left"><a href="https://github.com/puppeteer/puppeteer">puppeteer</a></td><td align="left">^13.3.2</td><td align="left">通过 api 来控制 Chromium 或 Chrome</td></tr></tbody></table><h3 id="2-项目目录结构"><a href="#2-项目目录结构" class="headerlink" title="2. 项目目录结构"></a>2. 项目目录结构</h3><figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript">├── bin<br>|  └── cli.js          <span class="hljs-comment">// 入口文件</span><br>├── LICENSE<br>├── <span class="hljs-keyword">package</span>-lock.json<br>├── <span class="hljs-keyword">package</span>.json<br>├── puppeteer.js       <span class="hljs-comment">// puppeteer保存文章文件</span><br>└── README.md<br></code></pre></div></td></tr></table></figure><h3 id="2-package-json-中添加bin字段"><a href="#2-package-json-中添加bin字段" class="headerlink" title="2. package.json 中添加bin字段"></a>2. package.json 中添加<code>bin</code>字段</h3><blockquote><p>添加<code>juejin-save</code>命令，指定运行文件为 bin 目录 cli.js</p></blockquote><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-addition">+ &#123;</span><br><span class="hljs-addition">+   &quot;bin&quot;: &#123;</span><br><span class="hljs-addition">+     &quot;juejin-save&quot;: &quot;bin/cli.js&quot;</span><br><span class="hljs-addition">+   &#125;</span><br><span class="hljs-addition">+ &#125;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-主要-package-api-介绍"><a href="#3-主要-package-api-介绍" class="headerlink" title="3. 主要 package api 介绍"></a>3. 主要 package api 介绍</h3><h4 id="3-1-commander"><a href="#3-1-commander" class="headerlink" title="3.1 commander"></a>3.1 commander</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Command</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;commander&quot;</span>);<br><span class="hljs-keyword">const</span> program = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Command</span>();<br><br>program<br>  .<span class="hljs-title function_">command</span>(<span class="hljs-string">&quot;clone &lt;source&gt; [destination]&quot;</span>)<br>  .<span class="hljs-title function_">description</span>(<span class="hljs-string">&quot;clone a repository into a newly created directory&quot;</span>)<br>  .<span class="hljs-title function_">action</span>(<span class="hljs-function">(<span class="hljs-params">source, destination</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;clone command called&quot;</span>);<br>  &#125;);<br><br>program.<span class="hljs-title function_">parse</span>();<br></code></pre></div></td></tr></table></figure><h4 id="3-2-inquirer"><a href="#3-2-inquirer" class="headerlink" title="3.2 inquirer"></a>3.2 inquirer</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> inquirer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;inquirer&quot;</span>);<br>inquirer<br>  .<span class="hljs-title function_">prompt</span>([<br>    <span class="hljs-comment">/* Pass your questions in here */</span><br>  ])<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">answers</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// Use user feedback for... whatever!!</span><br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (error.<span class="hljs-property">isTtyError</span>) &#123;<br>      <span class="hljs-comment">// Prompt couldn&#x27;t be rendered in the current environment</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// Something else went wrong</span><br>    &#125;<br>  &#125;);<br></code></pre></div></td></tr></table></figure><h4 id="3-3-ora"><a href="#3-3-ora" class="headerlink" title="3.3 ora"></a>3.3 ora</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> ora <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;ora&quot;</span>;<br><br><span class="hljs-keyword">const</span> spinner = <span class="hljs-title function_">ora</span>(<span class="hljs-string">&quot;Loading unicorns&quot;</span>).<span class="hljs-title function_">start</span>();<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  spinner.<span class="hljs-property">color</span> = <span class="hljs-string">&quot;yellow&quot;</span>;<br>  spinner.<span class="hljs-property">text</span> = <span class="hljs-string">&quot;Loading rainbows&quot;</span>;<br>&#125;, <span class="hljs-number">1000</span>);<br></code></pre></div></td></tr></table></figure><h4 id="3-4-puppeteer"><a href="#3-4-puppeteer" class="headerlink" title="3.4 puppeteer"></a>3.4 puppeteer</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> puppeteer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;puppeteer&quot;</span>);<br><br>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> browser = <span class="hljs-keyword">await</span> puppeteer.<span class="hljs-title function_">launch</span>();<br>  <span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">newPage</span>();<br>  <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">goto</span>(<span class="hljs-string">&quot;https://example.com&quot;</span>);<br>  <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">screenshot</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;example.png&quot;</span> &#125;);<br><br>  <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">close</span>();<br>&#125;)();<br></code></pre></div></td></tr></table></figure><h3 id="4-主要逻辑代码"><a href="#4-主要逻辑代码" class="headerlink" title="4. 主要逻辑代码"></a>4. 主要逻辑代码</h3><ol><li>bin&#x2F;cli.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-meta">#!/usr/bin/env node</span><br><br><span class="hljs-keyword">const</span> inquirer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;inquirer&quot;</span>);<br><span class="hljs-keyword">const</span> ora = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;ora&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Command</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;commander&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; puppeteerInit, saveToHtml, saveToMd, saveToPdf &#125; = <span class="hljs-built_in">require</span>(path.<span class="hljs-title function_">resolve</span>(<br>  __dirname,<br>  <span class="hljs-string">&quot;../puppeteer&quot;</span><br>));<br><br><span class="hljs-keyword">const</span> program = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Command</span>();<br><span class="hljs-keyword">const</span> spinner = <span class="hljs-title function_">ora</span>();<br><br><span class="hljs-comment">// 交互式询问</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handlePrompt</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> inquirer.<span class="hljs-title function_">prompt</span>([<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;autoCreateFolder&quot;</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">`Automatically create folders?`</span>,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;confirm&quot;</span>,<br>    &#125;,<br>    <span class="hljs-comment">//...</span><br>  ]);<br>&#125;<br><br><span class="hljs-comment">// 询问过后的处理,开始puppeteer初始化</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">AfterePrompt</span>(<span class="hljs-params">articleUrl, answers</span>) &#123;<br>  spinner.<span class="hljs-property">color</span> = <span class="hljs-string">&quot;yellow&quot;</span>;<br>  spinner.<span class="hljs-title function_">start</span>(<span class="hljs-string">&quot;puppeteer intial...&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> obj = <span class="hljs-keyword">await</span> <span class="hljs-title function_">puppeteerInit</span>(articleUrl, answers);<br><br>  spinner.<span class="hljs-title function_">stopAndPersist</span>(&#123;<br>    <span class="hljs-attr">symbol</span>: chalk.<span class="hljs-title function_">green</span>(<span class="hljs-string">&quot;✓&quot;</span>),<br>    <span class="hljs-attr">text</span>: chalk.<span class="hljs-title function_">green</span>(<span class="hljs-string">&quot;puppeteer init ok&quot;</span>),<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> obj;<br>&#125;<br><br><span class="hljs-comment">// 导出文件</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">exportFile</span>(<span class="hljs-params">arg</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; page, outMdFilePath, outPdfFilePath, outHtmlfFilePath &#125; = arg;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">saveToMd</span>(page, outMdFilePath);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">saveToPdf</span>(page, outPdfFilePath);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">saveToHtml</span>(page, outHtmlfFilePath);<br>&#125;<br><br><span class="hljs-comment">// 第一步：创建命令</span><br>program<br>  .<span class="hljs-title function_">version</span>(<span class="hljs-built_in">require</span>(path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../package.json&quot;</span>)).<span class="hljs-property">version</span>)<br>  .<span class="hljs-title function_">command</span>(<span class="hljs-string">&quot;save  &lt;article-url&gt;&quot;</span>)<br>  .<span class="hljs-title function_">description</span>(<span class="hljs-string">&quot;save https://xxx&quot;</span>)<br>  .<span class="hljs-title function_">action</span>(<span class="hljs-keyword">async</span> (articleUrl) =&gt; &#123;<br>    <span class="hljs-comment">// 第二步：交互式询问</span><br>    <span class="hljs-keyword">const</span> answers = <span class="hljs-keyword">await</span> <span class="hljs-title function_">handlePrompt</span>(articleUrl);<br>    <span class="hljs-comment">// 第三步：拿到交互结果</span><br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> <span class="hljs-title class_">AfterePrompt</span>(articleUrl, answers);<br>    <span class="hljs-comment">// 第四步：导出文件</span><br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">exportFile</span>(data);<br><br>    process.<span class="hljs-title function_">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;);<br><br>program.<span class="hljs-title function_">parse</span>();<br></code></pre></div></td></tr></table></figure><ol start="2"><li>puppeteer.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> puppeteer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;puppeteer&quot;</span>);<br><br><span class="hljs-comment">// 保存html</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">saveToHtml</span>(<span class="hljs-params">page, outHtmlfFilePath</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// 保存markdown</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">saveToMd</span>(<span class="hljs-params">page, outMdFilePath</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// 保存pdf</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">saveToPdf</span>(<span class="hljs-params">page, outPdfFilePath</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// puppeteer初始化</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">puppeteerInit</span>(<span class="hljs-params">href</span>) &#123;<br>  <span class="hljs-keyword">const</span> browser = <span class="hljs-keyword">await</span> puppeteer.<span class="hljs-title function_">launch</span>();<br>  <span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">newPage</span>();<br>  page.<span class="hljs-title function_">setViewport</span>(&#123;<br>    <span class="hljs-attr">width</span>: <span class="hljs-number">1920</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-number">1080</span>,<br>  &#125;);<br><br>  <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">goto</span>(href, &#123;<br>    <span class="hljs-attr">waitUntil</span>: <span class="hljs-string">&quot;domcontentloaded&quot;</span>,<br>    <span class="hljs-attr">referer</span>: href,<br>  &#125;);<br>  <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">waitForTimeout</span>(<span class="hljs-number">3000</span>); <span class="hljs-comment">// 确保页面加载完毕</span><br><br>  <span class="hljs-keyword">return</span> &#123;<br>    browser,<br>    page,<br>  &#125;;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  puppeteerInit,<br>  saveToHtml,<br>  saveToMd,<br>  saveToPdf,<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="5-本地测试"><a href="#5-本地测试" class="headerlink" title="5. 本地测试"></a>5. 本地测试</h3><ol><li>在项目根目录执行</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm <span class="hljs-built_in">link</span><br></code></pre></div></td></tr></table></figure><p>执行完之后，成功提示：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">added</span> <span class="hljs-number">1</span> package, and audited <span class="hljs-number">3</span> packages in <span class="hljs-number">1</span>s<br><br><span class="hljs-attribute">found</span> <span class="hljs-number">0</span> vulnerabilities<br></code></pre></div></td></tr></table></figure><p>也可以在本机的 npm 全局安装里找到一个软链接，如图：</p><p><img src="/assets/img/mycli/cli.jpg"></p><ol start="2"><li>在任意目录打开命令行，执行</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">juejin-save save  https://juejin.cn/post/xxxx<br></code></pre></div></td></tr></table></figure><p>不出意外，可以看到，多出了一个文件夹，文章被保存在文件夹里面了。</p><h3 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6. 参考资料"></a>6. 参考资料</h3><ol><li><p><a href="https://mp.weixin.qq.com/s/AH9fQdZnwMUcuczIVLOLVQ">手写一个合格的前端脚手架</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/1jzwybwyH80uDzfvvmDe_Q">实现 CLI 常用工具包 - 终端交互相关</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>cli</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cli</tag>
      
      <tag>puppeteer</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超详细手摸手带你docker-compose + portainer部署你的todolist小应用</title>
    <link href="/2022/01/29/docker-compose-portainer/"/>
    <url>/2022/01/29/docker-compose-portainer/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="http://121.199.8.71:8001/">项目线上预览</a></li><li><a href="https://github.com/sRect/docker-compose">github 源码仓库</a></li></ul><p>文章里很多都是配置，可以直接先直接复制过去使用，或者直接下载源代码运行，先跑通项目。</p><h3 id="1-主要-package-version-和提前准备"><a href="#1-主要-package-version-和提前准备" class="headerlink" title="1. 主要 package version 和提前准备"></a>1. 主要 package version 和提前准备</h3><ol><li>package version</li></ol><table><thead><tr><th align="center">package</th><th align="center">version</th></tr></thead><tbody><tr><td align="center">koa</td><td align="center">^2.13.4</td></tr><tr><td align="center">sequelize</td><td align="center">^6.14.1</td></tr><tr><td align="center">vite</td><td align="center">^2.7.13</td></tr><tr><td align="center">vue</td><td align="center">^3.2.25</td></tr><tr><td align="center">pinia</td><td align="center">^2.0.6</td></tr></tbody></table><ol start="2"><li>提前准备</li></ol><ul><li>1 台线上服务器，百度云、阿里云等等，并安装好 docker(教程自行搜索，很简单)。没有的用本地虚拟机代替，自行研究</li><li>注册一个 dockerhub 账户，有阿里云服务器的会自带容器镜像服务可以用，可以不用注册 dockerhub</li><li>注册一个 github 账户，并创建一个仓库。文章以 github 为例，gitee 的自行研究</li></ul><h3 id="2-项目目录解构"><a href="#2-项目目录解构" class="headerlink" title="2. 项目目录解构"></a>2. 项目目录解构</h3><blockquote><p>项目目录结构简单，前端应用放在<code>web</code>目录内，数据库放在<code>mysql</code>目录内，其它的是后台<code>koa</code>应用</p></blockquote><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">├── docker-compose.yml  <span class="hljs-meta"># docker-compose配置文件</span><br>├── Dockerfile <span class="hljs-meta"># 后台koa的容器镜像配置文件</span><br>├── <span class="hljs-built_in">log</span> <span class="hljs-meta"># 日志存储</span><br><span class="hljs-string">|  ├── access.log-2022-01-28.log</span><br><span class="hljs-string">|  ├── application.log-2022-01-28.log</span><br><span class="hljs-string">|  └── mysql.log-2022-01-28.log</span><br>├── middleware <span class="hljs-meta"># koa中间件</span><br><span class="hljs-string">|  ├── handleGlobalError.js</span><br><span class="hljs-string">|  ├── index.js</span><br><span class="hljs-string">|  └── logClientDevices.js</span><br>├── mysql <span class="hljs-meta"># mysql配置文件</span><br><span class="hljs-string">|  ├── create_db.sql # 创建数据库sql</span><br><span class="hljs-string">|  ├── Dockerfile # mysql的容器镜像配置文件</span><br><span class="hljs-string">|  ├── initial_data.sql # 初始化数据表sql</span><br><span class="hljs-string">|  ├── privileges.sql # 修改mysql账号权限密码</span><br><span class="hljs-string">|  └── setup.sh # 容器启动执行的shell</span><br>├── package-lock.json<br>├── package.json<br>├── public <span class="hljs-meta"># koa-static静态文件配置目录</span><br><span class="hljs-string">|  ├── favicon.ico</span><br><span class="hljs-string">|  └── index2.html</span><br>├── README.md<br>├── routes <span class="hljs-meta"># @koa/router的接口路由</span><br><span class="hljs-string">|  ├── todoList.js</span><br><span class="hljs-string">|  └── uuid.js</span><br>├── server.js <span class="hljs-meta"># koa的启动文件</span><br>├── util<br><span class="hljs-string">|  ├── db.js # mysql连接配置</span><br><span class="hljs-string">|  └── logger.js # koa-log4的日志配置</span><br>└── web <span class="hljs-meta"># vue前端应用</span><br>    ├── Dockerfile<br>    ├── index.html<br>    ├── nginx.conf<br>    ├── package.json<br>    ├── public<br>    ├── README.md<br>    ├── src<br>    <span class="hljs-string">|  ├── App.vue</span><br>    <span class="hljs-string">|  ├── assets</span><br>    <span class="hljs-string">|  ├── components</span><br>    <span class="hljs-string">|  ├── main.js</span><br>    <span class="hljs-string">|  ├── services # 接口</span><br>    <span class="hljs-string">|  └── store # Pinia状态管理</span><br>    ├── vite.config.js<br>    └── yarn.lock<br></code></pre></div></td></tr></table></figure><h3 id="3-前端部分"><a href="#3-前端部分" class="headerlink" title="3. 前端部分"></a>3. 前端部分</h3><blockquote><p>当然要用最近炒的火热的 Pinia 状态管理 + vue3 来写 todolist 应用了</p></blockquote><p><img src="/assets/img/portainer/todolist.jpg" alt="todolist.jpg"></p><h4 id="3-1-Pinia-状态管理快速上手，对着文档开撸"><a href="#3-1-Pinia-状态管理快速上手，对着文档开撸" class="headerlink" title="3.1 Pinia 状态管理快速上手，对着文档开撸"></a>3.1 <a href="https://pinia.esm.dev/introduction.html#a-more-realistic-example">Pinia 状态管理快速上手</a>，对着文档开撸</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// src/store/index.js</span><br><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> types <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./types&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useTodosStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&quot;todos&quot;</span>, &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">&#123; msg: string, id: string, is_finished: boolean, create_time: date </span>&#125;[]&#125; */</span><br>    <span class="hljs-attr">todos</span>: [],<br>    <span class="hljs-attr">filter</span>: types.<span class="hljs-property">ALL</span>,<br>    <span class="hljs-attr">nextId</span>: <span class="hljs-number">0</span>,<br>  &#125;),<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-title function_">finishedTodos</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">todo</span>) =&gt;</span> todo.<span class="hljs-property">is_finished</span>);<br>    &#125;,<br>    <span class="hljs-title function_">unfinishedTodos</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">todo</span>) =&gt;</span> !todo.<span class="hljs-property">is_finished</span>);<br>    &#125;,<br>    <span class="hljs-title function_">filterTodos</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">filter</span> === types.<span class="hljs-property">FINISHED</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">finishedTodos</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">filter</span> === types.<span class="hljs-property">UNFINISHED</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">unfinishedTodos</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-title function_">addTodos</span>(<span class="hljs-params">&#123; id, msg, create_time &#125;</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">unshift</span>(&#123; id, msg, create_time, <span class="hljs-attr">is_finished</span>: <span class="hljs-literal">false</span> &#125;);<br>    &#125;,<br>    <span class="hljs-title function_">finishedOneTodo</span>(<span class="hljs-params">obj</span>) &#123;<br>      <span class="hljs-keyword">const</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">id</span> === obj.<span class="hljs-property">id</span>);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>, &#123;<br>        ...obj,<br>        <span class="hljs-attr">is_finished</span>: <span class="hljs-literal">true</span>,<br>      &#125;);<br>    &#125;,<br>    <span class="hljs-title function_">deleteOne</span>(<span class="hljs-params">id</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">id</span> !== id);<br>    &#125;,<br>    <span class="hljs-title function_">setInitialData</span>(<span class="hljs-params">arr</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span> = [...arr];<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><h4 id="3-2-关于-vite-element-plus-启动报错-error-while-updating-dependencies"><a href="#3-2-关于-vite-element-plus-启动报错-error-while-updating-dependencies" class="headerlink" title="3.2 关于 vite+element-plus 启动报错 error while updating dependencies"></a>3.2 关于 vite+element-plus 启动报错 error while updating dependencies</h4><p>报错部分：</p><figure class="highlight moonscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs moonscript">上午<span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">22</span> [vite] new dependencies <span class="hljs-name">found</span>: element-plus/es, element-plus/es/components/option/style/css, updating...<br>上午<span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">22</span> [vite] Failed to <span class="hljs-built_in">load</span> source map <span class="hljs-keyword">for</span> /node_modules/.vite/chunk-TPOPRDHF.js?v=e12284c2.<br> &gt; <span class="hljs-name">error</span>: Failed to write to output <span class="hljs-name">file</span>: open <span class="hljs-name">D</span>:\my\resource\Vue.js\vue3+Pinia\node_modules\.vite\element-plus.<span class="hljs-name">js</span>: Access is denied.<br><br>上午<span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">37</span> [vite] <span class="hljs-built_in">error</span> <span class="hljs-keyword">while</span> updating <span class="hljs-name">dependencies</span>:<br><span class="hljs-name">Error</span>: Build failed with <span class="hljs-number">1</span> <span class="hljs-name">error</span>:<br><span class="hljs-name">error</span>: Failed to write to output <span class="hljs-name">file</span>: open <span class="hljs-name">D</span>:\my\resource\Vue.js\vue3+Pinia\node_modules\.vite\element-plus.<span class="hljs-name">js</span>: Access is denied.<br>    at failureErrorWithLog (<span class="hljs-name">D</span>:\my\resource\Vue.js\vue3+Pinia\node_modules\esbuild\lib\main.<span class="hljs-name">js</span>:<span class="hljs-number">1493</span>:<span class="hljs-number">15</span>)<br>    at <span class="hljs-name">D</span>:\my\resource\Vue.js\vue3+Pinia\node_modules\esbuild\lib\main.<span class="hljs-name">js</span>:<span class="hljs-number">1151</span>:<span class="hljs-number">28</span><br>    at runOnEndCallbacks (<span class="hljs-name">D</span>:\my\resource\Vue.js\vue3+Pinia\node_modules\esbuild\lib\main.<span class="hljs-name">js</span>:<span class="hljs-number">941</span>:<span class="hljs-number">63</span>)<br>    at buildResponseToResult (<span class="hljs-name">D</span>:\my\resource\Vue.js\vue3+Pinia\node_modules\esbuild\lib\main.<span class="hljs-name">js</span>:<span class="hljs-number">1149</span>:<span class="hljs-number">7</span>)<br>    at <span class="hljs-name">D</span>:\my\resource\Vue.js\vue3+Pinia\node_modules\esbuild\lib\main.<span class="hljs-name">js</span>:<span class="hljs-number">1258</span>:<span class="hljs-number">14</span><br>    at <span class="hljs-name">D</span>:\my\resource\Vue.js\vue3+Pinia\node_modules\esbuild\lib\main.<span class="hljs-name">js</span>:<span class="hljs-number">629</span>:<span class="hljs-number">9</span><br>    at handleIncomingPacket (<span class="hljs-name">D</span>:\my\resource\Vue.js\vue3+Pinia\node_modules\esbuild\lib\main.<span class="hljs-name">js</span>:<span class="hljs-number">726</span>:<span class="hljs-number">9</span>)<br>    at Socket.readFromStdout (<span class="hljs-name">D</span>:\my\resource\Vue.js\vue3+Pinia\node_modules\esbuild\lib\main.<span class="hljs-name">js</span>:<span class="hljs-number">596</span>:<span class="hljs-number">7</span>)<br>    at Socket.emit (events.<span class="hljs-name">js</span>:<span class="hljs-number">400</span>:<span class="hljs-number">28</span>)<br>    at addChunk (internal/streams/readable.<span class="hljs-name">js</span>:<span class="hljs-number">290</span>:<span class="hljs-number">12</span>)<br></code></pre></div></td></tr></table></figure><p>一番折腾（又是删除 node_modules 重新 install 安装，又是升级依赖到最新版本，又是检查文件夹路径有无中文…）过后，找到了<a href="https://github.com/nuxt/vite/issues/207#issuecomment-972655272">解决方法</a>：</p><p><img src="/assets/img/portainer/vite.png" alt="vite.png"></p><p>升级 Node.js 到最新版本（当前最新版本为 16.13.2），删掉 node_modules 文件夹，重新安装依赖，启动正常</p><p>如果你使用 nvm，可以这样快捷升级 nodejs</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nvm install 16.13.2<br>nvm use 16.13.2<br></code></pre></div></td></tr></table></figure><h4 id="3-3-nginx-conf"><a href="#3-3-nginx-conf" class="headerlink" title="3.3 nginx.conf"></a>3.3 nginx.conf</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs conf">server &#123;<br>    listen  80; #配置监听端口<br>    charset utf-8;<br><br>    #charset koi8-r;<br>    #access_log  /var/log/nginx/host.access.log  main;<br><br>    location ~ /api/ &#123; # 配置跨域转发<br>        # 注意这里的配置代理名称为docker-compose中koa容器的名称<br>        proxy_pass  http://koa_server:4000;<br>        # rewrite ^/api/(.*)$ /$1 break;<br>        proxy_set_header Host $host;<br>        proxy_set_header X-Real-IP $remote_addr;<br>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>        client_max_body_size 100m;<br>    &#125;<br><br>    location / &#123;<br>        root   /usr/share/nginx/dist; #服务默认启动目录<br>        index  index.html index.htm; #默认访问文件<br>        try_files $uri /index.html; # 防止浏览器刷新后，页面404<br>        client_max_body_size 100m;<br>    &#125;<br><br>    location =/admin &#123;<br>        deny all; #admin目录禁止任何人访问<br>    &#125;<br><br>    location ~\.java$ &#123;<br>        deny all; #匹配所有java文件禁止访问<br>    &#125;<br><br>    error_page   500 502 503 504  /50x.html; #错误状态的显示页面，配置后需重启<br>    error_page 404 /404.html; #404页面<br>    location = /50x.html &#123;<br>        root   /usr/share/nginx/html;<br>    &#125;<br><br>    gzip on; #开启gzip<br>    gzip_buffers 32 4k; #设置压缩所需要的缓冲区大小，以4k为单位，如果文件为32k则申请32*4k的缓冲区<br>    gzip_comp_level 6; #gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间<br>    gzip_min_length 4000; #gizp压缩起点，文件大于4k才进行压缩<br>    gzip_vary on; # 是否在http header中添加Vary: Accept-Encoding，建议开启<br>    gzip_static on; #nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩，如果找不到则不进行压缩<br>    gzip_types text/xml text/javascript application/javascript text/css text/plain application/json application/x-javascript; # 进行压缩的文件类型<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-4-Dockerfile"><a href="#3-4-Dockerfile" class="headerlink" title="3.4 Dockerfile"></a>3.4 Dockerfile</h4><blockquote><p>使用多阶段构建，减少容器体积</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> alpine:<span class="hljs-number">3.15</span> AS base<br><span class="hljs-keyword">ENV</span> NODE_ENV=production \<br>  APP_PATH=/app<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-variable">$APP_PATH</span></span><br><span class="hljs-comment"># 使用apk命令安装 nodejs 和 yarn</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apk add --no-cache --update nodejs=16.13.2-r0 yarn</span><br><br><span class="hljs-keyword">FROM</span> base AS install<br><span class="hljs-keyword">COPY</span><span class="language-bash"> package.json yarn.lock <span class="hljs-variable">$APP_PATH</span>/</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yarn install</span><br><br><span class="hljs-keyword">FROM</span> base AS build<br><span class="hljs-comment"># 拷贝上面生成的 node_modules 文件夹复制到最终的工作目录下</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=install <span class="hljs-variable">$APP_PATH</span>/node_modules <span class="hljs-variable">$APP_PATH</span>/node_modules</span><br><span class="hljs-comment"># 拷贝当前目录的文件到工作目录(除了.dockerignore中忽略的)</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . <span class="hljs-variable">$APP_PATH</span>/</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yarn run build</span><br><br><span class="hljs-keyword">FROM</span> nginx:alpine<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /usr/share/nginx/dist</span><br><span class="hljs-comment"># 添加自己的配置 default.conf 在下面</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> nginx.conf /etc/nginx/conf.d/default.conf</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=build /app/dist .</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br></code></pre></div></td></tr></table></figure><h3 id="4-后台部分"><a href="#4-后台部分" class="headerlink" title="4. 后台部分"></a>4. 后台部分</h3><h4 id="4-1-入口文件"><a href="#4-1-入口文件" class="headerlink" title="4.1 入口文件"></a>4.1 入口文件</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// server.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Koa</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;koa&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Router</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@koa/router&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ROOT</span> = path.<span class="hljs-title function_">resolve</span>(process.<span class="hljs-title function_">cwd</span>(), <span class="hljs-string">&quot;./&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; connectMySQL &#125; = <span class="hljs-built_in">require</span>(path.<span class="hljs-title function_">resolve</span>(<span class="hljs-variable constant_">ROOT</span>, <span class="hljs-string">&quot;./util/db&quot;</span>));<br><span class="hljs-keyword">const</span> todoList = <span class="hljs-built_in">require</span>(path.<span class="hljs-title function_">resolve</span>(<span class="hljs-variable constant_">ROOT</span>, <span class="hljs-string">&quot;./routes/todoList&quot;</span>));<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();<br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>();<br><br><span class="hljs-comment">// 加载所有子路由</span><br>router.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;/api&quot;</span>, todoList.<span class="hljs-title function_">routes</span>(), todoList.<span class="hljs-title function_">allowedMethods</span>());<br><span class="hljs-comment">// 加载路由中间件</span><br>app.<span class="hljs-title function_">use</span>(router.<span class="hljs-title function_">routes</span>()).<span class="hljs-title function_">use</span>(router.<span class="hljs-title function_">allowedMethods</span>());<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">4000</span>, <span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">connectMySQL</span>();<br>&#125;);<br></code></pre></div></td></tr></table></figure><h4 id="4-2-sequelize-连接-mysql-数据库"><a href="#4-2-sequelize-连接-mysql-数据库" class="headerlink" title="4.2 sequelize 连接 mysql 数据库"></a>4.2 <a href="https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/getting-started.md">sequelize 连接 mysql 数据库</a></h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// util/db.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Sequelize</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;sequelize&quot;</span>);<br><br><span class="hljs-keyword">const</span> db = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sequelize</span>(<span class="hljs-string">&quot;todolist&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>, &#123;<br>  <span class="hljs-attr">dialect</span>: <span class="hljs-string">&quot;mysql&quot;</span>,<br>  <span class="hljs-attr">dialectOptions</span>: &#123;<br>    <span class="hljs-attr">charset</span>: <span class="hljs-string">&quot;utf8mb4&quot;</span>,<br>    <span class="hljs-attr">collate</span>: <span class="hljs-string">&quot;utf8mb4_unicode_ci&quot;</span>,<br>    <span class="hljs-attr">supportBigNumbers</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">bigNumberStrings</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-comment">// 这里的host，线上指向docker-compose中mysql的容器名</span><br>  <span class="hljs-attr">host</span>:<br>    process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&quot;development&quot;</span><br>      ? <span class="hljs-string">&quot;localhost&quot;</span><br>      : <span class="hljs-string">&quot;todolist_mysql_server&quot;</span>,<br>  <span class="hljs-attr">timezone</span>: <span class="hljs-string">&quot;+08:00&quot;</span>, <span class="hljs-comment">// 东8区</span><br>  <span class="hljs-attr">port</span>: <span class="hljs-string">&quot;3306&quot;</span>,<br>&#125;);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">connectMySQL</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">await</span> db.<span class="hljs-title function_">authenticate</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;mysql连接成功&quot;</span>);<br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;连接失败，3秒后重试&quot;</span>);<br>    <span class="hljs-built_in">setTimeout</span>(connectMySQL, <span class="hljs-number">3000</span>);<br>  &#125;<br>&#125;;<br><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">connectMySQL</span> = connectMySQL;<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">db</span> = db;<br></code></pre></div></td></tr></table></figure><h4 id="4-3-接口示例"><a href="#4-3-接口示例" class="headerlink" title="4.3 接口示例"></a>4.3 接口示例</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// routes/todolist.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Router</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@koa/router&quot;</span>);<br><span class="hljs-keyword">const</span> dayjs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;dayjs&quot;</span>);<br><span class="hljs-keyword">const</span> utc = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;dayjs/plugin/utc&quot;</span>); <span class="hljs-comment">// dependent on utc plugin</span><br><span class="hljs-keyword">const</span> timezone = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;dayjs/plugin/timezone&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">QueryTypes</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;sequelize&quot;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ROOT</span> = path.<span class="hljs-title function_">resolve</span>(process.<span class="hljs-title function_">cwd</span>(), <span class="hljs-string">&quot;./&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; db &#125; = <span class="hljs-built_in">require</span>(path.<span class="hljs-title function_">resolve</span>(<span class="hljs-variable constant_">ROOT</span>, <span class="hljs-string">&quot;./util/db&quot;</span>));<br><br><span class="hljs-keyword">const</span> todoList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>();<br><span class="hljs-comment">// https://dayjs.gitee.io/docs/zh-CN/plugin/timezone</span><br>dayjs.<span class="hljs-title function_">extend</span>(utc);<br>dayjs.<span class="hljs-title function_">extend</span>(timezone);<br>dayjs.<span class="hljs-property">tz</span>.<span class="hljs-title function_">setDefault</span>(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>);<br><br><span class="hljs-comment">// 列表查询</span><br>todoList.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/todoList/list&quot;</span>, <span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> reqParams = ctx.<span class="hljs-property">query</span>;<br>  <span class="hljs-comment">// https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/getting-started.md#promises-%E5%92%8C-asyncawait</span><br><br>  <span class="hljs-keyword">const</span> selects = &#123;<br>    <span class="hljs-number">0</span>: <span class="hljs-string">&quot;SELECT * FROM todolist WHERE is_finished=&#x27;0&#x27; ORDER BY create_time DESC;&quot;</span>,<br>    <span class="hljs-number">1</span>: <span class="hljs-string">&quot;SELECT * FROM todolist WHERE is_finished=&#x27;1&#x27; ORDER BY create_time DESC;&quot;</span>,<br>    <span class="hljs-number">2</span>: <span class="hljs-string">&quot;SELECT * FROM todolist ORDER BY create_time DESC;&quot;</span>,<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> filterType = reqParams.<span class="hljs-property">filterType</span> || <span class="hljs-string">&quot;2&quot;</span>;<br><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">let</span> list = <span class="hljs-keyword">await</span> db.<span class="hljs-title function_">query</span>(selects[filterType], &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">QueryTypes</span>.<span class="hljs-property">SELECT</span>,<br>    &#125;);<br><br>    list = list.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> (&#123;<br>      ...item,<br>      <span class="hljs-attr">create_time</span>: <span class="hljs-title function_">dayjs</span>(item.<span class="hljs-property">create_time</span>)<br>        .<span class="hljs-title function_">tz</span>(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>)<br>        .<span class="hljs-title function_">format</span>(<span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>),<br>      <span class="hljs-attr">is_finished</span>: item.<span class="hljs-property">is_finished</span> === <span class="hljs-string">&quot;0&quot;</span> ? <span class="hljs-literal">false</span> : <span class="hljs-literal">true</span>,<br>    &#125;));<br><br>    ctx.<span class="hljs-property">body</span> = &#123;<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>      <span class="hljs-attr">data</span>: list || [],<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;ok&quot;</span>,<br>    &#125;;<br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>  &#125;<br><br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = todoList;<br></code></pre></div></td></tr></table></figure><h4 id="4-4-Dockerfile"><a href="#4-4-Dockerfile" class="headerlink" title="4.4 Dockerfile"></a>4.4 Dockerfile</h4><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> alpine:<span class="hljs-number">3.15</span> AS base<br><br><span class="hljs-keyword">ENV</span> NODE_ENV=production \<br>  APP_PATH=/www/node-server<br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-variable">$APP_PATH</span></span><br><br><span class="hljs-comment"># 使用apk命令安装 nodejs</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apk add --no-cache --update nodejs=16.13.2-r0 npm</span><br><br><span class="hljs-comment"># 基于基础镜像安装项目依赖</span><br><span class="hljs-keyword">FROM</span> base AS install<br><br><span class="hljs-comment"># 将当前目录的package.json 拷贝到工作目录下</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> package.json package-lock.json <span class="hljs-variable">$APP_PATH</span>/</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install</span><br><br><span class="hljs-comment"># 基于基础镜像进行最终构建</span><br><span class="hljs-keyword">FROM</span> base<br><br><span class="hljs-comment"># 拷贝 上面生成的 node_modules 文件夹复制到最终的工作目录下</span><br><span class="hljs-comment"># COPY命令复制文件夹的时候，不是直接复制该文件夹，而是将文件夹中的内容复制到目标路径</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=install <span class="hljs-variable">$APP_PATH</span>/node_modules <span class="hljs-variable">$APP_PATH</span>/node_modules</span><br><span class="hljs-comment"># 拷贝当前目录的文件到工作目录(除了.dockerignore中忽略的)</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . <span class="hljs-variable">$APP_PATH</span>/</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">4000</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;npm&quot;</span>, <span class="hljs-string">&quot;run&quot;</span>, <span class="hljs-string">&quot;server&quot;</span>]</span><br></code></pre></div></td></tr></table></figure><h4 id="4-5-注意事项"><a href="#4-5-注意事项" class="headerlink" title="4.5 注意事项"></a>4.5 注意事项</h4><ul><li>数据库连接配置时区<code>timezone</code>，设置为东 8 区</li><li>设置数据库字符集为<code>utf8mb4</code>，方便后面存储表情符</li><li><code>dayjs</code>库调整显示为东 8 区时间</li><li><code>sequelize</code>查询出来有重复项(非数据库里的数据重复)，需要配置<code>type</code>为<code>QueryTypes.SELECT</code></li></ul><h3 id="5-MySQL-部分"><a href="#5-MySQL-部分" class="headerlink" title="5. MySQL 部分"></a>5. MySQL 部分</h3><blockquote><p>这里选择的版本为<strong>5.7.30</strong>版本，线上 8.0 版本未部署成功</p></blockquote><h4 id="5-1-mysql-x2F-Dockerfile"><a href="#5-1-mysql-x2F-Dockerfile" class="headerlink" title="5.1 mysql&#x2F;Dockerfile"></a>5.1 mysql&#x2F;Dockerfile</h4><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> mysql:<span class="hljs-number">5.7</span>.<span class="hljs-number">30</span><br><br><span class="hljs-keyword">LABEL</span><span class="language-bash"> version=<span class="hljs-string">&quot;1.0.0&quot;</span> description=<span class="hljs-string">&quot;todolist MySQL 服务器&quot;</span></span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /mysql</span><br><br><span class="hljs-keyword">ENV</span> MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span><br><span class="hljs-comment"># MYSQL_DATABASE=todolist</span><br><span class="hljs-comment"># MYSQL_ALLOW_EMPTY_PASSWORD=yes</span><br><br><span class="hljs-comment"># 启动脚本</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> setup.sh /mysql/setup.sh</span><br><span class="hljs-comment"># 创建数据库</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> create_db.sql /mysql/create_db.sql</span><br><span class="hljs-comment"># 初始化数据</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> initial_data.sql /mysql/initial_data.sql</span><br><span class="hljs-comment"># 设置密码和权限</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> privileges.sql /mysql/privileges.sql</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">3306</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;/mysql/setup.sh&quot;</span>]</span><br></code></pre></div></td></tr></table></figure><h4 id="5-2-mysql-setup-sh容器启动脚本"><a href="#5-2-mysql-setup-sh容器启动脚本" class="headerlink" title="5.2 mysql/setup.sh容器启动脚本"></a>5.2 <code>mysql/setup.sh</code>容器启动脚本</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">set</span> -e<br><span class="hljs-comment"># https://xie.infoq.cn/article/a3c8ffbd34d818de010f2b0f6</span><br><span class="hljs-comment"># 打印mysql服务的状态</span><br><span class="hljs-built_in">echo</span> $(service mysql status)<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;1.启动mysql...&#x27;</span><br><span class="hljs-comment">#启动mysql</span><br><span class="hljs-comment"># service mysql stop</span><br><span class="hljs-comment"># service mysql restart</span><br>service mysql start<br><br><span class="hljs-comment"># sleep 3</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;2.创建数据库...&#x27;</span><br>mysql &lt;/mysql/create_db.sql<br><span class="hljs-built_in">sleep</span> 3<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;3.开始导入数据...&#x27;</span><br>mysql &lt;/mysql/initial_data.sql<br><br><span class="hljs-built_in">sleep</span> 3<br><span class="hljs-built_in">echo</span> $(service mysql status)<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;4.修改mysql权限...&#x27;</span><br>mysql &lt;/mysql/privileges.sql<br><span class="hljs-built_in">sleep</span> 3<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;4.权限修改完毕...&#x27;</span><br><br><span class="hljs-comment"># 防止container启动后退出</span><br><span class="hljs-comment"># http://www.mayanpeng.cn/archives/121.html</span><br><span class="hljs-built_in">tail</span> -f /dev/null<br></code></pre></div></td></tr></table></figure><h4 id="5-3-mysql-create-db-sql创建数据库"><a href="#5-3-mysql-create-db-sql创建数据库" class="headerlink" title="5.3 mysql/create_db.sql创建数据库"></a>5.3 <code>mysql/create_db.sql</code>创建数据库</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> todolist;<br></code></pre></div></td></tr></table></figure><h4 id="5-4-mysql-initial-data-sql初始化表"><a href="#5-4-mysql-initial-data-sql初始化表" class="headerlink" title="5.4 mysql/initial_data.sql初始化表"></a>5.4 <code>mysql/initial_data.sql</code>初始化表</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 使用todolist库</span><br>USE todolist;<br><br><span class="hljs-comment">-- 创建todolist表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> todolist(id <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">PRIMARY</span> KEY, create_time DATETIME <span class="hljs-keyword">UNIQUE</span>, is_finished ENUM(<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>, msg <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;--&#x27;</span>) COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;todolist表&#x27;</span> ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- 打印数据库</span><br><span class="hljs-keyword">SHOW</span> TABLES;<br><br><span class="hljs-comment">-- 打印表结构</span><br><span class="hljs-keyword">DESC</span> todolist;<br><br><span class="hljs-comment">-- 插入1条默认数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> todolist(id, create_time, is_finished, msg) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>, NOW(), <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;hello world&#x27;</span>);<br></code></pre></div></td></tr></table></figure><h4 id="5-5-mysql-privileges-sql设置权限密码"><a href="#5-5-mysql-privileges-sql设置权限密码" class="headerlink" title="5.5 mysql/privileges.sql设置权限密码"></a>5.5 <code>mysql/privileges.sql</code>设置权限密码</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">use mysql;<br><span class="hljs-keyword">SELECT</span> host, <span class="hljs-keyword">user</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span>;<br><br><span class="hljs-comment">-- 将数据库的权限授权给root用户，密码为123456</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><br><span class="hljs-comment">-- 刷新权限这一条命令一定要有：</span><br>flush privileges;<br></code></pre></div></td></tr></table></figure><h3 id="6-部署准备"><a href="#6-部署准备" class="headerlink" title="6 部署准备"></a>6 部署准备</h3><h4 id="6-1-提前准备好"><a href="#6-1-提前准备好" class="headerlink" title="6.1 提前准备好"></a>6.1 提前准备好</h4><ol><li><p>在<code>dockerhub</code>账号或者<code>阿里云镜像容器服务</code>创建 3 个仓库，分别放 mysql、koa、vue 应用，我这里创建的是<code>todolist_mysql</code>、<code>koa</code>和<code>vite_vue3_pinia</code>，在下面的 docker-compose.yml 配置文件中一一对应<br><img src="/assets/img/portainer/dockerhub.jpg" alt="dockerhub.jpg"></p></li><li><p>在你的<code>github</code>仓库里里配置好上面 dockerhub 的账号和密码<code>secrets</code>，方便于后面使用 github 仓库的 actions 推送。我这里创建的是<code>DOCKERHUB_TOKEN</code>放密码，<code>DOCKERHUB_USERNAME</code>放账户<br><img src="/assets/img/portainer/github.png" alt="github.png"></p></li></ol><h4 id="6-2-docker-compose-yml"><a href="#6-2-docker-compose-yml" class="headerlink" title="6.2 docker-compose.yml"></a>6.2 <code>docker-compose.yml</code></h4><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mysql:</span> <span class="hljs-comment"># mysql</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./mysql</span><br>    <span class="hljs-comment"># image名称为在dockerhub里创建好的名称</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">你的docker账户名/todolist_mysql:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">todolist_mysql_server</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-comment"># MYSQL_ROOT_PASSWORD: &quot;123456&quot;</span><br><br>  <span class="hljs-attr">node:</span> <span class="hljs-comment"># nodejs服务</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;mysql&quot;</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span> <span class="hljs-comment"># Dockerfile所在目录构建</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">你的docker账户名/koa:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">koa_server</span><br>    <span class="hljs-comment"># ports:</span><br>    <span class="hljs-comment">#   - &quot;8001:4000&quot;</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span> <span class="hljs-comment"># 自动重启</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">NODE_ENV=production</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">server</span> <span class="hljs-comment"># 覆盖容器启动后默认执行的命令</span><br><br>  <span class="hljs-attr">vue:</span><br>    <span class="hljs-attr">depends_on:</span> <span class="hljs-comment"># vue 容器会保证在 node容器之后启动</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;node&quot;</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./web</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">你的docker账户名/vite_vue3_pinia:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">vite_vue3_pinia</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">NODE_ENV=production</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8001:80&quot;</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">default:</span><br>    <span class="hljs-attr">external:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">vue3-koa</span><br></code></pre></div></td></tr></table></figure><h4 id="6-3-github-ci-配置文件"><a href="#6-3-github-ci-配置文件" class="headerlink" title="6.3 github ci 配置文件"></a>6.3 github ci 配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># .github/workflows/ci.yml</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">MySQL</span> <span class="hljs-string">+</span> <span class="hljs-string">Koa2</span> <span class="hljs-string">Server</span> <span class="hljs-string">+</span> <span class="hljs-string">Vue3</span> <span class="hljs-string">todolist</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [<span class="hljs-string">main</span>] <span class="hljs-comment"># 监听main分支</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br><br>      <span class="hljs-comment"># 制作docker镜像并推送到dockerhub</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">build</span> <span class="hljs-string">and</span> <span class="hljs-string">push</span> <span class="hljs-string">docker</span> <span class="hljs-string">image</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          # 这里用到上面创建的secrets变量</span><br><span class="hljs-string">          # 登录你的docker账号</span><br><span class="hljs-string">          docker login -u $&#123;&#123; secrets.DOCKERHUB_USERNAME &#125;&#125; -p $&#123;&#123; secrets.DOCKERHUB_TOKEN &#125;&#125;</span><br><span class="hljs-string">          # 进行docker镜像制作</span><br><span class="hljs-string">          docker-compose build</span><br><span class="hljs-string">          # 推送到你的docker账户里</span><br><span class="hljs-string">          docker-compose push</span><br><span class="hljs-string">          # 退出登录</span><br><span class="hljs-string">          docker logout</span><br></code></pre></div></td></tr></table></figure><h4 id="6-4-提交代码"><a href="#6-4-提交代码" class="headerlink" title="6.4 提交代码"></a>6.4 提交代码</h4><blockquote><p>等不及了，是时候进行提交代码了</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git add .<br><br>git commit -m <span class="hljs-string">&quot;feat: init&quot;</span><br><br>git push -u origin main<br></code></pre></div></td></tr></table></figure><p>不出意外，在仓库的<code>Actions</code>里看到构建成功。</p><p><img src="/assets/img/portainer/ci.png" alt="ci.png"></p><h3 id="7-Portainer出场"><a href="#7-Portainer出场" class="headerlink" title="7. Portainer出场"></a>7. <code>Portainer</code>出场</h3><blockquote><p>费了这么大劲，todolist 还没看到，是我的错，最后一步了，别放弃。</p></blockquote><h4 id="7-1-Portainer-的好处"><a href="#7-1-Portainer-的好处" class="headerlink" title="7.1 Portainer 的好处"></a>7.1 Portainer 的好处</h4><p>这就如同 git，使用 git GUI 工具和 git bash 命令行其他一样，方便容器管理操作。如果你喜欢命令行，就直接跳过这一节，直接部署容器吧。</p><p>把 git 仓库代码下载到服务器，<code>docker compose up</code>即可解决战斗！</p><h4 id="7-2-登录你的服务器安装portainer，我这里之前安装的-1-24-2-版本"><a href="#7-2-登录你的服务器安装portainer，我这里之前安装的-1-24-2-版本" class="headerlink" title="7.2 登录你的服务器安装portainer，我这里之前安装的 1.24.2 版本"></a>7.2 登录你的服务器安装<a href="https://hub.docker.com/r/portainer/portainer">portainer</a>，我这里之前安装的 1.24.2 版本</h4><blockquote><p>前提是在你的服务器上安装好 docker</p></blockquote><ol><li>下载</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker pull portainer/portainer:latest<br></code></pre></div></td></tr></table></figure><ol start="2"><li>运行</li></ol><blockquote><p>注意： 这里你的服务器的安全组要开放 9000 端口</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">docker run -d -p <span class="hljs-number">9000</span>:<span class="hljs-number">9000</span> -v <span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/docker.sock:/</span>var<span class="hljs-regexp">/run/</span>docker.sock --restart=always --name prtainer portainer/portainer<br></code></pre></div></td></tr></table></figure><h4 id="7-3-portainer-实操"><a href="#7-3-portainer-实操" class="headerlink" title="7.3 portainer 实操"></a>7.3 portainer 实操</h4><p>浏览器里打开<code>http://你的服务器公网ip:9000</code>,设置好账户和密码，进行登录，并且设置本地节点</p><p><img src="/assets/img/portainer/portainer.jpg" alt="portainer.png"></p><h4 id="7-3-1-拉取刚才推到-dockerhub-的镜像"><a href="#7-3-1-拉取刚才推到-dockerhub-的镜像" class="headerlink" title="7.3.1 拉取刚才推到 dockerhub 的镜像"></a>7.3.1 拉取刚才推到 dockerhub 的镜像</h4><blockquote><p>刚才那 3 个镜像都要拉取</p></blockquote><p><img src="/assets/img/portainer/portainer2.png" alt="portainer2.png"></p><p>如果是推到阿里云镜像容器的，点击左侧菜单 Registry，然后进去点击 Add registry 添加你的镜像容器 url，同时可以配置<code>Authentication</code>,你的账号和密码，然后就可以和上面一样 pull 镜像了</p><p><img src="/assets/img/portainer/portainer3.jpg" alt="portainer3.png"></p><h4 id="7-3-2-设置容器-NetWork，进行容器通信"><a href="#7-3-2-设置容器-NetWork，进行容器通信" class="headerlink" title="7.3.2 设置容器 NetWork，进行容器通信"></a>7.3.2 设置容器 NetWork，进行容器通信</h4><blockquote><p>我受不了，到底还有多少步，你骗我。真的马上结束了</p></blockquote><p>实质是使用了 <code>docker network</code>，然后再把自己的容器添加到这个 network 中来</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker network create 自定义bridge名称<br>docker network connect 自定义bridge名称 容器名称<br></code></pre></div></td></tr></table></figure><p>这里我们用图形化界面操作</p><p><img src="/assets/img/portainer/portainer5.jpg" alt="portainer5.png"></p><h4 id="7-3-3-部署容器"><a href="#7-3-3-部署容器" class="headerlink" title="7.3.3 部署容器"></a>7.3.3 部署容器</h4><blockquote><p>我真的受不了了，还没结束啊，这次真的结束了</p></blockquote><p>点击 container 添加容器。这里必须和 docker-compose 中的顺序一样，先部署 MySQL，再部署 Koa，最后部署 vue 应用</p><p><img src="/assets/img/portainer/portainer4.jpg" alt="portainer4.png"></p><p>进行部署配置，按顺序部署完 3 个容器，容器名称和端口必须都得和配置文件中的一样</p><p><img src="/assets/img/portainer/portainer6.jpg" alt="portainer6.png"></p><h4 id="7-3-4-阿弥陀佛"><a href="#7-3-4-阿弥陀佛" class="headerlink" title="7.3.4 阿弥陀佛"></a>7.3.4 阿弥陀佛</h4><blockquote><p>xdm，真的结束了，是我折磨你了。一切顺利的话，3 个容器都部署成功</p></blockquote><p>打开浏览器访问你的 todolist, <code>http://你的ip:8001</code></p><h4 id="7-3-5-关于保存-emoji-失败"><a href="#7-3-5-关于保存-emoji-失败" class="headerlink" title="7.3.5 关于保存 emoji 失败"></a>7.3.5 关于保存 emoji 失败</h4><blockquote><p>因为前面创建表的时候，msg 列没有使用<code>utf8mb4</code>字符集。那为什么不在建表的时候就设置好，我错了，xdm，揍我吧</p></blockquote><blockquote><p>觉得复杂难受的，直接跳过</p></blockquote><p><strong>docker 进入容器实战</strong></p><p>前提是登录你的服务器</p><ol><li>查看运行的容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker container ls<br></code></pre></div></td></tr></table></figure><ol start="2"><li>进入容器</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it 上面mysql容器的CONTAINER ID sh<br></code></pre></div></td></tr></table></figure><ol start="3"><li>连接 mysql</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mysql -h localhost -u root -p<br><span class="hljs-meta"># </span><span class="language-bash">然后输入设置的密码</span><br></code></pre></div></td></tr></table></figure><p>不出意外，我们成功进入容器内，并连接上了 mysql</p><figure class="highlight smali"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smali">[root@iZbp19ftqv2b85av0b2d4qZ /]<span class="hljs-comment"># docker exec -it a206f021c205 sh</span><br><span class="hljs-comment"># mysql -h localhost -u root -p</span><br>Enter password:<br>Welcome to the MySQ<span class="hljs-class">L monitor.  Commands end with ;</span><span class="hljs-built_in"> or </span>\g.<br>Your MySQL connection id is 53<br>Server version: 5.7.30 MySQL Community Server (GPL)<br><br>Copyright (c) 2000, 2020, Oracle<span class="hljs-built_in"> and/or </span>its affiliates. All rights reserved.<br><br>Oracle is a registered trademark of Oracle Corporation<span class="hljs-built_in"> and/or </span>its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type &#x27;help;&#x27;<span class="hljs-built_in"> or </span>&#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.<br><br>mysql&gt;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>修改 todolist 表的 msg 列属性</li></ol><ul><li>使用 todolist 库</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">USE todolist;<br></code></pre></div></td></tr></table></figure><ul><li>进行修改</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> todolist MODIFY msg <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8mb4 <span class="hljs-keyword">collate</span> utf8mb4_unicode_ci <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;--&#x27;</span>;<br>Query OK, <span class="hljs-number">6</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.04</span> sec)<br>Records: <span class="hljs-number">6</span>  Duplicates: <span class="hljs-number">0</span>  Warnings: <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><ul><li>验证是否修改成功</li></ul><blockquote><p>可以看到，msg 列已经修改成功了</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> todolist\G<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>       <span class="hljs-keyword">Table</span>: todolist<br><span class="hljs-keyword">Create</span> <span class="hljs-keyword">Table</span>: <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `todolist` (<br>  `id` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `create_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `is_finished` enum(<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>  `msg` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;--&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `create_time` (`create_time`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;todolist表&#x27;</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></div></td></tr></table></figure><ul><li>浏览器里输入 emoji 表情符添加测试，不出意外，已经 ok。结束了！！！</li></ul><h3 id="8-参考资料"><a href="#8-参考资料" class="headerlink" title="8. 参考资料"></a>8. 参考资料</h3><ol><li><p><a href="https://segmentfault.com/a/1190000039803577">使用 Portainer 部署 Docker 容器实践</a></p></li><li><p><a href="https://xie.infoq.cn/article/a3c8ffbd34d818de010f2b0f6">MySql 的 Dockerfile 编写</a></p></li><li><p><a href="https://pinia.esm.dev/introduction.html#a-more-realistic-example">Pinia 文档</a></p></li><li><p><a href="https://github.com/demopark/sequelize-docs-Zh-CN">sequelize 中文文档</a></p></li><li><p><a href="https://dayjs.gitee.io/zh-CN/">dayjs</a></p></li><li><p><a href="https://juejin.cn/post/7045999468843368462">【实战】Node 服务中如何写日志？</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>github actions</tag>
      
      <tag>CI</tag>
      
      <tag>CD</tag>
      
      <tag>Portainer</tag>
      
      <tag>docker-compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Next.js + Docker 打造一个属于你的私人博客</title>
    <link href="/2022/01/08/nextjs-blog/"/>
    <url>/2022/01/08/nextjs-blog/</url>
    
    <content type="html"><![CDATA[<h3 id="1-Next-js-简介"><a href="#1-Next-js-简介" class="headerlink" title="1. Next.js 简介"></a>1. Next.js 简介</h3><blockquote><p>[The React Framework for Production] Next.js gives you the best developer experience with all the features you need for production: hybrid static &amp; server rendering, TypeScript support, smart bundling, route pre-fetching, and more. No config needed.</p></blockquote><p>一顿牛皮下来，就是 Next.js 在生产和开发环境下都能带给你最佳体验，开箱体验，无需任何配置</p><h3 id="2-为什么选择-Next-js"><a href="#2-为什么选择-Next-js" class="headerlink" title="2. 为什么选择 Next.js"></a>2. 为什么选择 Next.js</h3><blockquote><p>老表，咋回事哦，vue 不能满足了吗，搞这玩意干嘛，<a href="https://www.vuepress.cn/">vuepress</a> 写所谓的静态博客网站不香？香，还比这简单，但请容许我介绍完这个 Next.js</p></blockquote><p><img src="/assets/img/nextjs-blog/gs.jpg"></p><h4 id="2-1-那-Next-js-有哪些优点呢？"><a href="#2-1-那-Next-js-有哪些优点呢？" class="headerlink" title="2.1 那 Next.js 有哪些优点呢？"></a>2.1 那 Next.js 有哪些优点呢？</h4><ul><li>图片优化</li><li>支持国际化</li><li>零配置</li><li>支持 SSG + SSR</li><li>文件系统路由</li><li>优点太多…</li></ul><p><img src="/assets/img/nextjs-blog/yd.jpg"></p><h4 id="2-2-那-Next-js-比这-vue-和-react-造出来的单页面有何不同？"><a href="#2-2-那-Next-js-比这-vue-和-react-造出来的单页面有何不同？" class="headerlink" title="2.2 那 Next.js 比这 vue 和 react 造出来的单页面有何不同？"></a>2.2 那 Next.js 比这 vue 和 react 造出来的单页面有何不同？</h4><ol><li>vue 和 react 造出来的单页面应用 SEO 不友好，搜索引擎抓不到 html 的内容，内容都在 js 里</li><li>vue 和 react 造出来的单页面首屏白屏时间过长，在不对项目 webpack 专门优化的情况下，那个 bundle.js 很大，严重影响体验</li></ol><p><strong>总结</strong>：如果项目对 SEO 要求比较高，建议上 Next 或<a href="https://www.nuxtjs.cn/">Nuxt</a></p><h4 id="2-3-Next-js-和传统的-php、jsp-有何区别？"><a href="#2-3-Next-js-和传统的-php、jsp-有何区别？" class="headerlink" title="2.3 Next.js 和传统的 php、jsp 有何区别？"></a>2.3 Next.js 和传统的 php、jsp 有何区别？</h4><blockquote><p>简单了解</p></blockquote><ol><li>客户端渲染</li></ol><p>前后端分离，通过 ajax 进行数据交互，vue 和 react 就是这种模式</p><ol start="2"><li>服务端模板渲染</li></ol><p>php 和 jsp 是解析模板文件，将数据渲染到文件上，最后将模板文件变为 html，生成 html 返回给浏览器，前后端不用同一套代码</p><ol start="3"><li>前后端同构渲染</li></ol><p>也是服务端生成 html 返回给浏览器，区别在于前后端会共用一部分组件代码逻辑，这部分代码既可以用于服务端，也可以用于客户端，而模板渲染是两套代码</p><h3 id="3-Next-js-主要-api-快速上手"><a href="#3-Next-js-主要-api-快速上手" class="headerlink" title="3. Next.js 主要 api 快速上手"></a>3. Next.js 主要 api 快速上手</h3><blockquote><p><strong>注意</strong>：Node.js 版本 12.22.0 起步</p></blockquote><h4 id="3-1-使用create-next-app脚手架创建项目"><a href="#3-1-使用create-next-app脚手架创建项目" class="headerlink" title="3.1 使用create-next-app脚手架创建项目"></a>3.1 使用<code>create-next-app</code>脚手架创建项目</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npx create-next-app@latest<br><span class="hljs-comment"># or</span><br>yarn create next-app<br></code></pre></div></td></tr></table></figure><h4 id="3-2-项目目录结构"><a href="#3-2-项目目录结构" class="headerlink" title="3.2 项目目录结构"></a>3.2 项目目录结构</h4><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">│  .eslintrc.<span class="hljs-keyword">json</span><br><span class="hljs-keyword"></span>│  .gitignore<br>│  next.config.<span class="hljs-keyword">js </span>    <span class="hljs-comment"># next配置文件</span><br>│  package.<span class="hljs-keyword">json</span><br><span class="hljs-keyword"></span>│  README.md<br>│  yarn.lock<br>│<br>├─pages               <span class="hljs-comment"># 页面路由</span><br>│  │  index.<span class="hljs-keyword">js</span><br><span class="hljs-keyword"></span>│  │  _app.<span class="hljs-keyword">js</span><br><span class="hljs-keyword"></span>│  │<br>│  └─api              <span class="hljs-comment"># api服务</span><br>│          hello.<span class="hljs-keyword">js</span><br><span class="hljs-keyword"></span>│<br>├─public              <span class="hljs-comment"># 静态资源</span><br>│      favicon.ico<br>│      vercel.svg<br>│<br>└─styles              <span class="hljs-comment"># css样式</span><br>        globals.css   <span class="hljs-comment"># 全局样式</span><br>        Home.module.css<br></code></pre></div></td></tr></table></figure><h4 id="3-3-路由"><a href="#3-3-路由" class="headerlink" title="3.3 路由"></a>3.3 路由</h4><ol><li>文件系统路由</li></ol><ul><li><code>/pages/index.js</code> 路径为 <code>/</code></li><li><code>/pages/posts/about.js</code> 路径为 <code>/posts/about</code></li><li><code>/pages/posts/[id].js</code> 动态路径为 <code>/posts/foo</code> 或者<code>/posts/bar</code> 等等</li></ul><ol start="2"><li>Link 组件</li></ol><blockquote><p>Link 组件会自动执行 prefetch 预加载</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Link</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;next/link&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Home</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/posts/about&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>about page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">// 或者不用a标签，传参示例</span><br>&lt;<span class="hljs-title class_">Link</span><br>  href=&#123;&#123;<br>    <span class="hljs-attr">pathname</span>: <span class="hljs-string">&quot;/about&quot;</span>,<br>    <span class="hljs-attr">query</span>: &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;test&quot;</span> &#125;,<br>  &#125;&#125;<br>  passHref<br>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>about page<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Link</span>&gt;;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>useRouter</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;next/router&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useCallback, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">List</span>() &#123;<br>  <span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>();<br><br>  <span class="hljs-keyword">const</span> gotoDetail = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">fileName</span>: detailid &#125; = data;<br><br>    <span class="hljs-comment">// https://www.nextjs.cn/docs/api-reference/next/router#with-url-object</span><br>    router.<span class="hljs-title function_">push</span>(&#123;<br>      <span class="hljs-attr">pathname</span>: <span class="hljs-string">&quot;/posts/[detailid]&quot;</span>,<br>      <span class="hljs-attr">query</span>: &#123;<br>        detailid,<br>      &#125;,<br>    &#125;);<br>  &#125;, []);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// Prefetch the dashboard page</span><br>    router.<span class="hljs-title function_">prefetch</span>(<span class="hljs-string">&#x27;/dashboard&#x27;</span>);<br>  &#125;, []);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      ...</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>动态路由</li></ol><p>就是<code>/pages/posts/[id].js</code>这样的路由</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; getAllPostIds, getPostData &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/lib/posts&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getStaticPaths</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> allListData = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getAllPostIds</span>();<br>  <span class="hljs-keyword">const</span> paths = allListData.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">params</span>: &#123; <span class="hljs-attr">id</span>: item.<span class="hljs-property">fileName</span> &#125;,<br>    &#125;;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    paths,<br>    <span class="hljs-attr">fallback</span>: <span class="hljs-literal">false</span>,<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getStaticProps</span>(<span class="hljs-params">&#123; params &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> postData = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getPostData</span>(params.<span class="hljs-property">id</span>);<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">props</span>: &#123;<br>      postData,<br>    &#125;,<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params">&#123; postData &#125;</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-4-Head-组件"><a href="#3-4-Head-组件" class="headerlink" title="3.4 Head 组件"></a>3.4 Head 组件</h4><blockquote><p>用于自定义 head 标签内容</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Head</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;next/head&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Layout</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Head</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charSet</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;Next.js&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;Next.js&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Next.js<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Head</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-5-Image-组件"><a href="#3-5-Image-组件" class="headerlink" title="3.5 Image 组件"></a>3.5 Image 组件</h4><blockquote><p>使用适当的属性，可以大幅优化图像，提升页面渲染</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Image</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;next/image&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyImg</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Image</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.homeBgImg&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;bgImg&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;fill&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">objectFit</span>=<span class="hljs-string">&quot;cover&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">objectPosition</span>=<span class="hljs-string">&quot;center&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">quality</span>=<span class="hljs-string">&#123;65&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">priority</span>=<span class="hljs-string">&#123;true&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;blur&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">blurDataURL</span>=<span class="hljs-string">&#123;DEFAULT_BASE64&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;img&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-6-Script-组件"><a href="#3-6-Script-组件" class="headerlink" title="3.6 Script 组件"></a>3.6 Script 组件</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Script</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;next/script&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Home</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Script</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://Jquery.js&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onLoad</span>=<span class="hljs-string">&#123;()</span> =&gt;</span><span class="language-javascript"> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          $.<span class="hljs-title function_">ajax</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// ...</span></span></span><br><span class="language-javascript"><span class="language-xml">          &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;&#125;</span></span><br><span class="language-javascript"><span class="language-xml">      /&gt;</span></span><br><span class="language-javascript"><span class="language-xml">    &lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-7-CSS"><a href="#3-7-CSS" class="headerlink" title="3.7 CSS"></a>3.7 CSS</h4><ol><li>CSS Modules（已内置）</li><li>Sass（已内置）</li><li>styled-jsx（已内置）</li><li><a href="https://github.com/vercel/next.js/tree/canary/examples/with-styled-components">styled-components</a>（需自行配置）</li><li><a href="https://tailwindcss.com/docs/installation/using-postcss">Tailwind CSS</a>（需自行配置）</li></ol><h4 id="3-8-Next-js-的-3-种基本渲染方式"><a href="#3-8-Next-js-的-3-种基本渲染方式" class="headerlink" title="3.8 Next.js 的 3 种基本渲染方式"></a>3.8 Next.js 的 3 种基本渲染方式</h4><ol><li>Client-side Rendering</li></ol><blockquote><p>就是常见的前后端分离</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> useSWR <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;swr&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">fetcher</span> = (<span class="hljs-params">url</span>) =&gt; <span class="hljs-title function_">fetch</span>(url).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> res.<span class="hljs-title function_">json</span>());<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-title function_">useSWR</span>(<span class="hljs-string">&quot;/api/user&quot;</span>, fetcher);<br><br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>failed to load<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  <span class="hljs-keyword">if</span> (!data) <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>loading...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hello &#123;data.name&#125;!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="2"><li>Static Generation (Recommended)</li></ol><blockquote><p>一般以展示一些静态固定数据为主，打包的时候就直接生成，比如博客页面、固定营销页面、帮助文档等</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; getAllPostIds &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/lib/posts&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getStaticProps</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> allListData = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getAllPostIds</span>();<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">props</span>: &#123;<br>      allListData,<br>    &#125;,<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params">&#123; allListData &#125;</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>Server-side Rendering<blockquote><p>以动态数据为主，每次请求的时候都在服务端执行，对服务器压力比较大</p></blockquote></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getServerSideProps</span>(<span class="hljs-params">context</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">props</span>: &#123;<br>      <span class="hljs-attr">list</span>: [...]<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params">&#123; list &#125;</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-部署"><a href="#4-部署" class="headerlink" title="4. 部署"></a>4. 部署</h3><h4 id="4-1-使用-Vercel-快速部署"><a href="#4-1-使用-Vercel-快速部署" class="headerlink" title="4.1 使用 Vercel 快速部署"></a>4.1 使用 Vercel 快速部署</h4><p>使用 github 账户注册登录<a href="https://vercel.com/">Vercel</a>官网，授权访问该仓库，即可快速部署，部署完即可访问。还能看到部署日志。</p><h4 id="4-2-部署到自己的服务器"><a href="#4-2-部署到自己的服务器" class="headerlink" title="4.2 部署到自己的服务器"></a>4.2 部署到自己的服务器</h4><h5 id="4-2-1-在服务器上进行-docker-镜像制作，然后部署"><a href="#4-2-1-在服务器上进行-docker-镜像制作，然后部署" class="headerlink" title="4.2.1 在服务器上进行 docker 镜像制作，然后部署"></a>4.2.1 在服务器上进行 docker 镜像制作，然后部署</h5><blockquote><p>这里服务器以 centos 为例</p></blockquote><h6 id="第-1-步：Dockerfile-文件"><a href="#第-1-步：Dockerfile-文件" class="headerlink" title="第 1 步：Dockerfile 文件"></a>第 1 步：Dockerfile 文件</h6><ol><li>使用 Next.js<a href="https://www.nextjs.cn/docs/deployment#docker-image">官方 Dockerfile</a></li></ol><p><strong>注意</strong>：如果使用官方 Dockerfile，比如在阿里云上进行部署，会遇到网络问题，下载某些包会很慢，跟你本地访问 github 官网一样，所以要设置国内镜像下载，速度就会变快</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile"><span class="hljs-comment"># Install dependencies only when needed</span><br><span class="hljs-keyword">FROM</span> node:alpine AS deps<br><span class="hljs-comment"># Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apk add --no-cache libc6-compat</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> package.json yarn.lock ./</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yarn install --frozen-lockfile</span><br><br><span class="hljs-comment"># Rebuild the source code only when needed</span><br><span class="hljs-keyword">FROM</span> node:alpine AS builder<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=deps /app/node_modules ./node_modules</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yarn build &amp;&amp; yarn install --production --ignore-scripts --prefer-offline</span><br><br><span class="hljs-comment"># Production image, copy all the files and run next</span><br><span class="hljs-keyword">FROM</span> node:alpine AS runner<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><br><span class="hljs-keyword">ENV</span> NODE_ENV production<br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> addgroup -g 1001 -S nodejs</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> adduser -S nextjs -u 1001</span><br><br><span class="hljs-comment"># You only need to copy next.config.js if you are NOT using the default configuration</span><br><span class="hljs-comment"># COPY --from=builder /app/next.config.js ./</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder /app/public ./public</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder --<span class="hljs-built_in">chown</span>=nextjs:nodejs /app/.next ./.next</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder /app/node_modules ./node_modules</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder /app/package.json ./package.json</span><br><br><span class="hljs-keyword">USER</span> nextjs<br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">3000</span><br><br><span class="hljs-keyword">ENV</span> PORT <span class="hljs-number">3000</span><br><br><span class="hljs-comment"># Next.js collects completely anonymous telemetry data about general usage.</span><br><span class="hljs-comment"># Learn more here: https://nextjs.org/telemetry</span><br><span class="hljs-comment"># Uncomment the following line in case you want to disable telemetry.</span><br><span class="hljs-comment"># ENV NEXT_TELEMETRY_DISABLED 1</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;node_modules/.bin/next&quot;</span>, <span class="hljs-string">&quot;start&quot;</span>]</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>使用自己的 Dockerfile</li></ol><blockquote><p>这里可以对 Docker 进行多阶段构建，使打包出来的镜像体积变小</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 构建基础镜像</span><br>FROM alpine:3.15 AS base<br><span class="hljs-comment">#纯净版镜像</span><br><br>ENV NODE_ENV=production \<br>  APP_PATH=/app<br><br>WORKDIR <span class="hljs-variable">$APP_PATH</span><br><br><span class="hljs-comment"># 使用国内镜像，加速下面 apk add下载安装alpine不稳定情况</span><br>RUN sed -i <span class="hljs-string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27;</span> /etc/apk/repositories<br><br><span class="hljs-comment"># 使用apk命令安装 nodejs 和 yarn</span><br>RUN apk add --no-cache --update nodejs=16.13.1-r0 yarn=1.22.17-r0<br><br><span class="hljs-comment"># 2. 基于基础镜像安装项目依赖</span><br>FROM base AS install<br><br>COPY package.json yarn.lock ./<br><br>RUN yarn install<br><br><span class="hljs-comment"># 3. 基于基础镜像进行最终构建</span><br>FROM base<br><br><span class="hljs-comment"># 拷贝 上面生成的 node_modules 文件夹复制到最终的工作目录下</span><br>COPY --from=install <span class="hljs-variable">$APP_PATH</span>/node_modules ./node_modules<br><br><span class="hljs-comment"># 拷贝当前目录下的所有文件(除了.dockerignore里排除的)，都拷贝到工作目录下</span><br>COPY . .<br><br>RUN yarn build<br><br>EXPOSE 3000<br><br>CMD [<span class="hljs-string">&quot;yarn&quot;</span>, <span class="hljs-string">&quot;start&quot;</span>]<br></code></pre></div></td></tr></table></figure><h6 id="第-2-步：-将源代码搞到服务器上"><a href="#第-2-步：-将源代码搞到服务器上" class="headerlink" title="第 2 步： 将源代码搞到服务器上"></a>第 2 步： 将源代码搞到服务器上</h6><ol><li>使用<code>scp</code>命令手动将本地源代码上传至服务器</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">scp -r local_dir root@121.xxx.xxx.xxx:remote_dir<br></code></pre></div></td></tr></table></figure><ol start="2"><li>或者在远程服务器上<code>wget</code>下载 github 源码，然后解压</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget https://github.com/xxx/main.zip -O main.zip &amp;&amp; unzip main.zip -d .<br></code></pre></div></td></tr></table></figure><ol start="3"><li>使用<code>xshell</code>工具上传文件到服务器</li></ol><p>上面 3 种方法都可以把本地文件传到服务器对应目录</p><h6 id="第-3-步：-docker-镜像制作"><a href="#第-3-步：-docker-镜像制作" class="headerlink" title="第 3 步： docker 镜像制作"></a>第 3 步： docker 镜像制作</h6><blockquote><p>前提是安装好了 docker 并启动</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 切换都源码目录执行</span><br>docker image build -t blog-demo .<br></code></pre></div></td></tr></table></figure><p>接着会看到命令行上正在执行镜像制作过程，顺利的话，就成功了</p><p><img src="/assets/img/nextjs-blog/build.jpg" alt="build"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 不出意外，可以看到刚才制作的镜像</span><br>docker image <span class="hljs-built_in">ls</span><br></code></pre></div></td></tr></table></figure><h6 id="第-4-步：-启动容器"><a href="#第-4-步：-启动容器" class="headerlink" title="第 4 步： 启动容器"></a>第 4 步： 启动容器</h6><blockquote><p>前提要在服务器上开好安全组</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> container run -d -p <span class="hljs-number">80</span>:<span class="hljs-number">3000</span> -it blog-demo<br><span class="hljs-comment"># -d： 后台运行容器</span><br><span class="hljs-comment"># -p: 前面80是本机服务器开放端口，后面3000是容器暴露出来的端口</span><br><span class="hljs-comment"># --name：给容器命名</span><br></code></pre></div></td></tr></table></figure><p>不出意外，容器成功运行。可以在浏览器里进行访问了。</p><h5 id="4-2-2-使用github-actions自动部署"><a href="#4-2-2-使用github-actions自动部署" class="headerlink" title="4.2.2 使用github actions自动部署"></a>4.2.2 使用<code>github actions</code>自动部署</h5><blockquote><p>上面手动步骤太麻烦了，需要解放双手</p></blockquote><p>这里也可以选择 dockerhub，注册好后，创建仓库，即可推送。阿里云的镜像容器服务，也需要提前开通准备好（命名空间+私人仓库）。</p><h6 id="第-1-步：提前准备好"><a href="#第-1-步：提前准备好" class="headerlink" title="第 1 步：提前准备好"></a>第 1 步：提前准备好</h6><ul><li>容器登录账号+密码</li><li>服务器的 HOST + 登录账户 + 密码</li><li>阿里云或者 dockerhub 的镜像容器仓库</li></ul><h6 id="第-2-步：github-该仓库-Settings-gt-Secrets-添加秘钥，即上面准备好的这-5-个"><a href="#第-2-步：github-该仓库-Settings-gt-Secrets-添加秘钥，即上面准备好的这-5-个" class="headerlink" title="第 2 步：github 该仓库 Settings-&gt;Secrets 添加秘钥，即上面准备好的这 5 个"></a>第 2 步：github 该仓库 Settings-&gt;Secrets 添加秘钥，即上面准备好的这 5 个</h6><blockquote><p>我这里买的是阿里云的屌丝 1 核 2G 机器，生产环境别这么玩，账号密码可能泄露</p></blockquote><p><img src="/assets/img/nextjs-blog/secrets.jpg" alt="secrets"></p><h6 id="第-3-步：项目根目录添加github-yml配置文件"><a href="#第-3-步：项目根目录添加github-yml配置文件" class="headerlink" title="第 3 步：项目根目录添加github yml配置文件"></a>第 3 步：项目根目录添加<code>github yml</code>配置文件</h6><blockquote><p>.github&#x2F;workflows&#x2F;deploy.yml</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">name: Docker Image CI<br><br>on:<br>  push: <span class="hljs-comment"># push 时触发ci</span><br>    branches: [main] <span class="hljs-comment"># 作用于main分支</span><br>  <span class="hljs-comment"># pull_request:</span><br>  <span class="hljs-comment">#   branches: [main]</span><br><br><span class="hljs-built_in">jobs</span>:<br>  build:<br>    runs-on: ubuntu-latest<br><br>    steps:<br>      <span class="hljs-comment"># 拉取main分支代码</span><br>      - name: Checkout<br>        uses: actions/checkout@v2<br><br>      <span class="hljs-comment"># 制作docker镜像并推送到阿里云容器镜像服务</span><br>      - name: build and push docker image<br>        run: |<br>          <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;&#123; secrets.ALIYUN_DOCKER_PASSWORD &#125;</span>&#125; | docker login registry.cn-hangzhou.aliyuncs.com --username <span class="hljs-variable">$&#123;&#123; secrets.ALIYUN_DOCKER_USERNAME &#125;</span>&#125; --password-stdin<br><br>          docker image build -t myblog:latest .<br>          docker tag myblog registry.cn-hangzhou.aliyuncs.com/test-blog/myblog:latest<br>          docker push registry.cn-hangzhou.aliyuncs.com/test-blog/myblog:latest<br>          docker <span class="hljs-built_in">logout</span><br>      <span class="hljs-comment"># 登录远程服务器，拉取镜像，制作并重启容器</span><br>      <span class="hljs-comment"># https://github.com/marketplace/actions/remote-ssh-commands</span><br>      - name: ssh remote deploy<br>        uses: fifsky/ssh-action@master<br>        with:<br>          <span class="hljs-built_in">command</span>: |<br>            <span class="hljs-built_in">cd</span> /<br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;1.docker login start==&gt;&quot;</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;&#123; secrets.ALIYUN_DOCKER_PASSWORD &#125;</span>&#125; | docker login registry.cn-hangzhou.aliyuncs.com --username <span class="hljs-variable">$&#123;&#123; secrets.ALIYUN_DOCKER_USERNAME &#125;</span>&#125; --password-stdin<br><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;2.docker stop myblog container==&gt;&quot;</span><br>            docker container stop myblog<br><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;3.docker conatainer rm==&gt;&quot;</span><br>            docker container <span class="hljs-built_in">rm</span> myblog<br><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;4.docker image rm==&gt;&quot;</span><br>            docker image <span class="hljs-built_in">rm</span> registry.cn-hangzhou.aliyuncs.com/test-blog/myblog:latest<br><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;5.docker pull==&gt;&quot;</span><br>            docker pull registry.cn-hangzhou.aliyuncs.com/test-blog/myblog:latest<br><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;6.docker container create and start==&gt;&quot;</span><br>            docker container run -d -p 80:3000 --name myblog registry.cn-hangzhou.aliyuncs.com/test-blog/myblog:latest<br><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;7.docker logout==&gt;&quot;</span><br>            docker <span class="hljs-built_in">logout</span><br>          host: <span class="hljs-variable">$&#123;&#123; secrets.HOST &#125;</span>&#125;<br>          user: <span class="hljs-variable">$&#123;&#123; secrets.USER &#125;</span>&#125;<br>          pass: <span class="hljs-variable">$&#123;&#123; secrets.PASSWORD &#125;</span>&#125;<br><br></code></pre></div></td></tr></table></figure><h6 id="第-4-步：提交代码，自动部署"><a href="#第-4-步：提交代码，自动部署" class="headerlink" title="第 4 步：提交代码，自动部署"></a>第 4 步：提交代码，自动部署</h6><blockquote><p>不出意外，在仓库的 Actions 里看到一切 ok</p></blockquote><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> .<br><span class="hljs-symbol">git</span> commit -m <span class="hljs-string">&quot;chore: add github actions yml&quot;</span><br><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> -u origin main<br></code></pre></div></td></tr></table></figure><p><img src="/assets/img/nextjs-blog/deploy.jpg" alt="deploy"></p><p><a href="https://nextjs-blog-nine-delta-65.vercel.app/">当前博客点击预览</a></p><p><img src="/assets/img/nextjs-blog/666.png" alt="666"></p><h3 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h3><ol><li><p><a href="https://nextjs.org/docs/getting-started">Next.js 官方文档</a></p></li><li><p><a href="https://juejin.cn/post/6991689670027542564">如何优化 node 项目的 docker 镜像</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">Docker 入门教程</a></p></li><li><p><a href="https://www.zhihu.com/question/379598562">前后端同构和模板渲染的区别是什么呢？</a></p></li><li><p><a href="https://juejin.cn/post/6950799922178310152">手把手教你用 Github Actions 部署前端项目</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>nextjs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>next.js</tag>
      
      <tag>github actions</tag>
      
      <tag>CI</tag>
      
      <tag>CD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微前端qiankun上手体验</title>
    <link href="/2021/02/25/qiankun/"/>
    <url>/2021/02/25/qiankun/</url>
    
    <content type="html"><![CDATA[<blockquote><ol><li><a href="https://qiankun.umijs.org/zh">qiankun 官方文档</a></li><li><a href="https://zh-hans.single-spa.js.org/docs/getting-started-overview/">single-spa</a></li><li><a href="https://juejin.cn/post/6844904162509979662#heading-0">微前端-最容易看懂的微前端知识</a></li></ol></blockquote><p>微前端的类型：</p><ol><li>受路由控制渲染的子应用</li><li>不受路由控制的组件</li><li>非渲染组件，应用间通信逻辑</li></ol><h3 id="1-子应用-vue"><a href="#1-子应用-vue" class="headerlink" title="1.子应用-vue"></a>1.子应用-vue</h3><h4 id="1-vue-cli-创建子应用"><a href="#1-vue-cli-创建子应用" class="headerlink" title="1. vue-cli 创建子应用"></a>1. vue-cli 创建子应用</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vue create qiankun_vue<br></code></pre></div></td></tr></table></figure><h4 id="2-修改入口main-js文件"><a href="#2-修改入口main-js文件" class="headerlink" title="2. 修改入口main.js文件"></a>2. 修改入口<code>main.js</code>文件</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// https://qiankun.umijs.org/zh/guide/tutorial#vue-微应用</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<br><br><span class="hljs-comment">// Vue.config.productionTip = false</span><br><br><span class="hljs-keyword">let</span> vueInstance = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">props = &#123;&#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; container &#125; = props;<br><br>  vueInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    router,<br>    <span class="hljs-attr">render</span>: <span class="hljs-function">(<span class="hljs-params">h</span>) =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>    <span class="hljs-comment">// 这里是挂载到自己的html上，基座会拿到这个挂载后的html，将其插入到相应的容器里</span><br><br>    <span class="hljs-comment">// Application died in status NOT_MOUNTED: Target container with #container not existed after xxx mounted!</span><br>    <span class="hljs-comment">// 微应用的根 id 与其他 DOM 冲突。解决办法是：修改根 id 的查找范围。</span><br>  &#125;).$mount(container ? container.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#app&quot;</span>) : <span class="hljs-string">&quot;#app&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 使用 webpack 运行时 publicPath 配置</span><br><span class="hljs-comment">// 动态设置publicPath</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">__POWERED_BY_QIANKUN__</span>) &#123;<br>  __webpack_public_path__ = <span class="hljs-variable language_">window</span>.<span class="hljs-property">__INJECTED_PUBLIC_PATH_BY_QIANKUN__</span>;<br>&#125;<br><br><span class="hljs-comment">// https://qiankun.umijs.org/zh/faq#如何独立运行微应用？</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">window</span>.<span class="hljs-property">__POWERED_BY_QIANKUN__</span>) &#123;<br>  <span class="hljs-title function_">render</span>();<br>&#125;<br><br><span class="hljs-comment">// 暴露3个异步方法 bootstrap mount unmount</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params">props</span>) &#123;&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">mount</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;props=====&gt;&quot;</span>, props);<br>  <span class="hljs-title function_">render</span>(props);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">unmount</span>(<span class="hljs-params">props</span>) &#123;<br>  vueInstance &amp;&amp; vueInstance.$destroy();<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-修改路由router-index-js文件"><a href="#3-修改路由router-index-js文件" class="headerlink" title="3. 修改路由router/index.js文件"></a>3. 修改路由<code>router/index.js</code>文件</h4><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff">  const router = new VueRouter(&#123;<br>    mode: &#x27;history&#x27;,<br><span class="hljs-deletion">-    base: process.env.BASE_URL,</span><br><span class="hljs-addition">+    base: window.__POWERED_BY_QIANKUN__ ? &#x27;/vue&#x27; : process.env.BASE_URL,</span><br>    routes<br>  &#125;)<br><br></code></pre></div></td></tr></table></figure><h4 id="4-根目录新建vue-config-js，修改打包配置"><a href="#4-根目录新建vue-config-js，修改打包配置" class="headerlink" title="4. 根目录新建vue.config.js，修改打包配置"></a>4. 根目录新建<code>vue.config.js</code>，修改打包配置</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">8000</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>: <span class="hljs-string">&quot;*&quot;</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-comment">// https://webpack.docschina.org/configuration/output/#outputlibrary</span><br>  <span class="hljs-attr">configureWebpack</span>: &#123;<br>    <span class="hljs-attr">output</span>: &#123;<br>      <span class="hljs-attr">library</span>: <span class="hljs-string">&quot;vueApp&quot;</span>, <span class="hljs-comment">// 打包成一个类库</span><br>      <span class="hljs-attr">libraryTarget</span>: <span class="hljs-string">&quot;umd&quot;</span>, <span class="hljs-comment">// umd最终会把bootstrap/mount/unmount挂载到window上</span><br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="2-子应用-react"><a href="#2-子应用-react" class="headerlink" title="2.子应用-react"></a>2.子应用-react</h3><h4 id="1-create-react-app-创建子应用"><a href="#1-create-react-app-创建子应用" class="headerlink" title="1. create-react-app 创建子应用"></a>1. create-react-app 创建子应用</h4><figure class="highlight dsconfig"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dsconfig"><span class="hljs-built_in">create-react-app</span> <span class="hljs-string">qiankun_react</span><br></code></pre></div></td></tr></table></figure><h4 id="2-修改入口index-js文件"><a href="#2-修改入口index-js文件" class="headerlink" title="2. 修改入口index.js文件"></a>2. 修改入口<code>index.js</code>文件</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BrowserRouter</span>, <span class="hljs-title class_">Link</span>, <span class="hljs-title class_">Route</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./index.css&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App&quot;</span>;<br><span class="hljs-comment">// import reportWebVitals from &#x27;./reportWebVitals&#x27;;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; container &#125; = props;<br>  <span class="hljs-comment">// https://reactrouter.com/web/api/BrowserRouter</span><br>  <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span> <span class="hljs-attr">basename</span>=<span class="hljs-string">&quot;/react&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>react-home<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span> |<span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>react-about<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">        &#123;/* exact 严格模式 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">exact</span> <span class="hljs-attr">render</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span>&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">exact</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">render</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>react about page<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#125;</span><br><span class="language-xml">        &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span>,<br>    container<br>      ? container.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#root&quot;</span>)<br>      : <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#root&quot;</span>)<br>  );<br>&#125;<br><br><span class="hljs-comment">// 独立运行</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">window</span>.<span class="hljs-property">__POWERED_BY_QIANKUN__</span>) &#123;<br>  <span class="hljs-title function_">render</span>();<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params">props</span>) &#123;&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">mount</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-title function_">render</span>(props);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">unmount</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; container &#125; = props;<br>  <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">unmountComponentAtNode</span>(<br>    container<br>      ? container.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#root&quot;</span>)<br>      : <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#root&quot;</span>)<br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-修改打包配置文件"><a href="#3-修改打包配置文件" class="headerlink" title="3. 修改打包配置文件"></a>3. 修改打包配置文件</h4><h5 id="1-安装react-app-rewired"><a href="#1-安装react-app-rewired" class="headerlink" title="1. 安装react-app-rewired"></a>1. 安装<code>react-app-rewired</code></h5><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yarn add react-app-rewired -D<br></code></pre></div></td></tr></table></figure><h5 id="2-子应用根目录新建config-overrides-js文件"><a href="#2-子应用根目录新建config-overrides-js文件" class="headerlink" title="2. 子应用根目录新建config-overrides.js文件"></a>2. 子应用根目录新建<code>config-overrides.js</code>文件</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// https://github.com/timarney/react-app-rewired/blob/HEAD/README_zh.md#扩展配置选项</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">webpack</span>: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    config.<span class="hljs-property">output</span>.<span class="hljs-property">library</span> = <span class="hljs-string">&quot;reactApp&quot;</span>;<br>    config.<span class="hljs-property">output</span>.<span class="hljs-property">libraryTarget</span> = <span class="hljs-string">&quot;umd&quot;</span>;<br>    config.<span class="hljs-property">output</span>.<span class="hljs-property">publicPath</span> = <span class="hljs-string">&quot;http://localhost:9000/&quot;</span>;<br>    <span class="hljs-keyword">return</span> config;<br>  &#125;,<br>  <span class="hljs-attr">devServer</span>: <span class="hljs-function">(<span class="hljs-params">configFunc</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">proxy, allowedHost</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> config = <span class="hljs-title function_">configFunc</span>(proxy, allowedHost);<br>      <span class="hljs-comment">// 设置开发服务允许跨域</span><br>      config.<span class="hljs-property">headers</span> = &#123;<br>        <span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>: <span class="hljs-string">&quot;*&quot;</span>,<br>      &#125;;<br><br>      <span class="hljs-keyword">return</span> config;<br>    &#125;;<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><h5 id="3-设置环境变量"><a href="#3-设置环境变量" class="headerlink" title="3. 设置环境变量"></a>3. 设置环境变量</h5><ol><li>子应用根目录新建<code>.env</code>文件</li></ol><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">PORT</span>=<span class="hljs-number">4000</span><br><span class="hljs-attr">WDS_SOCKET_PORT</span>=<span class="hljs-number">4000</span><br></code></pre></div></td></tr></table></figure><p>或者在<code>package.json</code>启动脚本中修改端口</p><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"> &quot;scripts&quot;: &#123;<br><span class="hljs-deletion">-     &quot;start&quot;: &quot;react-app-rewired start&quot;,</span><br><span class="hljs-addition">+     &quot;start&quot;: &quot;set PORT=4000 &amp;&amp; react-app-rewired start&quot;,</span><br>   &#125;,<br></code></pre></div></td></tr></table></figure><ol start="2"><li>修改<code>package.json</code>文件</li></ol><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"> &quot;scripts&quot;: &#123;<br><span class="hljs-deletion">-     &quot;start&quot;: &quot;react-scripts start&quot;,</span><br><span class="hljs-deletion">-     &quot;build&quot;: &quot;react-scripts build&quot;,</span><br><span class="hljs-deletion">-     &quot;test&quot;: &quot;react-scripts test&quot;,</span><br><span class="hljs-deletion">-     &quot;eject&quot;: &quot;react-scripts eject&quot;</span><br><span class="hljs-addition">+     &quot;start&quot;: &quot;react-app-rewired start&quot;,</span><br><span class="hljs-addition">+     &quot;build&quot;: &quot;react-app-rewired build&quot;,</span><br><span class="hljs-addition">+     &quot;test&quot;: &quot;react-app-rewired test&quot;,</span><br><span class="hljs-addition">+     &quot;eject&quot;: &quot;react-app-rewired eject&quot;</span><br>   &#125;,<br></code></pre></div></td></tr></table></figure><h3 id="3-子应用-非-webpack-构建-jquery-bootstrap"><a href="#3-子应用-非-webpack-构建-jquery-bootstrap" class="headerlink" title="3.子应用(非 webpack 构建)-jquery+bootstrap"></a>3.子应用(非 webpack 构建)-jquery+bootstrap</h3><h4 id="1-新建index-html文件"><a href="#1-新建index-html文件" class="headerlink" title="1. 新建index.html文件"></a>1. 新建<code>index.html</code>文件</h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap 101 Template<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;//localhost:5000/lib/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>你好，世界！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-addon&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;basic-addon1&quot;</span>&gt;</span>@<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Username&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">&quot;basic-addon1&quot;</span></span><br><span class="hljs-tag">          /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//localhost:5000/lib/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//localhost:5000/lib/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  entry js为入口文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//localhost:5000/entry.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="2-新建entry-js入口文件"><a href="#2-新建entry-js入口文件" class="headerlink" title="2. 新建entry.js入口文件"></a>2. 新建<code>entry.js</code>入口文件</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">render</span> = (<span class="hljs-params">$</span>) =&gt; &#123;<br>  $(<span class="hljs-string">&quot;#purehtml-container&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;Hello, render with jQuery&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>();<br>&#125;;<br>(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-variable language_">global</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">global</span>[<span class="hljs-string">&quot;purehtml&quot;</span>] = &#123;<br>    <span class="hljs-attr">bootstrap</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;purehtml bootstrap&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>();<br>    &#125;,<br>    <span class="hljs-attr">mount</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;purehtml mount&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">render</span>($);<br>    &#125;,<br>    <span class="hljs-attr">unmount</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;purehtml unmount&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>();<br>    &#125;,<br>  &#125;;<br>&#125;)(<span class="hljs-variable language_">window</span>);<br></code></pre></div></td></tr></table></figure><h3 id="4-基座应用-vue"><a href="#4-基座应用-vue" class="headerlink" title="4.基座应用-vue"></a>4.基座应用-vue</h3><h4 id="1-修改入口main-js文件"><a href="#1-修改入口main-js文件" class="headerlink" title="1.修改入口main.js文件"></a>1.修改入口<code>main.js</code>文件</h4><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff">import Vue from &#x27;vue&#x27;<br>import App from &#x27;./App.vue&#x27;<br>import router from &#x27;./router&#x27;<br><span class="hljs-addition">+ import &#123; registerMicroApps, start &#125; from &#x27;qiankun&#x27;;</span><br><span class="hljs-addition">+ import ElementUI from &#x27;element-ui&#x27;;</span><br><span class="hljs-addition">+ import &#x27;element-ui/lib/theme-chalk/index.css&#x27;;</span><br><br>Vue.config.productionTip = false<br><br><span class="hljs-addition">+ Vue.use(ElementUI);</span><br><br><span class="hljs-addition">+ const apps = [</span><br><span class="hljs-addition">+   &#123;</span><br><span class="hljs-addition">+     name: &quot;vueApp&quot;,</span><br><span class="hljs-addition">+     // 默认通过fetch加载这个html，解析里面的js，动态的执行</span><br><span class="hljs-addition">+     // 注意：子应用必须支持跨域</span><br><span class="hljs-addition">+     entry: &quot;http://localhost:8000&quot;,</span><br><span class="hljs-addition">+     container: &quot;#vueDOM&quot;, // 容器名</span><br><span class="hljs-addition">+     activeRule: &quot;/vue&quot;, // 激活路径</span><br><span class="hljs-addition">+     props: &#123; a: 1, b: 2 &#125;, // 传给子应用的参数</span><br><span class="hljs-addition">+   &#125;,</span><br><span class="hljs-addition">+   &#123;</span><br><span class="hljs-addition">+     name: &quot;reactApp&quot;,</span><br><span class="hljs-addition">+     entry: &quot;//localhost:9000&quot;,</span><br><span class="hljs-addition">+     container: &quot;#react&quot;,</span><br><span class="hljs-addition">+     activeRule: &quot;/react&quot;,</span><br><span class="hljs-addition">+   &#125;,</span><br><span class="hljs-addition">+   &#123;</span><br><span class="hljs-addition">+     name: &quot;jqueryApp&quot;,</span><br><span class="hljs-addition">+     entry: &quot;//localhost:5000&quot;,</span><br><span class="hljs-addition">+     container: &quot;#jquery&quot;,</span><br><span class="hljs-addition">+     activeRule: &quot;/jquery&quot;,</span><br><span class="hljs-addition">+     props: &#123; a: 100, b: 200 &#125;,</span><br><span class="hljs-addition">+   &#125;,</span><br><span class="hljs-addition">+ ];</span><br><span class="hljs-addition">+</span><br><span class="hljs-addition">+ registerMicroApps(apps); // 注册应用</span><br><span class="hljs-addition">+ // 启动应用</span><br><span class="hljs-addition">+ start(&#123;</span><br><span class="hljs-addition">+   // https://qiankun.umijs.org/zh/api#startopts</span><br><span class="hljs-addition">+   prefetch: false, // 取消预加载</span><br><span class="hljs-addition">+ &#125;);</span><br><br>new Vue(&#123;<br>  router,<br>  render: h =&gt; h(App)<br>&#125;).$mount(&#x27;#app&#x27;)<br></code></pre></div></td></tr></table></figure><h4 id="2-修改App-vue组件"><a href="#2-修改App-vue组件" class="headerlink" title="2. 修改App.vue组件"></a>2. 修改<code>App.vue</code>组件</h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span> <span class="hljs-attr">:router</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 基座自己的路由 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>base-home<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>base-about<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 引用其他子应用 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;/vue&quot;</span>&gt;</span>vue 应用<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;/react&quot;</span>&gt;</span>react 应用<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;/jquery&quot;</span>&gt;</span>jquery + bootstrap 应用<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vueDOM&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;react&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jquery&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>qiankun</tag>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redux toolkit 的使用</title>
    <link href="/2020/10/09/redux-toolkit/"/>
    <url>/2020/10/09/redux-toolkit/</url>
    
    <content type="html"><![CDATA[<blockquote><ol><li><a href="https://redux-toolkit.js.org/">Redux Toolkit 官网</a></li><li><a href="https://www.51hint.com/posts/redux_toolkit/">Redux_toolkit 使用</a></li></ol></blockquote><h3 id="为什么要使用-redux-toolkit"><a href="#为什么要使用-redux-toolkit" class="headerlink" title="为什么要使用 redux toolkit"></a>为什么要使用 redux toolkit</h3><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-comment">// 优化前</span><br>index<span class="hljs-selector-class">.js</span><br>state<span class="hljs-selector-class">.js</span><br>actionTypes<span class="hljs-selector-class">.js</span><br>actions<span class="hljs-selector-class">.js</span><br>reducer<span class="hljs-selector-class">.js</span><br><br><span class="hljs-comment">// 优化后</span><br>index<span class="hljs-selector-class">.js</span><br>slice.js<br></code></pre></div></td></tr></table></figure><p>之前使用<em>redux</em>,需要安装<em>redux-thunk,immer</em>等其它依赖库，使用 store 的同事需要重复写许多样板代码，现在把 action 和 reducer 都写在了一起，简化了许多样板代码，代码变得更加精简。</p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight gherkin"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gherkin">├── LICENSE<br>├── package.json<br>├── public<br>|<span class="hljs-string">  ├── favicon.ico</span><br><span class="hljs-string"></span>|<span class="hljs-string">  ├── index.html</span><br><span class="hljs-string">├── README.md</span><br><span class="hljs-string">├── src</span><br><span class="hljs-string"></span>|<span class="hljs-string">  ├── App.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">  ├── components</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  ├── ComA</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  ├── index.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  └── store</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">     ├── comASlice.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">     └── state.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  ├── ComB</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  ├── index.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  └── store</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">     ├── comBSlice.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">     └── state.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">  └── Header</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">     └── index.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">  ├── index.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">  └── store</span><br><span class="hljs-string"></span>|<span class="hljs-string">     ├── index.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">     └── reducer.js</span><br><span class="hljs-string">└── yarn.lock</span><br></code></pre></div></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yarn add react-redux @reduxjs/toolkit<br></code></pre></div></td></tr></table></figure><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><ol><li>index.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Provider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App&quot;</span>;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>)<br>);<br></code></pre></div></td></tr></table></figure><ol start="2"><li>src&#x2F;store&#x2F;reducer.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; combineReducers &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><span class="hljs-keyword">import</span> comASlice <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../components/ComA/store/comASlice&quot;</span>;<br><span class="hljs-keyword">import</span> comBSlice <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../components/ComB/store/comBSlice&quot;</span>;<br><br><span class="hljs-keyword">const</span> rootReducer = <span class="hljs-title function_">combineReducers</span>(&#123;<br>  <span class="hljs-attr">comAReducer</span>: comASlice.<span class="hljs-property">reducer</span>,<br>  <span class="hljs-attr">comBReducer</span>: comBSlice.<span class="hljs-property">reducer</span>,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> rootReducer;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>src&#x2F;store&#x2F;index.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; configureStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><span class="hljs-keyword">import</span> rootReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./reducer&quot;</span>;<br><br><span class="hljs-comment">// 这里使用configureStore代替之前的createStore</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">configureStore</span>(&#123;<br>  <span class="hljs-attr">reducer</span>: rootReducer,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>src&#x2F;components&#x2F;ComB&#x2F;index.js</li></ol><p><strong>hooks 下使用 useSelector 和 useDispatch 代替之前 connect 的 mapStateToProps 和 mapDispatchToPrpops</strong>，之前通过 props 获取 state 和 dispatch，现在直接通过 hooks 的方式获取，代码变得更加的简洁</p><blockquote><p><a href="https://blog.csdn.net/vitaviva/article/details/104508139">redux 中使用 useSelector、useDispatch 替代 connect</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">// import &#123; connect &#125; from &#x27;react-redux&#x27;;</span><br><span class="hljs-keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-keyword">import</span> comBSlice <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store/comBSlice&quot;</span>;<br><br><span class="hljs-keyword">const</span> &#123;<br>  <span class="hljs-attr">actions</span>: &#123; increment, decrement &#125;,<br>&#125; = comBSlice;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">ComA</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-comment">// const &#123; num &#125; = props;</span><br>  <span class="hljs-comment">// const &#123; handleIncrement, handleDecrement &#125; = props;</span><br><br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>();<br>  <span class="hljs-keyword">const</span> num = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.<span class="hljs-property">comBReducer</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleIncrement</span> = (<span class="hljs-params">num</span>) =&gt; <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">increment</span>(num));<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleDecrement</span> = (<span class="hljs-params">num</span>) =&gt; <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">decrement</span>(num));<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>ComA<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        num: <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>&#123;num&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> handleIncrement(1)&#125;&gt;increase +1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> handleDecrement(1)&#125;&gt;decrease -1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-comment">// const mapStateToProps = state =&gt; (&#123;</span><br><span class="hljs-comment">//   num: state.comBReducer</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">// const mapDispatchToProps = dispatch =&gt; (&#123;</span><br><span class="hljs-comment">//   handleIncrement(num) &#123;</span><br><span class="hljs-comment">//     dispatch(increment(num));</span><br><span class="hljs-comment">//   &#125;,</span><br><span class="hljs-comment">//   handleDecrement(num) &#123;</span><br><span class="hljs-comment">//     dispatch(decrement(num));</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;)</span><br><br><span class="hljs-comment">// export default connect(mapStateToProps, mapDispatchToProps)(memo(ComA));</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">memo</span>(<span class="hljs-title class_">ComA</span>);<br></code></pre></div></td></tr></table></figure><ol start="5"><li>src&#x2F;components&#x2F;ComB&#x2F;store&#x2F;comBSlice.js</li></ol><blockquote><p>通过 createSlice 将 action 和 reducer 建立在一起，代码更加简洁</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createSlice &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; num &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./state&quot;</span>;<br><br><span class="hljs-keyword">const</span> comBSlice = <span class="hljs-title function_">createSlice</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;comB&quot;</span>,<br>  <span class="hljs-attr">initialState</span>: num,<br>  <span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-attr">increment</span>: <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> state + action.<span class="hljs-property">payload</span>,<br>    <span class="hljs-attr">decrement</span>: <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> state - action.<span class="hljs-property">payload</span>,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> comBSlice;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
      <tag>redux</tag>
      
      <tag>redux-toolkit</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
